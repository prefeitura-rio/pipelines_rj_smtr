{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.3", "generated_at": "2025-02-20T18:17:02.226313Z", "invocation_id": "c0b76428-285c-4d47-b857-c630f116bb10", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.557124Z", "completed_at": "2025-02-20T18:13:39.567921Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.569605Z", "completed_at": "2025-02-20T18:13:39.569621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015614032745361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.agency", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(agency_id AS STRING) agency_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.agency as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`agency`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.575423Z", "completed_at": "2025-02-20T18:13:39.580957Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.582862Z", "completed_at": "2025-02-20T18:13:39.582873Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01066136360168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.autuacao_citran", "compiled": true, "compiled_code": "\n\n\nSELECT\n  DATE(data) AS data,\n  SAFE_CAST(JSON_VALUE(content,'$.Hora') AS STRING) hora,\n  Cod__Detran as id_auto_infracao,\n  IF(JSON_VALUE(content, '$.DtLimDP') != '', SAFE_CAST(PARSE_DATE('%d/%m/%Y', JSON_VALUE(content,'$.DtLimDP')) AS STRING), NULL) data_limite_defesa_previa,\n  IF(JSON_VALUE(content, '$.DtLimR') != '', SAFE_CAST(PARSE_DATE('%d/%m/%Y', JSON_VALUE(content,'$.DtLimR')) AS STRING), NULL) data_limite_recurso,\n  SAFE_CAST(JSON_VALUE(content,'$.Situacao Atual') AS STRING) situacao_atual,\n  SAFE_CAST(JSON_VALUE(content,'$.\"St. Infracao\"') AS STRING) status_infracao,\n  SAFE_CAST(JSON_VALUE(content,'$.Multa') AS STRING) codigo_enquadramento,\n  SAFE_CAST(JSON_VALUE(content,'$.DsInf') AS STRING) tipificacao_resumida,\n  SAFE_CAST(JSON_VALUE(content,'$.Po') AS STRING) pontuacao,\n  SAFE_CAST(JSON_VALUE(content,'$.Tipo') AS STRING) tipo_veiculo,\n  SAFE_CAST(JSON_VALUE(content,'$.Marca') AS STRING) descricao_veiculo,\n  SAFE_CAST(JSON_VALUE(content,'$.Esp') AS STRING) especie_veiculo,\n  SAFE_CAST(JSON_VALUE(content,'$.CDUF') AS STRING) uf_proprietario,\n  SAFE_CAST(JSON_VALUE(content,'$.Cep') AS STRING) cep_proprietario,\n  SAFE_CAST(JSON_VALUE(content,'$.Ufir') AS NUMERIC) valor_infracao,\n  SAFE_CAST(JSON_VALUE(content,'$.VlPagto') AS NUMERIC) valor_pago,\n  IF(JSON_VALUE(content, '$.DtPagto') != '', SAFE_CAST(PARSE_DATE('%d/%m/%Y', JSON_VALUE(content,'$.DtPagto')) AS STRING), NULL) data_pagamento,\n  SAFE_CAST(JSON_VALUE(content,'$.Orgao') AS STRING) descricao_autuador,\n  SAFE_CAST(JSON_VALUE(content,'$.LocInf') AS STRING) endereco_autuacao,\n  SAFE_CAST(JSON_VALUE(content,'$.ProAutu') AS STRING) processo_defesa_autuacao,\n  SAFE_CAST(JSON_VALUE(content,'$.NotifPen') AS STRING) recurso_penalidade_multa,\n  SAFE_CAST(JSON_VALUE(content,'$.ProcRI') AS STRING) processo_troca_real_infrator,\n\nFROM\n  `rj-smtr-staging`.`infracao_staging`.`autuacoes_citran` as t", "relation_name": "`rj-smtr`.`transito_staging`.`autuacao_citran`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.587076Z", "completed_at": "2025-02-20T18:13:39.601533Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.602859Z", "completed_at": "2025-02-20T18:13:39.602868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018280744552612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_calendario_manual", "compiled": true, "compiled_code": "\n\nwith\n    datas as (\n        select\n            data,\n            date(null) as feed_start_date,\n            case\n                when data = \"2024-10-21\"\n                then \"Ponto Facultativo\"  -- Ponto Facultativo - Dia do Comerci\u00e1rio - (Processo.Rio MTR-DES-2024/64171)\n                when data = \"2024-10-28\"\n                then \"Ponto Facultativo\"  -- Ponto Facultativo - Dia do Servidor P\u00fablico - (Processo.Rio MTR-DES-2024/64417)\n                when data between date(2024, 11, 18) and date(2024, 11, 19)\n                then \"Ponto Facultativo\"  -- Ponto Facultativo - G20 - (Processo.Rio MTR-DES-2024/67477)\n            end as tipo_dia,\n            case\n                when data between date(2024, 09, 14) and date(2024, 09, 15)\n                then \"Ver\u00e3o + Rock in Rio\"\n                when data between date(2024, 09, 19) and date(2024, 09, 22)\n                then \"Rock in Rio\"\n                when data = date(2024, 10, 06)\n                then \"Elei\u00e7\u00e3o\"\n                when data = date(2024, 11, 03)\n                then \"Enem\"\n                when data = date(2024, 11, 10)\n                then \"Enem\"\n                when data = date(2024, 11, 24)\n                then \"Parada LGBTQI+\"  -- Processo.Rio MTR-DES-2024/70057\n                when data between date(2024, 12, 07) and date(2024, 12, 08)\n                then \"Extraordin\u00e1ria - Ver\u00e3o\"  -- Processo.Rio MTR-DES-2024/72800\n                when data between date(2024, 12, 14) and date(2024, 12, 15)\n                then \"Extraordin\u00e1ria - Ver\u00e3o\"  -- Processo.Rio MTR-DES-2024/74396\n                when data = date(2024, 12, 23)\n                then \"Fim de ano\"  -- Processo.Rio MTR-DES-2024/75723\n                when data between date(2024, 12, 26) and date(2024, 12, 27)\n                then \"Fim de ano\"  -- Processo.Rio MTR-DES-2024/75723\n                when data = date(2024, 12, 30)\n                then \"Fim de ano\"  -- Processo.Rio MTR-DES-2024/75723\n                when data = date(2024, 12, 31)\n                then \"Vespera de Reveillon\"  -- Processo.Rio MTR-DES-2024/76453\n                when data = date(2025, 01, 01)\n                then \"Reveillon\"  -- Processo.Rio MTR-DES-2024/76453\n                when data between date(2025, 01, 02) and date(2025, 01, 03)\n                then \"Fim de ano\"  -- Processo.Rio MTR-DES-2024/77046\n            end as tipo_os\n        from\n            unnest(\n                generate_date_array(\n                    \n                        date(\"2022-01-01T00:00:00\"),\n                        date(\"2022-01-01T01:00:00\")\n                    \n                )\n            ) as data\n    )\nselect *\nfrom datas\nwhere feed_start_date is not null or tipo_dia is not null or tipo_os is not null", "relation_name": "`rj-smtr`.`planejamento_staging`.`aux_calendario_manual`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.607421Z", "completed_at": "2025-02-20T18:13:39.611688Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.612976Z", "completed_at": "2025-02-20T18:13:39.612985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008695125579833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_h3_res9", "compiled": true, "compiled_code": "\n\nSELECT\n  tile_id,\n  ST_GEOGFROMTEXT(geometry) AS geometry\nFROM\n  `rj-smtr`.`br_rj_riodejaneiro_geo`.`h3_res9`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`aux_h3_res9`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.617521Z", "completed_at": "2025-02-20T18:13:39.621370Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.622735Z", "completed_at": "2025-02-20T18:13:39.622744Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00787496566772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.brt_registros", "compiled": true, "compiled_code": "SELECT\n    SAFE_CAST(id_veiculo AS STRING) id_veiculo,\n    SAFE_CAST(DATETIME(TIMESTAMP(timestamp_gps), \"America/Sao_Paulo\" ) AS DATETIME) timestamp_gps,\n    SAFE_CAST(DATETIME(TIMESTAMP_TRUNC(TIMESTAMP(timestamp_captura), SECOND), \"America/Sao_Paulo\" ) AS DATETIME) timestamp_captura,\n    REPLACE(content,\"None\",\"\") content,\n    data,\n    hora\nfrom\n    rj-smtr-staging.br_rj_riodejaneiro_brt_gps_staging.registros as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_registros`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.626932Z", "completed_at": "2025-02-20T18:13:39.631093Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.632464Z", "completed_at": "2025-02-20T18:13:39.632473Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008070230484008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.calendar", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(service_id AS STRING) service_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.calendar as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.636332Z", "completed_at": "2025-02-20T18:13:39.641863Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.643167Z", "completed_at": "2025-02-20T18:13:39.643174Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009219169616699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.dicionario", "compiled": true, "compiled_code": "\nSELECT\n  SAFE_CAST(chave AS STRING) AS chave,\n  SAFE_CAST(cobertura_temporal AS STRING) AS cobertura_temporal,\n  SAFE_CAST(id_tabela AS STRING) AS id_tabela,\n  SAFE_CAST(coluna AS STRING) AS coluna,\n  SAFE_CAST(valor AS STRING) AS valor\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`dicionario`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`dicionario`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.647295Z", "completed_at": "2025-02-20T18:13:39.653898Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.655240Z", "completed_at": "2025-02-20T18:13:39.655249Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010737895965576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.feed_info_gtfs", "compiled": true, "compiled_code": "\n\nWITH feed_info AS (\n  SELECT\n    SAFE_CAST(timestamp_captura AS STRING) AS feed_version,\n    SAFE_CAST(data_versao AS DATE) AS feed_start_date,\n    NULL AS feed_end_date,\n    SAFE_CAST(feed_publisher_name AS STRING) feed_publisher_name,\n    SAFE_CAST(JSON_VALUE(content, '$.feed_publisher_url') AS STRING) feed_publisher_url,\n    SAFE_CAST(JSON_VALUE(content, '$.feed_lang') AS STRING) feed_lang,\n    SAFE_CAST(JSON_VALUE(content, '$.default_lang') AS STRING) default_lang,\n    SAFE_CAST(JSON_VALUE(content, '$.feed_contact_email') AS STRING) feed_contact_email,\n    SAFE_CAST(JSON_VALUE(content, '$.feed_contact_url') AS STRING) feed_contact_url,\n    CURRENT_DATETIME(\"America/Sao_Paulo\") AS feed_update_datetime,\n    '' AS versao_modelo\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`feed_info`\n  \n    WHERE\n      data_versao =  '2024-05-03'\n    UNION ALL\n      SELECT\n        *\n      FROM\n        `rj-smtr`.`gtfs`.`feed_info`\n      WHERE\n        feed_start_date != DATE('2024-05-03')\n  \n  )\n  SELECT\n    feed_version,\n    feed_start_date,\n    DATE_SUB(LEAD(DATE(feed_version)) OVER (ORDER BY feed_version), INTERVAL 1 DAY) AS feed_end_date,\n    feed_publisher_name,\n    feed_publisher_url,\n    feed_lang,\n    default_lang,\n    feed_contact_email,\n    feed_contact_url,\n    feed_update_datetime,\n    versao_modelo\n  FROM\n    feed_info", "relation_name": "`rj-smtr`.`gtfs`.`feed_info`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.659836Z", "completed_at": "2025-02-20T18:13:39.664224Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.665651Z", "completed_at": "2025-02-20T18:13:39.665661Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008387565612792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.frota_determinada", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(route_id AS STRING) route_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.frota_determinada as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`frota_determinada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.669793Z", "completed_at": "2025-02-20T18:13:39.674127Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.675533Z", "completed_at": "2025-02-20T18:13:39.675542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00836491584777832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.holidays", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nDATE(SAFE_CAST(Data AS DATETIME)) data,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.holidays as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`holidays`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.679849Z", "completed_at": "2025-02-20T18:13:39.685800Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.687145Z", "completed_at": "2025-02-20T18:13:39.687154Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010039806365966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.infracao_staging", "compiled": true, "compiled_code": "\n\n\nSELECT\n  data,\n  SAFE_CAST(JSON_VALUE(content,'$.id_infracao') AS STRING) id_infracao,\n  SAFE_CAST(JSON_VALUE(content,'$.modo') AS STRING) modo,\n  SAFE_CAST(JSON_VALUE(content,'$.servico') AS STRING) servico,\n  SAFE_CAST(JSON_VALUE(content,'$.permissao') AS STRING) permissao,\n  SAFE_CAST(JSON_VALUE(content,'$.placa') AS STRING) placa,\n  SAFE_CAST(id_auto_infracao AS STRING) id_auto_infracao,\n  PARSE_DATE(\"%d/%m/%Y\", SAFE_CAST(JSON_VALUE(content,'$.data_infracao') AS STRING)) data_infracao,\n  SAFE_CAST(JSON_VALUE(content,'$.infracao') AS STRING) infracao,\n  SAFE_CAST(JSON_VALUE(content,'$.valor') AS FLOAT64) valor,\n  SAFE_CAST(JSON_VALUE(content,'$.status') AS STRING) status,\n  IF(JSON_VALUE(content,'$.data_pagamento') = \"\", NULL, PARSE_DATE(\"%d/%m/%Y\", JSON_VALUE(content,'$.data_pagamento'))) data_pagamento,\n  SAFE_CAST(DATETIME(TIMESTAMP_TRUNC(TIMESTAMP(timestamp_captura), SECOND), \"America/Sao_Paulo\" ) AS DATETIME) timestamp_captura\nFROM\n  `rj-smtr-staging`.`veiculo_staging`.`infracao` as t", "relation_name": "`rj-smtr`.`veiculo_staging`.`infracao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.691315Z", "completed_at": "2025-02-20T18:13:39.696113Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.697603Z", "completed_at": "2025-02-20T18:13:39.697613Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009033203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.licenciamento_stu_staging", "compiled": true, "compiled_code": "\n\nSELECT\n  data,\n  SAFE_CAST(DATETIME(TIMESTAMP_TRUNC(TIMESTAMP(timestamp_captura), SECOND), \"America/Sao_Paulo\" ) AS DATETIME) timestamp_captura,\n  SAFE_CAST(JSON_VALUE(content,\"$.modo\") AS STRING) modo,\n  SAFE_CAST(id_veiculo AS STRING) id_veiculo,\n  SAFE_CAST(JSON_VALUE(content,\"$.ano_fabricacao\") AS INT64) ano_fabricacao,\n  SAFE_CAST(JSON_VALUE(content,\"$.carroceria\") AS STRING) carroceria,\n  CASE\n    WHEN\n      JSON_VALUE(content,\"$.data_ultima_vistoria\") = \"\" THEN NULL\n    ELSE\n      SAFE_CAST(PARSE_DATETIME(\"%d/%m/%Y\", JSON_VALUE(content,\"$.data_ultima_vistoria\")) AS DATE)\n  END AS data_ultima_vistoria,\n  SAFE_CAST(JSON_VALUE(content,\"$.id_carroceria\") AS INT64) id_carroceria,\n  SAFE_CAST(JSON_VALUE(content,\"$.id_chassi\") AS INT64) id_chassi,\n  SAFE_CAST(JSON_VALUE(content,\"$.id_fabricante_chassi\") AS INT64) id_fabricante_chassi,\n  SAFE_CAST(JSON_VALUE(content,\"$.id_interno_carroceria\") AS INT64) id_interno_carroceria,\n  SAFE_CAST(JSON_VALUE(content,\"$.id_planta\") AS INT64) id_planta,\n  SAFE_CAST(JSON_VALUE(content,\"$.indicador_ar_condicionado\") AS BOOL) indicador_ar_condicionado,\n  SAFE_CAST(JSON_VALUE(content,\"$.indicador_elevador\") AS BOOL) indicador_elevador,\n  SAFE_CAST(JSON_VALUE(content,\"$.indicador_usb\") AS BOOL) indicador_usb,\n  SAFE_CAST(JSON_VALUE(content,\"$.indicador_wifi\") AS BOOL) indicador_wifi,\n  SAFE_CAST(JSON_VALUE(content,\"$.nome_chassi\") AS STRING) nome_chassi,\n  SAFE_CAST(JSON_VALUE(content,\"$.permissao\") AS STRING) permissao,\n  SAFE_CAST(JSON_VALUE(content,\"$.placa\") AS STRING) placa,\n  SAFE_CAST(JSON_VALUE(content,\"$.quantidade_lotacao_pe\") AS INT64) quantidade_lotacao_pe,\n  SAFE_CAST(JSON_VALUE(content,\"$.quantidade_lotacao_sentado\") AS INT64) quantidade_lotacao_sentado,\n  SAFE_CAST(JSON_VALUE(content,\"$.tipo_combustivel\") AS STRING) tipo_combustivel,\n  SAFE_CAST(JSON_VALUE(content,\"$.tipo_veiculo\") AS STRING) tipo_veiculo,\n  SAFE_CAST(JSON_VALUE(content,\"$.status\") AS STRING) status,\n  CASE\n    WHEN\n      JSON_VALUE(content,\"$.data_inicio_vinculo\") = \"\" THEN NULL\n    ELSE\n      SAFE_CAST(PARSE_DATETIME(\"%d/%m/%Y\", JSON_VALUE(content,\"$.data_inicio_vinculo\")) AS DATE)\n  END AS data_inicio_vinculo,\n FROM\n    `rj-smtr-staging`.`veiculo_staging`.`licenciamento_stu` as t", "relation_name": "`rj-smtr`.`veiculo_staging`.`licenciamento_stu`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.701901Z", "completed_at": "2025-02-20T18:13:39.706202Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.707609Z", "completed_at": "2025-02-20T18:13:39.707618Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008329153060913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.linhas", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(linha_id AS STRING) linha_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.linhas as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`linhas`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.712070Z", "completed_at": "2025-02-20T18:13:39.717667Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.719099Z", "completed_at": "2025-02-20T18:13:39.719109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00989389419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.matriz_integracao", "compiled": true, "compiled_code": "\n\nwith\n    matriz_staging as (\n        select\n            date(data_versao_matriz) as data_versao_matriz,\n            id_tipo_integracao,\n            primeira_perna,\n            cast(\n                if(\n                    trim(porcentagem_primeira_perna) = '',\n                    null,\n                    porcentagem_primeira_perna\n                ) as numeric\n            )\n            / 100 as porcentagem_primeira_perna,\n            segunda_perna,\n            cast(\n                if(\n                    trim(porcentagem_segunda_perna) = '',\n                    null,\n                    porcentagem_segunda_perna\n                ) as numeric\n            )\n            / 100 as porcentagem_segunda_perna,\n            terceira_perna,\n            cast(\n                if(\n                    trim(porcentagem_terceira_perna) = '',\n                    null,\n                    porcentagem_terceira_perna\n                ) as numeric\n            )\n            / 100 as porcentagem_terceira_perna,\n            cast(tempo_integracao_minutos as float64) as tempo_integracao_minutos\n        from `rj-smtr-dev`.`source_smtr`.`matriz_integracao`\n    ),\n    data_versao as (\n        select distinct data_versao_matriz as data_inicio_matriz from matriz_staging\n    ),\n    data_fim as (\n        select\n            data_inicio_matriz,\n            date_sub(\n                lead(data_inicio_matriz) over (order by data_inicio_matriz),\n                interval 1 day\n            ) as data_fim_matriz\n        from data_versao\n    ),\n    matriz as (\n        select\n            mi.data_versao_matriz as data_inicio_matriz,\n            mi.id_tipo_integracao as id_matriz_integracao,\n            p.sequencia_integracao,\n            if(trim(p.modo) = '', null, p.modo) as modo,\n            p.percentual_rateio,\n            case\n                when mi.terceira_perna is not null and trim(mi.terceira_perna) != ''\n                then [mi.primeira_perna, mi.segunda_perna, mi.terceira_perna]\n                else [mi.primeira_perna, mi.segunda_perna]\n            end as sequencia_completa_modo,\n            case\n                when mi.porcentagem_terceira_perna is not null\n                then\n                    [\n                        mi.porcentagem_primeira_perna,\n                        mi.porcentagem_segunda_perna,\n                        mi.porcentagem_terceira_perna\n                    ]\n                else [mi.porcentagem_primeira_perna, mi.porcentagem_segunda_perna]\n            end as sequencia_completa_rateio,\n            mi.tempo_integracao_minutos\n        from\n            matriz_staging mi,\n            unnest(\n                [\n                    struct(\n                        primeira_perna as modo,\n                        porcentagem_primeira_perna as percentual_rateio,\n                        1 as sequencia_integracao\n                    ),\n                    struct(\n                        segunda_perna as modo,\n                        porcentagem_segunda_perna as percentual_rateio,\n                        2 as sequencia_integracao\n                    ),\n                    struct(\n                        terceira_perna as modo,\n                        porcentagem_terceira_perna as percentual_rateio,\n                        3 as sequencia_integracao\n                    )\n                ]\n            ) p\n    )\nselect\n    data_inicio_matriz,\n    d.data_fim_matriz,\n    m.* except (data_inicio_matriz),\n    '' as versao\nfrom matriz m\njoin data_fim d using (data_inicio_matriz)\nwhere modo is not null", "relation_name": "`rj-smtr`.`planejamento`.`matriz_integracao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.723761Z", "completed_at": "2025-02-20T18:13:39.728201Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.729541Z", "completed_at": "2025-02-20T18:13:39.729550Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008788824081420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.metadado_coluna", "compiled": true, "compiled_code": "SELECT\n  table_catalog AS project_id,\n  table_schema AS dataset_id,\n  table_name AS table_id,\n  column_name,\n  data_type,\n  description\nFROM\n  rj-smtr.`region-US`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS", "relation_name": "`rj-smtr`.`catalogo`.`metadado_coluna`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.734583Z", "completed_at": "2025-02-20T18:13:39.738965Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.740453Z", "completed_at": "2025-02-20T18:13:39.740464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008847951889038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "`rj-smtr`.`dbt`.`my_first_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.744798Z", "completed_at": "2025-02-20T18:13:39.751664Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.753085Z", "completed_at": "2025-02-20T18:13:39.753093Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01092076301574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.receita_autuacao", "compiled": true, "compiled_code": "\n\nWITH receita_unpivot AS (\n  SELECT\n    ano,\n    CASE\n      WHEN mes = 'janeiro' THEN '01'\n      WHEN mes = 'fevereiro' THEN '02'\n      WHEN mes = 'marco' THEN '03'\n      WHEN mes = 'abril' THEN '04'\n      WHEN mes = 'maio' THEN '05'\n      WHEN mes = 'junho' THEN '06'\n      WHEN mes = 'julho' THEN '07'\n      WHEN mes = 'agosto' THEN '08'\n      WHEN mes = 'setembro' THEN '09'\n      WHEN mes = 'outubro' THEN '10'\n      WHEN mes = 'novembro' THEN '11'\n      WHEN mes = 'dezembro' THEN '12'\n    END AS mes,\n    SAFE_CAST(REPLACE(REPLACE(valor_arrecadacao, '.', ''), ',', '.') AS NUMERIC) AS valor_arrecadacao\n  FROM\n    `rj-smtr-staging`.`infracao_staging`.`receita_autuacao`\n  UNPIVOT (\n    valor_arrecadacao FOR mes IN (janeiro, fevereiro, marco, abril, maio, junho, julho, agosto, setembro, outubro, novembro, dezembro)\n  )\n\n),\n\nreceita_com_data AS (\n  SELECT\n    PARSE_DATE('%Y-%m-%d', CONCAT(ano, '-', mes, '-01')) AS data,\n    ano,\n    mes,\n    valor_arrecadacao\n  FROM receita_unpivot\n  WHERE valor_arrecadacao IS NOT NULL\n)\n\nSELECT\n  data,\n  ano,\n  mes,\n  valor_arrecadacao\nFROM receita_com_data\n\n    WHERE\n      data BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n", "relation_name": "`rj-smtr`.`transito`.`receita_autuacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.757408Z", "completed_at": "2025-02-20T18:13:39.761783Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.763188Z", "completed_at": "2025-02-20T18:13:39.763197Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008606672286987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_servico_dia_avaliacao", "compiled": true, "compiled_code": "\n\nSELECT\n  PARSE_DATE(\"%d/%m/%Y\", DATA) AS data,\n  id_recurso,\n  tipo_recurso,\n  servico,\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_servico_dia_avaliacao`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_servico_dia_avaliacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.767677Z", "completed_at": "2025-02-20T18:13:39.773844Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.775273Z", "completed_at": "2025-02-20T18:13:39.775282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010323524475097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_servico_dia_pago", "compiled": true, "compiled_code": "\n\nWITH\n  -- 1. Trata os IDs de recurso de forma que, caso tenha mais que um, sempre estejam separados por v\u00edrgula, ordenados do menor para o maior e sem espa\u00e7os adicionais\n  treated_id_recurso AS (\n  SELECT\n    DISTINCT *\n  FROM (\n    SELECT\n      id_recurso_old,\n      ARRAY_TO_STRING(ARRAY(\n        SELECT\n          TRIM(id)\n        FROM\n          UNNEST(id_array) AS id\n        ORDER BY\n          id), \", \") AS id_recurso\n    FROM (\n      SELECT\n        id_recurso AS id_recurso_old,\n        SPLIT(REPLACE(id_recurso, \" e \", \", \"), \", \") AS id_array\n      FROM\n        `rj-smtr-staging`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_servico_dia_pago`\n  ))),\n  -- 2. Trata a tabela em staging\n  treated_recurso AS (\n  SELECT\n    * EXCEPT(DATA,\n      valor_pago,\n      tipo_dia),\n    PARSE_DATE(\"%d/%m/%Y\", DATA) AS DATA,\n    SAFE_CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(valor_pago, r\"\\.\", \"\"), r\",\", \".\"), r\"[^\\d\\.-]\", \"\") AS FLOAT64) AS valor_pago,\n    CASE\n      WHEN tipo_dia LIKE \"R$%\" OR tipo_dia = \"\" THEN NULL\n    ELSE\n    tipo_dia\n  END\n    AS tipo_dia\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_servico_dia_pago`\n  WHERE\n    DATA NOT LIKE \"%-%\" )\nSELECT\n  data,\n  tipo_dia,\n  i.id_recurso,\n  tipo_recurso,\n  quinzena_ocorrencia,\n  quinzena_pagamento,\n  consorcio,\n  servico,\n  valor_pago\nFROM\n  treated_recurso AS t\nLEFT JOIN\n  treated_id_recurso AS i\nON\n  t.id_recurso = i.id_recurso_old", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_servico_dia_pago`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.779590Z", "completed_at": "2025-02-20T18:13:39.784069Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.785479Z", "completed_at": "2025-02-20T18:13:39.785488Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008604764938354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.routes", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(route_id AS STRING) route_id,\nREPLACE(content, \"None\", '') content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.routes as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`routes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.789899Z", "completed_at": "2025-02-20T18:13:39.794141Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.795556Z", "completed_at": "2025-02-20T18:13:39.795565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008525609970092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.shapes", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(shape_id AS STRING) shape_id,\nREPLACE(content, \"None\", '') content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.shapes as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.800036Z", "completed_at": "2025-02-20T18:13:39.804776Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.806181Z", "completed_at": "2025-02-20T18:13:39.806190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008888959884643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_licenciamento_solicitacao_staging", "compiled": true, "compiled_code": "\n\nSELECT\n   SAFE_CAST(data AS DATE) data,\n   SAFE_CAST(DATETIME(TIMESTAMP_TRUNC(TIMESTAMP(timestamp_captura), SECOND), \"America/Sao_Paulo\" ) AS DATETIME) timestamp_captura,\n   SAFE_CAST(JSON_VALUE(content,\"$.modo\") AS STRING) modo,\n   SAFE_CAST(id_veiculo AS STRING) id_veiculo,\n   SAFE_CAST(JSON_VALUE(content,\"$.ano_fabricacao\") AS STRING) ano_fabricacao,\n   SAFE_CAST(JSON_VALUE(content,\"$.carroceria\") AS STRING) carroceria,\n   SAFE_CAST(JSON_VALUE(content,\"$.data_ultima_vistoria\") AS STRING) data_ultima_vistoria,\n   SAFE_CAST(JSON_VALUE(content,\"$.id_carroceria\") AS INT64) id_carroceria,\n   SAFE_CAST(JSON_VALUE(content,\"$.id_chassi\") AS INT64) id_chassi,\n   SAFE_CAST(JSON_VALUE(content,\"$.id_fabricante_chassi\") AS INT64) id_fabricante_chassi,\n   SAFE_CAST(JSON_VALUE(content,\"$.id_interno_carroceria\") AS INT64) id_interno_carroceria,\n   SAFE_CAST(JSON_VALUE(content,\"$.id_planta\") AS INT64) id_planta,\n   SAFE_CAST(JSON_VALUE(content,\"$.indicador_ar_condicionado\") AS BOOL) indicador_ar_condicionado,\n   SAFE_CAST(JSON_VALUE(content,\"$.indicador_elevador\") AS BOOL) indicador_elevador,\n   SAFE_CAST(JSON_VALUE(content,\"$.indicador_usb\") AS BOOL) indicador_usb,\n   SAFE_CAST(JSON_VALUE(content,\"$.indicador_wifi\") AS BOOL) indicador_wifi,\n   SAFE_CAST(JSON_VALUE(content,\"$.nome_chassi\") AS STRING) nome_chassi,\n   SAFE_CAST(JSON_VALUE(content,\"$.permissao\") AS STRING) permissao,\n   SAFE_CAST(JSON_VALUE(content,\"$.placa\") AS STRING) placa,\n   SAFE_CAST(JSON_VALUE(content,\"$.quantidade_lotacao_pe\") AS INT64) quantidade_lotacao_pe,\n   SAFE_CAST(JSON_VALUE(content,\"$.quantidade_lotacao_sentado\") AS INT64) quantidade_lotacao_sentado,\n   SAFE_CAST(JSON_VALUE(content,\"$.tipo_combustivel\") AS STRING) tipo_combustivel,\n   SAFE_CAST(JSON_VALUE(content,\"$.tipo_veiculo\") AS STRING) tipo_veiculo,\n   SAFE_CAST(JSON_VALUE(content,\"$.status\") AS STRING) status,\n   SAFE_CAST(JSON_VALUE(content,\"$.solicitacao\") AS STRING) solicitacao\n FROM\n     `rj-smtr-staging`.`veiculo_staging`.`sppo_licenciamento_solicitacao` as t", "relation_name": "`rj-smtr`.`veiculo_staging`.`sppo_licenciamento_solicitacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.810410Z", "completed_at": "2025-02-20T18:13:39.816206Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.817685Z", "completed_at": "2025-02-20T18:13:39.817695Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010083913803100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_realocacao", "compiled": true, "compiled_code": "SELECT\n  SAFE_CAST(id_veiculo AS STRING) id_veiculo,\n  SAFE_CAST(DATETIME(TIMESTAMP(datetime_operacao), \"America/Sao_Paulo\") AS DATETIME) datetime_operacao,\n  concat(\n    ifnull(REGEXP_EXTRACT(servico, r'[A-Z]+'), \"\"),\n    ifnull(REGEXP_EXTRACT(servico, r'[0-9]+'), \"\")\n  ) as servico,\n  SAFE_CAST(DATETIME(TIMESTAMP(datetime_entrada), \"America/Sao_Paulo\") AS DATETIME) as datetime_entrada,\n  SAFE_CAST(DATETIME(TIMESTAMP(datetime_saida), \"America/Sao_Paulo\") AS DATETIME) as datetime_saida,\n  SAFE_CAST(DATETIME(TIMESTAMP(timestamp_processamento), \"America/Sao_Paulo\") AS DATETIME) as timestamp_processamento,\n  SAFE_CAST(DATETIME(TIMESTAMP(timestamp_captura), \"America/Sao_Paulo\") AS DATETIME) as timestamp_captura,\n  data,\n  hora\nFROM\n  rj-smtr-staging.br_rj_riodejaneiro_onibus_gps_staging.realocacao as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_realocacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.822044Z", "completed_at": "2025-02-20T18:13:39.826868Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.828291Z", "completed_at": "2025-02-20T18:13:39.828299Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00893855094909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_realocacao_zirix", "compiled": true, "compiled_code": "\n\nSELECT\n  SAFE_CAST(id_veiculo AS STRING) id_veiculo,\n  SAFE_CAST(DATETIME(TIMESTAMP(datetime_operacao), \"America/Sao_Paulo\") AS DATETIME) datetime_operacao,\n  concat(\n    ifnull(REGEXP_EXTRACT(servico, r'[A-Z]+'), \"\"),\n    ifnull(REGEXP_EXTRACT(servico, r'[0-9]+'), \"\")\n  ) as servico,\n  SAFE_CAST(DATETIME(TIMESTAMP(datetime_entrada), \"America/Sao_Paulo\") AS DATETIME) as datetime_entrada,\n  SAFE_CAST(DATETIME(TIMESTAMP(datetime_saida), \"America/Sao_Paulo\") AS DATETIME) as datetime_saida,\n  SAFE_CAST(DATETIME(TIMESTAMP(timestamp_processamento), \"America/Sao_Paulo\") AS DATETIME) as timestamp_processamento,\n  SAFE_CAST(DATETIME(TIMESTAMP(timestamp_captura), \"America/Sao_Paulo\") AS DATETIME) as timestamp_captura,\n  SAFE_CAST(data AS DATE) as data,\n  SAFE_CAST(hora AS INT64) as hora\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_onibus_gps_zirix_staging`.`realocacao`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_realocacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.833119Z", "completed_at": "2025-02-20T18:13:39.837714Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.839107Z", "completed_at": "2025-02-20T18:13:39.839116Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009062767028808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_registro_agente_verao_staging", "compiled": true, "compiled_code": "\n\nSELECT\n  SAFE_CAST(PARSE_DATETIME(\"%d/%m/%Y %H:%M:%S\", datetime_registro) AS DATE) AS data,\n  SAFE_CAST(PARSE_DATETIME(\"%d/%m/%Y %H:%M:%S\", datetime_registro) AS DATETIME) AS datetime_registro,\n  SHA256(PARSE_DATETIME(\"%d/%m/%Y %H:%M:%S\", datetime_registro) || \"_\" || SAFE_CAST(email AS STRING)) AS id_registro,\n  SAFE_CAST(JSON_VALUE(content,'$.id_veiculo') AS STRING) AS id_veiculo,\n  SAFE_CAST(JSON_VALUE(content,'$.servico') AS STRING) AS servico,\n  SAFE_CAST(JSON_VALUE(content,'$.link_foto') AS STRING) AS link_foto,\n  SAFE_CAST(JSON_VALUE(content,'$.validacao') AS BOOL) AS validacao,\n  SAFE_CAST(DATETIME(TIMESTAMP_TRUNC(TIMESTAMP(timestamp_captura), SECOND), \"America/Sao_Paulo\" ) AS DATETIME) AS datetime_captura,\n  \"\" AS versao\nFROM\n  `rj-smtr-staging`.`veiculo_staging`.`sppo_registro_agente_verao`", "relation_name": "`rj-smtr`.`veiculo_staging`.`sppo_registro_agente_verao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.843669Z", "completed_at": "2025-02-20T18:13:39.848980Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.850339Z", "completed_at": "2025-02-20T18:13:39.850352Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009550333023071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_registros", "compiled": true, "compiled_code": "SELECT\n    SAFE_CAST(ordem AS STRING) ordem,\n    SAFE_CAST(REPLACE(latitude, ',', '.') AS FLOAT64) latitude,\n    SAFE_CAST(REPLACE(longitude, ',', '.') AS FLOAT64) longitude,\n    SAFE_CAST(DATETIME(TIMESTAMP(datahora), \"America/Sao_Paulo\") AS DATETIME) timestamp_gps,\n    SAFE_CAST(velocidade AS INT64) velocidade,\n    concat(\n        ifnull(REGEXP_EXTRACT(linha, r'[A-Z]+'), \"\"),\n        ifnull(REGEXP_EXTRACT(linha, r'[0-9]+'), \"\")\n    ) as linha,\n    SAFE_CAST(DATETIME(TIMESTAMP(timestamp_captura), \"America/Sao_Paulo\") AS DATETIME) timestamp_captura,\n    SAFE_CAST(data AS DATE) data,\n    SAFE_CAST(hora AS INT64) hora\nfrom\n    rj-smtr-staging.br_rj_riodejaneiro_onibus_gps_staging.registros as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_registros`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.854562Z", "completed_at": "2025-02-20T18:13:39.955114Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.956456Z", "completed_at": "2025-02-20T18:13:39.956464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1044464111328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_registros_zirix", "compiled": true, "compiled_code": "\n\nSELECT\n    SAFE_CAST(ordem AS STRING) ordem,\n    SAFE_CAST(REPLACE(latitude, ',', '.') AS FLOAT64) latitude,\n    SAFE_CAST(REPLACE(longitude, ',', '.') AS FLOAT64) longitude,\n    SAFE_CAST(DATETIME(TIMESTAMP(datahora), \"America/Sao_Paulo\") AS DATETIME) timestamp_gps,\n    SAFE_CAST(velocidade AS INT64) velocidade,\n    concat(\n        ifnull(REGEXP_EXTRACT(linha, r'[A-Z]+'), \"\"),\n        ifnull(REGEXP_EXTRACT(linha, r'[0-9]+'), \"\")\n    ) as linha,\n    SAFE_CAST(DATETIME(TIMESTAMP(timestamp_captura), \"America/Sao_Paulo\") AS DATETIME) timestamp_captura,\n    SAFE_CAST(data AS DATE) data,\n    SAFE_CAST(hora AS INT64) hora\nfrom\n    `rj-smtr-staging`.`br_rj_riodejaneiro_onibus_gps_zirix_staging`.`registros`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_registros`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.960296Z", "completed_at": "2025-02-20T18:13:39.964455Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.965776Z", "completed_at": "2025-02-20T18:13:39.965783Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008365392684936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_vistoria_tr_subtt_cglf_2023_staging", "compiled": true, "compiled_code": "\n\nSELECT\n  SAFE_CAST(data AS DATE) AS data,\n  SAFE_CAST(id_veiculo AS STRING) AS id_veiculo,\n  SAFE_CAST(placa AS STRING) AS placa,\n  SAFE_CAST(permissao AS STRING) AS permissao,\n  SAFE_CAST(chassi AS STRING) AS chassi,\n  SAFE_CAST(ano_fabricacao AS INT64) AS ano_fabricacao,\n  SAFE_CAST(selo AS STRING) AS selo,\n  SAFE_CAST(darm AS STRING) AS darm,\n  SAFE_CAST(ano_ultima_vistoria AS INT64) AS ano_ultima_vistoria,\nFROM\n  `rj-smtr-staging`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_2023`", "relation_name": "`rj-smtr`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_2023`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.971549Z", "completed_at": "2025-02-20T18:13:39.975822Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.977208Z", "completed_at": "2025-02-20T18:13:39.977215Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008274078369140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_vistoria_tr_subtt_cglf_2024_staging", "compiled": true, "compiled_code": "\n\nSELECT\n  SAFE_CAST(data AS DATE) AS data,\n  SAFE_CAST(id_veiculo AS STRING) AS id_veiculo,\n  SAFE_CAST(placa AS STRING) AS placa,\n  SAFE_CAST(permissao AS STRING) AS permissao,\n  SAFE_CAST(chassi AS STRING) AS chassi,\n  SAFE_CAST(ano_fabricacao AS INT64) AS ano_fabricacao,\n  SAFE_CAST(selo AS STRING) AS selo,\n  SAFE_CAST(darm AS STRING) AS darm,\n  SAFE_CAST(ano_ultima_vistoria AS INT64) AS ano_ultima_vistoria,\nFROM\n  `rj-smtr-staging`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_2024`", "relation_name": "`rj-smtr`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.981361Z", "completed_at": "2025-02-20T18:13:39.988457Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:39.990652Z", "completed_at": "2025-02-20T18:13:39.990664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012187957763671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_vistoria_tr_subtt_cglf_pendentes_2024_staging", "compiled": true, "compiled_code": "\n\nSELECT\n  SAFE_CAST(data AS DATE) AS data,\n  SAFE_CAST(id_veiculo AS STRING) AS id_veiculo,\n  SAFE_CAST(placa AS STRING) AS placa,\n  SAFE_CAST(empresa AS STRING) AS empresa,\n  SAFE_CAST(ano_ultima_vistoria AS INT64) AS ano_ultima_vistoria,\nFROM\n  `rj-smtr-staging`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_pendentes_2024`", "relation_name": "`rj-smtr`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_pendentes_2024`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:39.998801Z", "completed_at": "2025-02-20T18:13:40.007686Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.009115Z", "completed_at": "2025-02-20T18:13:40.009125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014739513397216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_arquivo_retorno", "compiled": true, "compiled_code": "\n\nSELECT\n  data,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n  id,\n  DATE(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', SAFE_CAST(JSON_VALUE(content, '$.dataCaptura') AS STRING))) AS dataCaptura,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', SAFE_CAST(JSON_VALUE(content, '$.dataHoraGeracaoRetorno') AS STRING)), \"America/Sao_Paulo\") AS dataHoraGeracaoRetorno,\n  DATE(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', SAFE_CAST(JSON_VALUE(content, '$.dataOrdem') AS STRING))) AS dataOrdem,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', SAFE_CAST(JSON_VALUE(content, '$.dataProcessamento') AS STRING)), \"America/Sao_Paulo\") AS dataProcessamento,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3S%Ez', SAFE_CAST(JSON_VALUE(content, '$.dataVencimento') AS STRING))) AS dataVencimento,\n  SAFE_CAST(JSON_VALUE(content, '$.favorecido') AS STRING) AS favorecido,\n  SAFE_CAST(JSON_VALUE(content, '$.idConsorcio') AS STRING) AS idConsorcio,\n  SAFE_CAST(JSON_VALUE(content, '$.idOperadora') AS STRING) AS idOperadora,\n  SAFE_CAST(JSON_VALUE(content, '$.idOrdemPagamento') AS STRING) AS idOrdemPagamento,\n  SAFE_CAST(JSON_VALUE(content, '$.isPago') AS BOOL) AS isPago,\n  SAFE_CAST(JSON_VALUE(content, '$.nomeConsorcio') AS STRING) AS nomeConsorcio,\n  SAFE_CAST(JSON_VALUE(content, '$.nomeOperadora') AS STRING) AS nomeOperadora,\n  JSON_VALUE(content, '$.ocorrencias') AS ocorrencias,\n  SAFE_CAST(JSON_VALUE(content, '$.valor') AS NUMERIC) AS valor,\n  SAFE_CAST(JSON_VALUE(content, '$.valorRealEfetivado') AS NUMERIC) AS valorRealEfetivado\nFROM\n  `rj-smtr-staging`.`controle_financeiro_staging`.`arquivo_retorno`", "relation_name": "`rj-smtr`.`controle_financeiro_staging`.`arquivo_retorno`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.013377Z", "completed_at": "2025-02-20T18:13:40.018237Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.019668Z", "completed_at": "2025-02-20T18:13:40.019676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008962869644165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_cliente", "compiled": true, "compiled_code": "\n\nWITH\n    cliente AS (\n        SELECT\n            data,\n            SAFE_CAST(CD_CLIENTE AS STRING) AS cd_cliente,\n            timestamp_captura,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_DOCUMENTO') AS STRING) AS cd_tipo_documento,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_CLIENTE') AS STRING) AS nm_cliente,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_CLIENTE_SOCIAL') AS STRING) AS nm_cliente_social,\n            SAFE_CAST(JSON_VALUE(content, '$.IN_TIPO_PESSOA_FISICA_JURIDICA') AS STRING) AS in_tipo_pessoa_fisica_juridica,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_DOCUMENTO') AS STRING) AS nr_documento,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_DOCUMENTO_ALTERNATIVO') AS STRING) AS nr_documento_alternativo,\n            SAFE_CAST(JSON_VALUE(content, '$.TX_EMAIL') AS STRING) AS tx_email,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_TELEFONE') AS STRING) AS nr_telefone,\n            SAFE_CAST(JSON_VALUE(content, '$.DT_CADASTRO') AS STRING) AS dt_cadastro\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`cliente`\n    ),\n    cliente_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY cd_cliente ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            cliente\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  cliente_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`cliente`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.023954Z", "completed_at": "2025-02-20T18:13:40.028407Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.030165Z", "completed_at": "2025-02-20T18:13:40.030175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008889198303222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_consorcio", "compiled": true, "compiled_code": "\n\nWITH\n    consorcio AS (\n        SELECT\n            data,\n            SAFE_CAST(CD_CONSORCIO AS STRING) AS cd_consorcio,\n            timestamp_captura,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_CONSORCIO') AS STRING) AS nm_consorcio\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`consorcio`\n    ),\n    consorcio_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY cd_consorcio ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            consorcio\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  consorcio_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`consorcio`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.034416Z", "completed_at": "2025-02-20T18:13:40.039719Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.041139Z", "completed_at": "2025-02-20T18:13:40.041147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009374141693115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_conta_bancaria", "compiled": true, "compiled_code": "\n\nWITH\n    conta_bancaria AS (\n        SELECT\n            data,\n            SAFE_CAST(CD_CLIENTE AS STRING) AS cd_cliente,\n            timestamp_captura,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_AGENCIA') AS STRING) AS cd_agencia,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_CONTA') AS STRING) AS cd_tipo_conta,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_BANCO') AS STRING) AS nm_banco,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_BANCO') AS STRING) AS nr_banco,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_CONTA') AS STRING) AS nr_conta,\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`conta_bancaria`\n    ),\n    conta_bancaria_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY cd_cliente ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            conta_bancaria\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  conta_bancaria_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`conta_bancaria`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.045448Z", "completed_at": "2025-02-20T18:13:40.049914Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.051360Z", "completed_at": "2025-02-20T18:13:40.051367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008619070053100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_contato_pessoa_juridica", "compiled": true, "compiled_code": "\n\nWITH\n    contato_pessoa_juridica AS (\n        SELECT\n            data,\n            SAFE_CAST(NR_SEQ_CONTATO AS STRING) AS nr_seq_contato,\n            SAFE_CAST(CD_CLIENTE AS STRING) AS cd_cliente,\n            timestamp_captura,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_CONTATO') AS STRING) AS nm_contato,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_RAMAL') AS STRING) AS nr_ramal,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_TELEFONE') AS STRING) AS nr_telefone,\n            SAFE_CAST(JSON_VALUE(content, '$.TX_EMAIL') AS STRING) AS tx_email,\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`contato_pessoa_juridica`\n    ),\n    contato_pessoa_juridica_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY nr_seq_contato, cd_cliente ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            contato_pessoa_juridica\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  contato_pessoa_juridica_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`contato_pessoa_juridica`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.055698Z", "completed_at": "2025-02-20T18:13:40.060625Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.062145Z", "completed_at": "2025-02-20T18:13:40.062156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009303808212280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_endereco", "compiled": true, "compiled_code": "\n\nWITH\n    endereco AS (\n        SELECT\n            data,\n            SAFE_CAST(NR_SEQ_ENDERECO AS STRING) AS nr_seq_endereco,\n            timestamp_captura,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_CLIENTE') AS STRING) AS cd_cliente,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_ENDERECO') AS STRING) AS cd_tipo_endereco,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_LOGRADOURO') AS STRING) AS cd_tipo_logradouro,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS dt_inclusao,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_BAIRRO') AS STRING) AS nm_bairro,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_CIDADE') AS STRING) AS nm_cidade,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_CEP') AS STRING) AS nr_cep,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_LOGRADOURO') AS STRING) AS nr_logradouro,\n            SAFE_CAST(JSON_VALUE(content, '$.SG_UF') AS STRING) AS sg_uf,\n            SAFE_CAST(JSON_VALUE(content, '$.TX_COMPLEMENTO_LOGRADOURO') AS STRING) AS tx_complemento_logradouro,\n            SAFE_CAST(JSON_VALUE(content, '$.TX_LOGRADOURO') AS STRING) AS tx_logradouro\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`endereco`\n    ),\n    endereco_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY nr_seq_endereco ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            endereco\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  endereco_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`endereco`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.066731Z", "completed_at": "2025-02-20T18:13:40.071409Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.072891Z", "completed_at": "2025-02-20T18:13:40.072900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00898885726928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_gps_validador", "compiled": true, "compiled_code": "\n\n\nSELECT\n    data,\n    hora,\n    REPLACE(SAFE_CAST(id AS STRING), \".0\", \"\") AS id,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    SAFE_CAST(JSON_VALUE(content, '$.bytes_recebidos_app') AS FLOAT64) AS bytes_recebidos_app,\n    SAFE_CAST(JSON_VALUE(content, '$.bytes_recebidos_geral') AS FLOAT64) AS bytes_recebidos_geral,\n    SAFE_CAST(JSON_VALUE(content, '$.bytes_transmitidos_app') AS FLOAT64) AS bytes_transmitidos_app,\n    SAFE_CAST(JSON_VALUE(content, '$.bytes_transmitidos_geral') AS FLOAT64) AS bytes_transmitidos_geral,\n    SAFE_CAST(JSON_VALUE(content, '$.codigo_linha_veiculo') AS STRING) AS codigo_linha_veiculo,\n    REPLACE(SAFE_CAST(JSON_VALUE(content, '$.codigo_operadora') AS STRING), \".0\", \"\") AS codigo_operadora,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_tracking') AS STRING)), 'America/Sao_Paulo') AS data_tracking,\n    SAFE_CAST(JSON_VALUE(content, '$.estado_equipamento') AS STRING) AS estado_equipamento,\n    SAFE_CAST(JSON_VALUE(content, '$.fabricante_equipamento') AS STRING) AS fabricante_equipamento,\n    SAFE_CAST(JSON_VALUE(content, '$.latitude_equipamento') AS FLOAT64) AS latitude_equipamento,\n    SAFE_CAST(JSON_VALUE(content, '$.longitude_equipamento') AS FLOAT64) AS longitude_equipamento,\n    SAFE_CAST(JSON_VALUE(content, '$.modelo_equipamento') AS STRING) AS modelo_equipamento,\n    SAFE_CAST(JSON_VALUE(content, '$.numero_cartao_operador') AS STRING) AS numero_cartao_operador,\n    SAFE_CAST(JSON_VALUE(content, '$.numero_chip_sam') AS STRING) AS numero_chip_sam,\n    SAFE_CAST(JSON_VALUE(content, '$.numero_chip_telefonia') AS STRING) AS numero_chip_telefonia,\n    SAFE_CAST(JSON_VALUE(content, '$.numero_serie_equipamento') AS STRING) AS numero_serie_equipamento,\n    SAFE_CAST(JSON_VALUE(content, '$.prefixo_veiculo') AS STRING) AS prefixo_veiculo,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_transacoes_enviadas') AS FLOAT64) AS qtd_transacoes_enviadas,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_transacoes_pendentes') AS FLOAT64) AS qtd_transacoes_pendentes,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_venda_botao') AS FLOAT64) AS qtd_venda_botao,\n    SAFE_CAST(JSON_VALUE(content, '$.sentido_linha') AS STRING) AS sentido_linha,\n    SAFE_CAST(JSON_VALUE(content, '$.tarifa_linha') AS FLOAT64) AS tarifa_linha,\n    SAFE_CAST(JSON_VALUE(content, '$.versao_app') AS STRING) AS versao_app,\n    SAFE_CAST(JSON_VALUE(content, '$.temperatura') AS FLOAT64) AS temperatura\nFROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`gps_validador`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gps_validador`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.077238Z", "completed_at": "2025-02-20T18:13:40.082961Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.084368Z", "completed_at": "2025-02-20T18:13:40.084376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009741544723510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_gratuidade", "compiled": true, "compiled_code": "\n\nSELECT\n    data,\n    SAFE_CAST(id AS STRING) AS id,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_cliente') AS STRING) AS cd_cliente,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_inclusao') AS STRING)), 'America/Sao_Paulo') AS data_inclusao,\n    SAFE_CAST(JSON_VALUE(content, '$.id_status_gratuidade') AS STRING) AS id_status_gratuidade,\n    SAFE_CAST(JSON_VALUE(content, '$.id_tipo_gratuidade') AS STRING) AS id_tipo_gratuidade,\n    SAFE_CAST(JSON_VALUE(content, '$.tipo_gratuidade') AS STRING) AS tipo_gratuidade\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`gratuidade`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gratuidade`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.088582Z", "completed_at": "2025-02-20T18:13:40.097877Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.099329Z", "completed_at": "2025-02-20T18:13:40.099337Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013415813446044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_integracao_transacao", "compiled": true, "compiled_code": "\n\nSELECT\n  data,\n  SAFE_CAST(id AS STRING) AS id,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_inclusao') AS STRING)), 'America/Sao_Paulo') AS data_inclusao,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_processamento') AS STRING)), 'America/Sao_Paulo') AS data_processamento,\n  -- Seleciona colunas com os dados de cada transa\u00e7\u00e3o da integra\u00e7\u00e3o com os tipos adequados com base no dicionario de parametros\n  \n    \n      \n        DATETIME(\n          PARSE_TIMESTAMP(\n            '%Y-%m-%dT%H:%M:%E*S%Ez',\n            SAFE_CAST(JSON_VALUE(content, '$.data_transacao_t0') AS STRING)\n          ),\n          'America/Sao_Paulo') AS data_transacao_t0,\n      \n    \n      \n        DATETIME(\n          PARSE_TIMESTAMP(\n            '%Y-%m-%dT%H:%M:%E*S%Ez',\n            SAFE_CAST(JSON_VALUE(content, '$.data_transacao_ti1') AS STRING)\n          ),\n          'America/Sao_Paulo') AS data_transacao_t1,\n      \n    \n      \n        DATETIME(\n          PARSE_TIMESTAMP(\n            '%Y-%m-%dT%H:%M:%E*S%Ez',\n            SAFE_CAST(JSON_VALUE(content, '$.data_transacao_ti2') AS STRING)\n          ),\n          'America/Sao_Paulo') AS data_transacao_t2,\n      \n    \n      \n        DATETIME(\n          PARSE_TIMESTAMP(\n            '%Y-%m-%dT%H:%M:%E*S%Ez',\n            SAFE_CAST(JSON_VALUE(content, '$.data_transacao_ti3') AS STRING)\n          ),\n          'America/Sao_Paulo') AS data_transacao_t3,\n      \n    \n      \n        DATETIME(\n          PARSE_TIMESTAMP(\n            '%Y-%m-%dT%H:%M:%E*S%Ez',\n            SAFE_CAST(JSON_VALUE(content, '$.data_transacao_ti4') AS STRING)\n          ),\n          'America/Sao_Paulo') AS data_transacao_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_aplicacao_t0') AS STRING), '.0', '') AS id_aplicacao_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_aplicacao_ti1') AS STRING), '.0', '') AS id_aplicacao_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_aplicacao_ti2') AS STRING), '.0', '') AS id_aplicacao_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_aplicacao_ti3') AS STRING), '.0', '') AS id_aplicacao_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_aplicacao_ti4') AS STRING), '.0', '') AS id_aplicacao_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_consorcio_t0') AS STRING), '.0', '') AS id_consorcio_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_consorcio_ti1') AS STRING), '.0', '') AS id_consorcio_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_consorcio_ti2') AS STRING), '.0', '') AS id_consorcio_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_consorcio_ti3') AS STRING), '.0', '') AS id_consorcio_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_consorcio_ti4') AS STRING), '.0', '') AS id_consorcio_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_emissor_t0') AS STRING), '.0', '') AS id_emissor_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_emissor_ti1') AS STRING), '.0', '') AS id_emissor_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_emissor_ti2') AS STRING), '.0', '') AS id_emissor_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_emissor_ti3') AS STRING), '.0', '') AS id_emissor_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_emissor_ti4') AS STRING), '.0', '') AS id_emissor_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_linha_t0') AS STRING), '.0', '') AS id_linha_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_linha_ti1') AS STRING), '.0', '') AS id_linha_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_linha_ti2') AS STRING), '.0', '') AS id_linha_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_linha_ti3') AS STRING), '.0', '') AS id_linha_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_linha_ti4') AS STRING), '.0', '') AS id_linha_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_matriz_integracao_t0') AS STRING), '.0', '') AS id_matriz_integracao_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_matriz_integracao_ti1') AS STRING), '.0', '') AS id_matriz_integracao_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_matriz_integracao_ti2') AS STRING), '.0', '') AS id_matriz_integracao_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_matriz_integracao_ti3') AS STRING), '.0', '') AS id_matriz_integracao_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_matriz_integracao_ti4') AS STRING), '.0', '') AS id_matriz_integracao_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_operadora_t0') AS STRING), '.0', '') AS id_operadora_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_operadora_ti1') AS STRING), '.0', '') AS id_operadora_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_operadora_ti2') AS STRING), '.0', '') AS id_operadora_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_operadora_ti3') AS STRING), '.0', '') AS id_operadora_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_operadora_ti4') AS STRING), '.0', '') AS id_operadora_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_ordem_rateio_t0') AS STRING), '.0', '') AS id_ordem_rateio_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_ordem_rateio_ti1') AS STRING), '.0', '') AS id_ordem_rateio_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_ordem_rateio_ti2') AS STRING), '.0', '') AS id_ordem_rateio_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_ordem_rateio_ti3') AS STRING), '.0', '') AS id_ordem_rateio_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_ordem_rateio_ti4') AS STRING), '.0', '') AS id_ordem_rateio_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_secao_t0') AS STRING) AS id_secao_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_secao_ti1') AS STRING) AS id_secao_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_secao_ti2') AS STRING) AS id_secao_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_secao_ti3') AS STRING) AS id_secao_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_secao_ti4') AS STRING) AS id_secao_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_servico_t0') AS STRING), '.0', '') AS id_servico_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_servico_ti1') AS STRING), '.0', '') AS id_servico_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_servico_ti2') AS STRING), '.0', '') AS id_servico_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_servico_ti3') AS STRING), '.0', '') AS id_servico_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_servico_ti4') AS STRING), '.0', '') AS id_servico_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_t0') AS STRING), '.0', '') AS id_tipo_modal_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_ti1') AS STRING), '.0', '') AS id_tipo_modal_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_ti2') AS STRING), '.0', '') AS id_tipo_modal_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_ti3') AS STRING), '.0', '') AS id_tipo_modal_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_ti4') AS STRING), '.0', '') AS id_tipo_modal_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_transacao_t0') AS STRING) AS id_transacao_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_transacao_ti1') AS STRING) AS id_transacao_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_transacao_ti2') AS STRING) AS id_transacao_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_transacao_ti3') AS STRING) AS id_transacao_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.id_transacao_ti4') AS STRING) AS id_transacao_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.latitude_trx_t0') AS FLOAT64) AS latitude_trx_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.latitude_trx_ti1') AS FLOAT64) AS latitude_trx_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.latitude_trx_ti2') AS FLOAT64) AS latitude_trx_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.latitude_trx_ti3') AS FLOAT64) AS latitude_trx_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.latitude_trx_ti4') AS FLOAT64) AS latitude_trx_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.longitude_trx_t0') AS FLOAT64) AS longitude_trx_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.longitude_trx_ti1') AS FLOAT64) AS longitude_trx_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.longitude_trx_ti2') AS FLOAT64) AS longitude_trx_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.longitude_trx_ti3') AS FLOAT64) AS longitude_trx_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.longitude_trx_ti4') AS FLOAT64) AS longitude_trx_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador_t0') AS STRING) AS nr_logico_midia_operador_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador_ti1') AS STRING) AS nr_logico_midia_operador_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador_ti2') AS STRING) AS nr_logico_midia_operador_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador_ti3') AS STRING) AS nr_logico_midia_operador_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador_ti4') AS STRING) AS nr_logico_midia_operador_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_t0') AS FLOAT64) AS perc_rateio_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_ti1') AS FLOAT64) AS perc_rateio_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_ti2') AS FLOAT64) AS perc_rateio_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_ti3') AS FLOAT64) AS perc_rateio_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_ti4') AS FLOAT64) AS perc_rateio_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.posicao_validador_t0') AS STRING) AS posicao_validador_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.posicao_validador_ti1') AS STRING) AS posicao_validador_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.posicao_validador_ti2') AS STRING) AS posicao_validador_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.posicao_validador_ti3') AS STRING) AS posicao_validador_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.posicao_validador_ti4') AS STRING) AS posicao_validador_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.sentido_t0') AS STRING), '.0', '') AS sentido_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.sentido_ti1') AS STRING), '.0', '') AS sentido_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.sentido_ti2') AS STRING), '.0', '') AS sentido_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.sentido_ti3') AS STRING), '.0', '') AS sentido_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.sentido_ti4') AS STRING), '.0', '') AS sentido_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_compensacao_t0') AS FLOAT64) AS valor_rateio_compensacao_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_compensacao_ti1') AS FLOAT64) AS valor_rateio_compensacao_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_compensacao_ti2') AS FLOAT64) AS valor_rateio_compensacao_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_compensacao_ti3') AS FLOAT64) AS valor_rateio_compensacao_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_compensacao_ti4') AS FLOAT64) AS valor_rateio_compensacao_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_t0') AS FLOAT64) AS valor_rateio_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_ti1') AS FLOAT64) AS valor_rateio_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_ti2') AS FLOAT64) AS valor_rateio_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_ti3') AS FLOAT64) AS valor_rateio_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_ti4') AS FLOAT64) AS valor_rateio_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa_t0') AS FLOAT64) AS valor_tarifa_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa_ti1') AS FLOAT64) AS valor_tarifa_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa_ti2') AS FLOAT64) AS valor_tarifa_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa_ti3') AS FLOAT64) AS valor_tarifa_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa_ti4') AS FLOAT64) AS valor_tarifa_t4,\n      \n    \n  \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_transacao_t0') AS FLOAT64) AS valor_transacao_t0,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_transacao_ti1') AS FLOAT64) AS valor_transacao_t1,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_transacao_ti2') AS FLOAT64) AS valor_transacao_t2,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_transacao_ti3') AS FLOAT64) AS valor_transacao_t3,\n      \n    \n      \n        SAFE_CAST(JSON_VALUE(content, '$.valor_transacao_ti4') AS FLOAT64) AS valor_transacao_t4,\n      \n    \n  \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.veiculo_id_t0') AS STRING), '.0', '') AS veiculo_id_t0,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.veiculo_id_ti1') AS STRING), '.0', '') AS veiculo_id_t1,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.veiculo_id_ti2') AS STRING), '.0', '') AS veiculo_id_t2,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.veiculo_id_ti3') AS STRING), '.0', '') AS veiculo_id_t3,\n      \n    \n      \n        REPLACE(SAFE_CAST(JSON_VALUE(content, '$.veiculo_id_ti4') AS STRING), '.0', '') AS veiculo_id_t4,\n      \n    \n  \n  SAFE_CAST(JSON_VALUE(content, '$.id_status_integracao') AS STRING) AS id_status_integracao,\n  SAFE_CAST(JSON_VALUE(content, '$.valor_transacao_total') AS FLOAT64) AS valor_transacao_total,\n  SAFE_CAST(JSON_VALUE(content, '$.tx_adicional') AS STRING) AS tx_adicional\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`integracao_transacao`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`integracao_transacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.103652Z", "completed_at": "2025-02-20T18:13:40.108424Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.109938Z", "completed_at": "2025-02-20T18:13:40.109948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009029150009155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_linha", "compiled": true, "compiled_code": "\n\nWITH\n    linha AS (\n        SELECT\n            data,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n            SAFE_CAST(CD_LINHA AS STRING) AS cd_linha,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_LINHA_OFICIAL') AS STRING) AS cd_linha_oficial,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_LOCAL_OPERACAO_LINHA') AS STRING) AS cd_local_operacao_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_CATEGORIA_LINHA') AS STRING) AS cd_tipo_categoria_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_LINHA') AS STRING) AS cd_tipo_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_MATRIZ_CALCULO_SUBSIDIO') AS STRING) AS cd_tipo_matriz_calculo_subsidio,\n            SAFE_CAST(JSON_VALUE(content, '$.IN_SITUACAO_ATIVIDADE') AS STRING) AS in_situacao_atividade,\n            SAFE_CAST(JSON_VALUE(content, '$.KM_LINHA') AS FLOAT64) AS km_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.LATITUDE_DESTINO') AS STRING) AS latitude_destino,\n            SAFE_CAST(JSON_VALUE(content, '$.LATITUDE_ORIGEM') AS STRING) AS latitude_origem,\n            SAFE_CAST(JSON_VALUE(content, '$.LONGITUDE_DESTINO') AS STRING) AS longitude_destino,\n            SAFE_CAST(JSON_VALUE(content, '$.LONGITUDE_ORIGEM') AS STRING) AS longitude_origem,\n            SAFE_CAST(JSON_VALUE(content, '$.NM_LINHA') AS STRING) AS nm_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.NR_LINHA') AS STRING) AS nr_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.QUANTIDADE_SECAO') AS STRING) AS quantidade_secao,\n            SAFE_CAST(JSON_VALUE(content, '$.GTFS_ROUTE_ID') AS STRING) AS gtfs_route_id,\n            SAFE_CAST(JSON_VALUE(content, '$.GTFS_STOP_ID') AS STRING) AS gtfs_stop_id\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha`\n    ),\n    linha_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY cd_linha ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            linha\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  linha_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.114408Z", "completed_at": "2025-02-20T18:13:40.119176Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.120629Z", "completed_at": "2025-02-20T18:13:40.120638Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008955717086791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_linha_consorcio", "compiled": true, "compiled_code": "\n\nWITH linha_consorcio AS (\n  SELECT\n    data,\n    SAFE_CAST(CD_CONSORCIO AS STRING) AS cd_consorcio,\n    SAFE_CAST(CD_LINHA AS STRING) AS cd_linha,\n    timestamp_captura,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS dt_inclusao,\n    PARSE_DATE(\"%Y-%m-%d\", SAFE_CAST(JSON_VALUE(content, '$.DT_INICIO_VALIDADE') AS STRING)) AS dt_inicio_validade,\n    PARSE_DATE(\"%Y-%m-%d\", SAFE_CAST(JSON_VALUE(content, '$.DT_FIM_VALIDADE') AS STRING)) AS dt_fim_validade\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_consorcio`\n),\nlinha_consorcio_rn AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY cd_consorcio, cd_linha ORDER BY timestamp_captura DESC) AS rn\n  FROM\n    linha_consorcio\n)\nSELECT\n  * EXCEPT(rn)\nFROM\n  linha_consorcio_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_consorcio`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.124923Z", "completed_at": "2025-02-20T18:13:40.130855Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.132250Z", "completed_at": "2025-02-20T18:13:40.132259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00995492935180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_linha_consorcio_operadora_transporte", "compiled": true, "compiled_code": "\n\nWITH linha_consorcio_operadora_transporte AS (\n  SELECT\n    data,\n    SAFE_CAST(CD_CONSORCIO AS STRING) AS cd_consorcio,\n    SAFE_CAST(CD_OPERADORA_TRANSPORTE AS STRING) AS cd_operadora_transporte,\n    SAFE_CAST(CD_LINHA AS STRING) AS cd_linha,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS dt_inclusao,\n    PARSE_DATE(\"%Y-%m-%d\", SAFE_CAST(JSON_VALUE(content, '$.DT_INICIO_VALIDADE') AS STRING)) AS dt_inicio_validade,\n    PARSE_DATE(\"%Y-%m-%d\", SAFE_CAST(JSON_VALUE(content, '$.DT_FIM_VALIDADE') AS STRING)) AS dt_fim_validade\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_consorcio_operadora_transporte`\n),\nlinha_consorcio_operadora_transporte_rn AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY cd_consorcio, cd_operadora_transporte, cd_linha ORDER BY timestamp_captura DESC) AS rn\n  FROM\n    linha_consorcio_operadora_transporte\n)\nSELECT\n  * EXCEPT(rn)\nFROM\n  linha_consorcio_operadora_transporte_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_consorcio_operadora_transporte`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.136447Z", "completed_at": "2025-02-20T18:13:40.141121Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.142573Z", "completed_at": "2025-02-20T18:13:40.142582Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008774995803833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_linha_sem_ressarcimento", "compiled": true, "compiled_code": "\n\nWITH linha_sem_ressarcimento AS (\n  SELECT\n    data,\n    SAFE_CAST(id_linha AS STRING) AS id_linha,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.dt_inclusao') AS STRING)), 'America/Sao_Paulo') AS dt_inclusao\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_sem_ressarcimento`\n)\nSELECT\n  * EXCEPT(rn)\nFROM\n(\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY id_linha ORDER BY timestamp_captura DESC) AS rn\n  FROM\n    linha_sem_ressarcimento\n)\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_sem_ressarcimento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.149153Z", "completed_at": "2025-02-20T18:13:40.153833Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.155257Z", "completed_at": "2025-02-20T18:13:40.155266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00882267951965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_linha_tarifa", "compiled": true, "compiled_code": "\n\nwith\n    linha_tarifa as (\n        select\n            data,\n            safe_cast(cd_linha as string) as cd_linha,\n            safe_cast(nr_sequencia as integer) as nr_sequencia,\n            datetime(\n                parse_timestamp('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura),\n                \"America/Sao_Paulo\"\n            ) as timestamp_captura,\n            safe_cast(\n                json_value(content, '$.vl_tarifa_ida') as numeric\n            ) as vl_tarifa_ida,\n            safe_cast(\n                json_value(content, '$.vl_tarifa_volta') as numeric\n            ) as vl_tarifa_volta,\n            safe_cast(json_value(content, '$.vl_pedagio') as numeric) as vl_pedagio,\n            safe_cast(json_value(content, '$.vl_taxas') as numeric) as vl_taxas,\n            safe_cast(\n                json_value(content, '$.cd_tipo_cobranca') as string\n            ) as cd_tipo_cobranca,\n            safe_cast(\n                json_value(content, '$.cd_tipo_valor') as string\n            ) as cd_tipo_valor,\n            safe_cast(\n                json_value(content, '$.cd_dia_semana') as string\n            ) as cd_dia_semana,\n            safe_cast(json_value(content, '$.cd_mes') as string) as cd_mes,\n            datetime(\n                parse_timestamp(\n                    '%Y-%m-%dT%H:%M:%E6S%Ez',\n                    safe_cast(json_value(content, '$.dt_inclusao') as string)\n                ),\n                \"America/Sao_Paulo\"\n            ) as dt_inclusao,\n            datetime(\n                parse_timestamp(\n                    '%Y-%m-%dT%H:%M:%E6S%Ez',\n                    safe_cast(json_value(content, '$.dt_inicio_validade') as string)\n                ),\n                \"America/Sao_Paulo\"\n            ) as dt_inicio_validade\n        from\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_tarifa`\n    ),\n    linha_tarifa_rn as (\n        select\n            *,\n            row_number() over (\n                partition by cd_linha, nr_sequencia order by timestamp_captura desc\n            ) as rn\n        from linha_tarifa\n    )\nselect * except (rn)\nfrom linha_tarifa_rn\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_tarifa`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.159528Z", "completed_at": "2025-02-20T18:13:40.164138Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.165557Z", "completed_at": "2025-02-20T18:13:40.165565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008692502975463867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_operadora_empresa", "compiled": true, "compiled_code": "\n\nWITH\n    operadora_empresa AS (\n        SELECT\n            data,\n            SAFE_CAST(Perm_Autor AS STRING) AS perm_autor,\n            timestamp_captura,\n            SAFE_CAST(JSON_VALUE(content, '$.CNPJ') AS STRING) AS cnpj,\n            DATE(PARSE_TIMESTAMP('%d/%m/%Y', SAFE_CAST(JSON_VALUE(content, '$.Data') AS STRING)), \"America/Sao_Paulo\") AS data_registro,\n            SAFE_CAST(JSON_VALUE(content, '$.Processo') AS STRING) AS processo,\n            SAFE_CAST(JSON_VALUE(content, '$.Razao_Social') AS STRING) AS razao_social,\n            SAFE_CAST(JSON_VALUE(content, '$.id_modo') AS STRING) AS id_modo,\n            SAFE_CAST(JSON_VALUE(content, '$.modo') AS STRING) AS modo,\n            SAFE_CAST(JSON_VALUE(content, '$.tipo_permissao') AS STRING) AS tipo_permissao\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_stu_staging`.`operadora_empresa`\n    ),\n    operadora_empresa_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY COALESCE(cnpj, perm_autor), modo ORDER BY timestamp_captura DESC, data_registro DESC) AS rn\n        FROM\n            operadora_empresa\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  operadora_empresa_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_stu`.`operadora_empresa`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.169773Z", "completed_at": "2025-02-20T18:13:40.175729Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.177130Z", "completed_at": "2025-02-20T18:13:40.177138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009973764419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_operadora_pessoa_fisica", "compiled": true, "compiled_code": "\n\nWITH\n    operadora_pessoa_fisica AS (\n        SELECT\n            data,\n            SAFE_CAST(Perm_Autor AS STRING) AS perm_autor,\n            timestamp_captura,\n            SAFE_CAST(JSON_VALUE(content, '$.CPF') AS STRING) AS cpf,\n            PARSE_DATE('%d/%m/%Y', LEFT(SAFE_CAST(JSON_VALUE(content, '$.Data') AS STRING), 10)) AS data_registro,\n            SAFE_CAST(JSON_VALUE(content, '$.Ratr') AS STRING) AS ratr,\n            SAFE_CAST(JSON_VALUE(content, '$.Processo') AS STRING) AS processo,\n            SAFE_CAST(JSON_VALUE(content, '$.Nome') AS STRING) AS nome,\n            SAFE_CAST(JSON_VALUE(content, '$.Placa') AS STRING) AS placa,\n            SAFE_CAST(JSON_VALUE(content, '$.id_modo') AS STRING) AS id_modo,\n            SAFE_CAST(JSON_VALUE(content, '$.modo') AS STRING) AS modo,\n            SAFE_CAST(JSON_VALUE(content, '$.tipo_permissao') AS STRING) AS tipo_permissao\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_stu_staging`.`operadora_pessoa_fisica`\n    ),\n    operadora_pessoa_fisica_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY COALESCE(cpf, perm_autor), modo ORDER BY timestamp_captura DESC, data_registro DESC) AS rn\n        FROM\n            operadora_pessoa_fisica\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  operadora_pessoa_fisica_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_stu`.`operadora_pessoa_fisica`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.181258Z", "completed_at": "2025-02-20T18:13:40.185657Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.187067Z", "completed_at": "2025-02-20T18:13:40.187074Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008437633514404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_operadora_transporte", "compiled": true, "compiled_code": "\n\nWITH\n    operadora_transporte AS (\n        SELECT\n            data,\n            SAFE_CAST(CD_OPERADORA_TRANSPORTE AS STRING) AS cd_operadora_transporte,\n            timestamp_captura,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_INCLUSAO') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_CLIENTE') AS STRING) AS cd_cliente,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_CLIENTE') AS STRING) AS cd_tipo_cliente,\n            SAFE_CAST(JSON_VALUE(content, '$.CD_TIPO_MODAL') AS STRING) AS cd_tipo_modal,\n            SAFE_CAST(JSON_VALUE(content, '$.IN_SITUACAO_ATIVIDADE') AS STRING) AS in_situacao_atividade,\n            SAFE_CAST(JSON_VALUE(content, '$.DS_TIPO_MODAL') AS STRING) AS ds_tipo_modal\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`operadora_transporte`\n    ),\n    operadora_transporte_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY cd_operadora_transporte ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            operadora_transporte\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  operadora_transporte_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`operadora_transporte`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.191341Z", "completed_at": "2025-02-20T18:13:40.196000Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.197366Z", "completed_at": "2025-02-20T18:13:40.197374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008755922317504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_ordem_pagamento", "compiled": true, "compiled_code": "\n\nWITH ordem_pagamento AS (\n  SELECT\n    data,\n    SAFE_CAST(id AS STRING) AS id_ordem_pagamento,\n    timestamp_captura,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_inclusao') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n    PARSE_DATE('%Y-%m-%d', SAFE_CAST(JSON_VALUE(content, '$.data_ordem') AS STRING)) AS data_ordem,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_pagamento') AS STRING)), \"America/Sao_Paulo\") AS data_pagamento,\n    SAFE_CAST(JSON_VALUE(content, '$.id_status_ordem') AS STRING) AS id_status_ordem,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_debito') AS INTEGER) AS qtd_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_gratuidade') AS INTEGER) AS qtd_gratuidade,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_integracao') AS INTEGER) AS qtd_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_rateio_credito') AS INTEGER) AS qtd_rateio_credito,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_rateio_debito') AS INTEGER) AS qtd_rateio_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_vendaabordo') AS INTEGER) AS qtd_vendaabordo,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_bruto') AS NUMERIC) AS valor_bruto,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_debito') AS NUMERIC) AS valor_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_gratuidade') AS NUMERIC) AS valor_gratuidade,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_integracao') AS NUMERIC) AS valor_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_liquido') AS NUMERIC) AS valor_liquido,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_credito') AS NUMERIC) AS valor_rateio_credito,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_debito') AS NUMERIC) AS valor_rateio_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_taxa') AS NUMERIC) AS valor_taxa,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_vendaabordo') AS NUMERIC) AS valor_vendaabordo\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento`\n),\nordem_pagamento_rn AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY id_ordem_pagamento ORDER BY timestamp_captura DESC) AS rn\n  FROM\n    ordem_pagamento\n)\nSELECT\n  * EXCEPT(rn)\nFROM\n  ordem_pagamento_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.201567Z", "completed_at": "2025-02-20T18:13:40.206017Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.207581Z", "completed_at": "2025-02-20T18:13:40.207593Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008743524551391602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_ordem_pagamento_consorcio", "compiled": true, "compiled_code": "\n\nWITH ordem_pagamento_consorcio AS (\n  SELECT\n    data,\n    SAFE_CAST(id AS STRING) AS id_ordem_pagamento_consorcio,\n    timestamp_captura,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_inclusao') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n    PARSE_DATE('%Y-%m-%d', SAFE_CAST(JSON_VALUE(content, '$.data_ordem') AS STRING)) AS data_ordem,\n    SAFE_CAST(JSON_VALUE(content, '$.id_consorcio') AS STRING) AS id_consorcio,\n    SAFE_CAST(JSON_VALUE(content, '$.id_ordem_pagamento') AS STRING) AS id_ordem_pagamento,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_debito') AS INTEGER) AS qtd_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_gratuidade') AS INTEGER) AS qtd_gratuidade,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_integracao') AS INTEGER) AS qtd_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_rateio_credito') AS INTEGER) AS qtd_rateio_credito,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_rateio_debito') AS INTEGER) AS qtd_rateio_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.qtd_vendaabordo') AS INTEGER) AS qtd_vendaabordo,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_bruto') AS NUMERIC) AS valor_bruto,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_debito') AS NUMERIC) AS valor_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_gratuidade') AS NUMERIC) AS valor_gratuidade,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_integracao') AS NUMERIC) AS valor_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_liquido') AS NUMERIC) AS valor_liquido,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_credito') AS NUMERIC) AS valor_rateio_credito,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_debito') AS NUMERIC) AS valor_rateio_debito,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_taxa') AS NUMERIC) AS valor_taxa,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_vendaabordo') AS NUMERIC) AS valor_vendaabordo\n  FROM\n      `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento_consorcio`\n),\nordem_pagamento_consorcio_rn AS (\n  SELECT\n      *,\n      ROW_NUMBER() OVER (PARTITION BY id_ordem_pagamento_consorcio ORDER BY timestamp_captura DESC) AS rn\n  FROM\n      ordem_pagamento_consorcio\n)\nSELECT\n  * EXCEPT(rn)\nFROM\n  ordem_pagamento_consorcio_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento_consorcio`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.212007Z", "completed_at": "2025-02-20T18:13:40.218062Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.219452Z", "completed_at": "2025-02-20T18:13:40.219459Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010117292404174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_ordem_pagamento_consorcio_operadora", "compiled": true, "compiled_code": "\n\nwith\n    ordem_pagamento_consorcio_operadora as (\n        select\n            data,\n            safe_cast(id as string) as id_ordem_pagamento_consorcio_operadora,\n            datetime(\n                parse_timestamp('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura),\n                \"America/Sao_Paulo\"\n            ) as timestamp_captura,\n            datetime(\n                parse_timestamp(\n                    '%Y-%m-%dT%H:%M:%E*S%Ez',\n                    safe_cast(json_value(content, '$.data_inclusao') as string)\n                ),\n                \"America/Sao_Paulo\"\n            ) as datetime_inclusao,\n            parse_date(\n                '%Y-%m-%d', safe_cast(json_value(content, '$.data_ordem') as string)\n            ) as data_ordem,\n            safe_cast(json_value(content, '$.id_consorcio') as string) as id_consorcio,\n            safe_cast(json_value(content, '$.id_operadora') as string) as id_operadora,\n            safe_cast(\n                json_value(content, '$.id_ordem_pagamento_consorcio') as string\n            ) as id_ordem_pagamento_consorcio,\n            safe_cast(json_value(content, '$.qtd_debito') as integer) as qtd_debito,\n            safe_cast(\n                json_value(content, '$.qtd_gratuidade') as integer\n            ) as qtd_gratuidade,\n            safe_cast(\n                json_value(content, '$.qtd_integracao') as integer\n            ) as qtd_integracao,\n            safe_cast(\n                json_value(content, '$.qtd_rateio_credito') as integer\n            ) as qtd_rateio_credito,\n            safe_cast(\n                json_value(content, '$.qtd_rateio_debito') as integer\n            ) as qtd_rateio_debito,\n            safe_cast(\n                json_value(content, '$.qtd_vendaabordo') as integer\n            ) as qtd_vendaabordo,\n            safe_cast(json_value(content, '$.valor_bruto') as numeric) as valor_bruto,\n            safe_cast(json_value(content, '$.valor_debito') as numeric) as valor_debito,\n            safe_cast(\n                json_value(content, '$.valor_gratuidade') as numeric\n            ) as valor_gratuidade,\n            safe_cast(\n                json_value(content, '$.valor_integracao') as numeric\n            ) as valor_integracao,\n            safe_cast(\n                json_value(content, '$.valor_liquido') as numeric\n            ) as valor_liquido,\n            safe_cast(\n                json_value(content, '$.valor_rateio_credito') as numeric\n            ) as valor_rateio_credito,\n            safe_cast(\n                json_value(content, '$.valor_rateio_debito') as numeric\n            ) as valor_rateio_debito,\n            safe_cast(json_value(content, '$.valor_taxa') as numeric) as valor_taxa,\n            safe_cast(\n                json_value(content, '$.valor_vendaabordo') as numeric\n            ) as valor_vendaabordo\n        from\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento_consorcio_operadora`\n    ),\n    ordem_pagamento_consorcio_operadora_rn as (\n        select\n            *,\n            row_number() over (\n                partition by id_ordem_pagamento_consorcio_operadora\n                order by timestamp_captura desc\n            ) as rn\n        from ordem_pagamento_consorcio_operadora\n    )\nselect * except (rn)\nfrom ordem_pagamento_consorcio_operadora_rn\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento_consorcio_operadora`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.223734Z", "completed_at": "2025-02-20T18:13:40.228852Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.230269Z", "completed_at": "2025-02-20T18:13:40.230278Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009294271469116211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_ordem_rateio", "compiled": true, "compiled_code": "\n\nwith\n    ordem_rateio as (\n        select\n            data,\n            safe_cast(id as string) as id_ordem_rateio,\n            timestamp_captura,\n            datetime(\n                parse_timestamp(\n                    '%Y-%m-%dT%H:%M:%E*S%Ez',\n                    safe_cast(json_value(content, '$.data_inclusao') as string)\n                ),\n                'America/Sao_Paulo'\n            ) as data_inclusao,\n            parse_date(\n                '%Y-%m-%d', safe_cast(json_value(content, '$.data_ordem') as string)\n            ) as data_ordem,\n            safe_cast(json_value(content, '$.id_consorcio') as string) as id_consorcio,\n            safe_cast(json_value(content, '$.id_linha') as string) as id_linha,\n            safe_cast(json_value(content, '$.id_operadora') as string) as id_operadora,\n            safe_cast(\n                json_value(content, '$.id_ordem_pagamento') as string\n            ) as id_ordem_pagamento,\n            safe_cast(\n                json_value(content, '$.id_ordem_pagamento_consorcio') as string\n            ) as id_ordem_pagamento_consorcio,\n            safe_cast(\n                json_value(\n                    content, '$.id_ordem_pagamento_consorcio_operadora'\n                ) as string\n            ) as id_ordem_pagamento_consorcio_operadora,\n            safe_cast(\n                json_value(content, '$.id_status_ordem') as string\n            ) as id_status_ordem,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_credito_t0'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_credito_t0,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_credito_t1'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_credito_t1,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_credito_t2'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_credito_t2,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_credito_t3'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_credito_t3,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_credito_t4'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_credito_t4,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_credito_total'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_credito_total,\n            safe_cast(\n                safe_cast(\n                    json_value(content, '$.qtd_rateio_compensacao_debito_t0') as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_debito_t0,\n            safe_cast(\n                safe_cast(\n                    json_value(content, '$.qtd_rateio_compensacao_debito_t1') as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_debito_t1,\n            safe_cast(\n                safe_cast(\n                    json_value(content, '$.qtd_rateio_compensacao_debito_t2') as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_debito_t2,\n            safe_cast(\n                safe_cast(\n                    json_value(content, '$.qtd_rateio_compensacao_debito_t3') as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_debito_t3,\n            safe_cast(\n                safe_cast(\n                    json_value(content, '$.qtd_rateio_compensacao_debito_t4') as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_debito_t4,\n            safe_cast(\n                safe_cast(\n                    json_value(\n                        content, '$.qtd_rateio_compensacao_debito_total'\n                    ) as float64\n                ) as integer\n            ) as qtd_rateio_compensacao_debito_total,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_credito_t0') as numeric\n            ) as valor_rateio_compensacao_credito_t0,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_credito_t1') as numeric\n            ) as valor_rateio_compensacao_credito_t1,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_credito_t2') as numeric\n            ) as valor_rateio_compensacao_credito_t2,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_credito_t3') as numeric\n            ) as valor_rateio_compensacao_credito_t3,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_credito_t4') as numeric\n            ) as valor_rateio_compensacao_credito_t4,\n            safe_cast(\n                json_value(\n                    content, '$.valor_rateio_compensacao_credito_total'\n                ) as numeric\n            ) as valor_rateio_compensacao_credito_total,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_debito_t0') as numeric\n            ) as valor_rateio_compensacao_debito_t0,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_debito_t1') as numeric\n            ) as valor_rateio_compensacao_debito_t1,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_debito_t2') as numeric\n            ) as valor_rateio_compensacao_debito_t2,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_debito_t3') as numeric\n            ) as valor_rateio_compensacao_debito_t3,\n            safe_cast(\n                json_value(content, '$.valor_rateio_compensacao_debito_t4') as numeric\n            ) as valor_rateio_compensacao_debito_t4,\n            safe_cast(\n                json_value(\n                    content, '$.valor_rateio_compensacao_debito_total'\n                ) as numeric\n            ) as valor_rateio_compensacao_debito_total\n        from `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_rateio`\n    )\nselect * except (rn)\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id_ordem_rateio order by timestamp_captura desc\n            ) as rn\n        from ordem_rateio\n    )\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_rateio`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.234462Z", "completed_at": "2025-02-20T18:13:40.239100Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.240529Z", "completed_at": "2025-02-20T18:13:40.240537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008728742599487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_ordem_ressarcimento", "compiled": true, "compiled_code": "\n\nWITH\n    ordem_ressarcimento AS (\n        SELECT\n            data,\n            SAFE_CAST(id AS STRING) AS id_ordem_ressarcimento,\n            timestamp_captura,\n            DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_inclusao') AS STRING)), \"America/Sao_Paulo\") AS datetime_inclusao,\n            PARSE_DATE('%Y-%m-%d', SAFE_CAST(JSON_VALUE(content, '$.data_ordem') AS STRING)) AS data_ordem,\n            SAFE_CAST(JSON_VALUE(content, '$.id_consorcio') AS STRING) AS id_consorcio,\n            SAFE_CAST(JSON_VALUE(content, '$.id_linha') AS STRING) AS id_linha,\n            SAFE_CAST(JSON_VALUE(content, '$.id_operadora') AS STRING) AS id_operadora,\n            SAFE_CAST(JSON_VALUE(content, '$.id_ordem_pagamento') AS STRING) AS id_ordem_pagamento,\n            SAFE_CAST(JSON_VALUE(content, '$.id_ordem_pagamento_consorcio') AS STRING) AS id_ordem_pagamento_consorcio,\n            SAFE_CAST(JSON_VALUE(content, '$.id_ordem_pagamento_consorcio_operadora') AS STRING) AS id_ordem_pagamento_consorcio_operadora,\n            SAFE_CAST(JSON_VALUE(content, '$.id_status_ordem') AS STRING) AS id_status_ordem,\n            SAFE_CAST(JSON_VALUE(content, '$.qtd_debito') AS INTEGER) AS qtd_debito,\n            SAFE_CAST(JSON_VALUE(content, '$.qtd_gratuidade') AS INTEGER) AS qtd_gratuidade,\n            SAFE_CAST(JSON_VALUE(content, '$.qtd_integracao') AS INTEGER) AS qtd_integracao,\n            SAFE_CAST(JSON_VALUE(content, '$.qtd_rateio_credito') AS INTEGER) AS qtd_rateio_credito,\n            SAFE_CAST(JSON_VALUE(content, '$.qtd_rateio_debito') AS INTEGER) AS qtd_rateio_debito,\n            SAFE_CAST(JSON_VALUE(content, '$.qtd_vendaabordo') AS INTEGER) AS qtd_vendaabordo,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_bruto') AS NUMERIC) AS valor_bruto,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_debito') AS NUMERIC) AS valor_debito,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_gratuidade') AS NUMERIC) AS valor_gratuidade,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_integracao') AS NUMERIC) AS valor_integracao,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_liquido') AS NUMERIC) AS valor_liquido,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_credito') AS NUMERIC) AS valor_rateio_credito,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_rateio_debito') AS NUMERIC) AS valor_rateio_debito,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_taxa') AS NUMERIC) AS valor_taxa,\n            SAFE_CAST(JSON_VALUE(content, '$.valor_vendaabordo') AS NUMERIC) AS valor_vendaabordo\n        FROM\n            `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_ressarcimento`\n    ),\n    ordem_ressarcimento_rn AS (\n        SELECT\n            *,\n            ROW_NUMBER() OVER (PARTITION BY id_ordem_ressarcimento ORDER BY timestamp_captura DESC) AS rn\n        FROM\n            ordem_ressarcimento\n    )\nSELECT\n  * EXCEPT(rn)\nFROM\n  ordem_ressarcimento_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_ressarcimento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.244667Z", "completed_at": "2025-02-20T18:13:40.249273Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.250695Z", "completed_at": "2025-02-20T18:13:40.250704Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008651256561279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_percentual_rateio_integracao", "compiled": true, "compiled_code": "\n\nWITH percentual_rateio_integracao AS (\n  SELECT\n    data,\n    SAFE_CAST(id AS STRING) AS id,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    SAFE_CAST(JSON_VALUE(content, '$.dt_fim_validade') AS STRING) AS dt_fim_validade,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:S%Ez', SAFE_CAST(JSON_VALUE(content, '$.dt_inclusao') AS STRING)), 'America/Sao_Paulo') AS dt_inclusao,\n    DATE(PARSE_TIMESTAMP('%Y-%m-%d', SAFE_CAST(JSON_VALUE(content, '$.dt_inicio_validade') AS STRING)), 'America/Sao_Paulo') AS dt_inicio_validade,\n    REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_integracao_t1') AS STRING), '.0', '') AS id_tipo_modal_integracao_t1,\n    REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_integracao_t2') AS STRING), '.0', '') AS id_tipo_modal_integracao_t2,\n    REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_integracao_t3') AS STRING), '.0', '') AS id_tipo_modal_integracao_t3,\n    REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_integracao_t4') AS STRING), '.0', '') AS id_tipo_modal_integracao_t4,\n    REPLACE(SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal_origem') AS STRING), '.0', '') AS id_tipo_modal_origem,\n    SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_integracao_t1') AS FLOAT64) AS perc_rateio_integracao_t1,\n    SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_integracao_t2') AS FLOAT64) AS perc_rateio_integracao_t2,\n    SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_integracao_t3') AS FLOAT64) AS perc_rateio_integracao_t3,\n    SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_integracao_t4') AS FLOAT64) AS perc_rateio_integracao_t4,\n    SAFE_CAST(JSON_VALUE(content, '$.perc_rateio_origem') AS FLOAT64) AS perc_rateio_origem\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`percentual_rateio_integracao`\n)\nSELECT\n  * EXCEPT(rn)\nFROM\n(\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY id ORDER BY timestamp_captura DESC) AS rn\n  FROM\n    percentual_rateio_integracao\n)\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`percentual_rateio_integracao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.254844Z", "completed_at": "2025-02-20T18:13:40.261459Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.262876Z", "completed_at": "2025-02-20T18:13:40.262884Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010609149932861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_rdo_registros_stpl", "compiled": true, "compiled_code": "\n\nselect\n    safe_cast(operadora as string) as operadora,\n    safe_cast(linha as string) as linha,\n    safe_cast(tarifa_valor as numeric) as tarifa_valor,\n    safe_cast(data_transacao as date) as data_transacao,\n    safe_cast(gratuidade_idoso as int64) as gratuidade_idoso,\n    safe_cast(gratuidade_especial as int64) as gratuidade_especial,\n    safe_cast(gratuidade_estudante_federal as int64) as gratuidade_estudante_federal,\n    safe_cast(gratuidade_estudante_estadual as int64) as gratuidade_estudante_estadual,\n    safe_cast(\n        gratuidade_estudante_municipal as int64\n    ) as gratuidade_estudante_municipal,\n    safe_cast(universitario as int64) as universitario,\n    safe_cast(buc_1a_perna as int64) as buc_1a_perna,\n    safe_cast(buc_2a_perna as int64) as buc_2a_perna,\n    safe_cast(buc_receita as numeric) as buc_receita,\n    safe_cast(buc_supervia_1a_perna as int64) as buc_supervia_1a_perna,\n    safe_cast(buc_supervia_2a_perna as int64) as buc_supervia_2a_perna,\n    safe_cast(buc_supervia_receita as numeric) as buc_supervia_receita,\n    safe_cast(buc_van_1a_perna as int64) as buc_van_1a_perna,\n    safe_cast(buc_van_2a_perna as int64) as buc_van_2a_perna,\n    safe_cast(buc_van_receita as numeric) as buc_van_receita,\n    safe_cast(buc_brt_1a_perna as int64) as buc_brt_1a_perna,\n    safe_cast(buc_brt_2a_perna as int64) as buc_brt_2a_perna,\n    safe_cast(buc_brt_3a_perna as int64) as buc_brt_3a_perna,\n    safe_cast(buc_brt_receita as numeric) as buc_brt_receita,\n    safe_cast(buc_inter_1a_perna as int64) as buc_inter_1a_perna,\n    safe_cast(buc_inter_2a_perna as int64) as buc_inter_2a_perna,\n    safe_cast(buc_inter_receita as numeric) as buc_inter_receita,\n    safe_cast(buc_metro_1a_perna as int64) as buc_metro_1a_perna,\n    safe_cast(buc_metro_2a_perna as int64) as buc_metro_2a_perna,\n    safe_cast(buc_metro_receita as numeric) as buc_metro_receita,\n    safe_cast(cartao as int64) as cartao,\n    safe_cast(receita_cartao as int64) as receita_cartao,\n    safe_cast(\n        especie_passageiro_transportado as int64\n    ) as especie_passageiro_transportado,\n    safe_cast(especie_receita as numeric) as especie_receita,\n    safe_cast(registro_processado as string) as registro_processado,\n    parse_date('%Y%m%d', replace(data_processamento, \".0\", \"\")) as data_processamento,\n    safe_cast(linha_rcti as string) linha_rcti,\n    safe_cast(codigo as string) codigo,\n    safe_cast(\n        datetime(timestamp(timestamp_captura), \"America/Sao_Paulo\") as datetime\n    ) timestamp_captura,\n    safe_cast(ano as int64) ano,\n    safe_cast(mes as int64) mes,\n    safe_cast(dia as int64) dia,\n    date(concat(ano, '-', mes, '-', dia)) data_particao\nfrom `rj-smtr-staging`.`br_rj_riodejaneiro_rdo_staging`.`rdo_registros_stpl` as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rdo_registros_stpl`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.266970Z", "completed_at": "2025-02-20T18:13:40.271301Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.272727Z", "completed_at": "2025-02-20T18:13:40.272735Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008383512496948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_recursos_sppo_bloqueio_via", "compiled": true, "compiled_code": "\n\n\nSELECT\n  JSON_EXTRACT_ARRAY(content, '$.customFieldValues') AS items,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S', REGEXP_REPLACE(JSON_VALUE(content, '$.createdDate'), r'(\\.\\d+)?$', '')), 'America/Sao_Paulo') AS datetime_recurso,\n  SAFE_CAST(protocol AS STRING) AS id_recurso,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S', REGEXP_REPLACE(JSON_VALUE(content, '$.lastUpdate'), r'(\\.\\d+)?$', '')), 'America/Sao_Paulo') AS datetime_update,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), 'America/Sao_Paulo') AS datetime_captura,\n  data\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_bloqueio_via`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_bloqueio_via`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.277013Z", "completed_at": "2025-02-20T18:13:40.281665Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.283049Z", "completed_at": "2025-02-20T18:13:40.283057Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008650779724121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_recursos_sppo_reprocessamento", "compiled": true, "compiled_code": "\n\nSELECT\n  JSON_EXTRACT_ARRAY(content, '$.customFieldValues') AS items,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S', REGEXP_REPLACE(JSON_VALUE(content, '$.createdDate'), r'(\\.\\d+)?$', '')), 'America/Sao_Paulo') AS datetime_recurso,\n  SAFE_CAST(protocol AS STRING) AS id_recurso,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S', REGEXP_REPLACE(JSON_VALUE(content, '$.lastUpdate'), r'(\\.\\d+)?$', '')), 'America/Sao_Paulo') AS datetime_update,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), 'America/Sao_Paulo') AS datetime_captura,\n  data\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_reprocessamento`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_reprocessamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.287147Z", "completed_at": "2025-02-20T18:13:40.291824Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.293258Z", "completed_at": "2025-02-20T18:13:40.293266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0087127685546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_recursos_sppo_viagens_individuais", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n  JSON_EXTRACT_ARRAY(content, '$.customFieldValues') AS items,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S', REGEXP_REPLACE(JSON_VALUE(content, '$.createdDate'), r'(\\.\\d+)?$', '')), 'America/Sao_Paulo') AS datetime_recurso,\n  SAFE_CAST(protocol AS STRING) AS id_recurso,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S', REGEXP_REPLACE(JSON_VALUE(content, '$.lastUpdate'), r'(\\.\\d+)?$', '')), 'America/Sao_Paulo') AS datetime_update,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), 'America/Sao_Paulo') AS datetime_captura,\n  data\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_viagens_individuais`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_viagens_individuais`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.297508Z", "completed_at": "2025-02-20T18:13:40.303592Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.304926Z", "completed_at": "2025-02-20T18:13:40.304934Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00997471809387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_rho_registros_stpl", "compiled": true, "compiled_code": "\n\nselect\n    safe_cast(operadora as string) operadora,\n    safe_cast(linha as string) linha,\n    safe_cast(data_transacao as date) data_transacao,\n    safe_cast(hora_transacao as int64) hora_transacao,\n    safe_cast(total_gratuidades as int64) total_gratuidades,\n    safe_cast(total_pagantes as int64) total_pagantes,\n    safe_cast(codigo as string) codigo,\n    safe_cast(\n        datetime(timestamp(timestamp_captura), \"America/Sao_Paulo\") as datetime\n    ) timestamp_captura,\n    safe_cast(ano as int64) ano,\n    safe_cast(mes as int64) mes,\n    safe_cast(dia as int64) dia,\n    date(concat(ano, '-', mes, '-', dia)) data_particao\nfrom `rj-smtr-staging`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_stpl` as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_stpl`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.309330Z", "completed_at": "2025-02-20T18:13:40.314163Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.315659Z", "completed_at": "2025-02-20T18:13:40.315669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009241819381713867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_servico_motorista", "compiled": true, "compiled_code": "\n\nSELECT\n  data,\n  SAFE_CAST(NR_LOGICO_MIDIA AS STRING) AS nr_logico_midia,\n  SAFE_CAST(ID_SERVICO AS STRING) AS id_servico,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n  SAFE_CAST(JSON_VALUE(content, '$.CD_LINHA') AS STRING) AS cd_linha,\n  SAFE_CAST(JSON_VALUE(content, '$.CD_OPERADORA') AS STRING) AS cd_operadora,\n  SAFE_CAST(JSON_VALUE(content, '$.CD_STATUS') AS STRING) AS cd_status,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_ABERTURA') AS STRING)), 'America/Sao_Paulo') AS dt_abertura,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S%Ez', SAFE_CAST(JSON_VALUE(content, '$.DT_FECHAMENTO') AS STRING)), 'America/Sao_Paulo') AS dt_fechamento,\n  SAFE_CAST(JSON_VALUE(content, '$.ID_VEICULO') AS STRING) AS id_veiculo,\n  SAFE_CAST(JSON_VALUE(content, '$.NR_LOGICO_MIDIA_FECHAMENTO') AS STRING) AS nr_logico_midia_fechamento,\n  SAFE_CAST(JSON_VALUE(content, '$.SN_DEVICE') AS STRING) AS sn_device,\n  SAFE_CAST(JSON_VALUE(content, '$.TP_GERACAO') AS STRING) AS tp_geracao,\n  SAFE_CAST(JSON_VALUE(content, '$.VL_TARIFA_LINHA') AS FLOAT64) AS vl_tarifa_linha\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`servico_motorista`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`servico_motorista`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.320191Z", "completed_at": "2025-02-20T18:13:40.325143Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.326593Z", "completed_at": "2025-02-20T18:13:40.326604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009290218353271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_transacao", "compiled": true, "compiled_code": "\n\nSELECT\n    data,\n    hora,\n    id,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    SAFE_CAST(JSON_VALUE(content, '$.assinatura') AS STRING) AS assinatura,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_aplicacao') AS STRING) AS cd_aplicacao,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_emissor') AS STRING) AS cd_emissor,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_consorcio') AS STRING) AS cd_consorcio,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_linha') AS STRING) AS cd_linha,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_matriz_integracao') AS STRING) AS cd_matriz_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_operadora') AS STRING) AS cd_operadora,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_secao') AS STRING) AS cd_secao,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_status_transacao') AS STRING) AS cd_status_transacao,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E6S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_processamento') AS STRING)), \"America/Sao_Paulo\") AS data_processamento,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E6S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_transacao') AS STRING)), \"America/Sao_Paulo\") AS data_transacao,\n    SAFE_CAST(JSON_VALUE(content, '$.id_cliente') AS STRING) AS id_cliente,\n    SAFE_CAST(JSON_VALUE(content, '$.id_produto') AS STRING) AS id_produto,\n    SAFE_CAST(JSON_VALUE(content, '$.id_servico') AS STRING) AS id_servico,\n    SAFE_CAST(JSON_VALUE(content, '$.id_tipo_midia') AS STRING) AS id_tipo_midia,\n    SAFE_CAST(JSON_VALUE(content, '$.is_abt') AS BOOL) AS is_abt,\n    SAFE_CAST(JSON_VALUE(content, '$.latitude_trx') AS FLOAT64) AS latitude_trx,\n    SAFE_CAST(JSON_VALUE(content, '$.longitude_trx') AS FLOAT64) AS longitude_trx,\n    SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador') AS STRING) AS nr_logico_midia_operador,\n    SAFE_CAST(JSON_VALUE(content, '$.numero_serie_validador') AS STRING) AS numero_serie_validador,\n    SAFE_CAST(JSON_VALUE(content, '$.pan_hash') AS STRING) AS pan_hash,\n    SAFE_CAST(JSON_VALUE(content, '$.posicao_validador') AS STRING) AS posicao_validador,\n    SAFE_CAST(JSON_VALUE(content, '$.sentido') AS STRING) AS sentido,\n    SAFE_CAST(JSON_VALUE(content, '$.tipo_integracao') AS STRING) AS tipo_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.tipo_transacao') AS STRING) AS tipo_transacao,\n    SAFE_CAST(JSON_VALUE(content, '$.uid_origem') AS STRING) AS uid_origem,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa') AS FLOAT64) AS valor_tarifa,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_transacao') AS FLOAT64) AS valor_transacao,\n    SAFE_CAST(JSON_VALUE(content, '$.veiculo_id') AS STRING) AS veiculo_id,\n    SAFE_CAST(JSON_VALUE(content, '$.vl_saldo') AS FLOAT64) AS vl_saldo,\n    SAFE_CAST(JSON_VALUE(content, '$.id_tipo_modal') AS STRING) AS id_tipo_modal\nFROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.330929Z", "completed_at": "2025-02-20T18:13:40.335636Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.337008Z", "completed_at": "2025-02-20T18:13:40.337017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00876164436340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_transacao_ordem", "compiled": true, "compiled_code": "\n\nselect\n    data,\n    id,\n    datetime(\n        parse_timestamp('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\"\n    ) as timestamp_captura,\n    cast(\n        cast(cast(id_ordem_ressarcimento as float64) as integer) as string\n    ) as id_ordem_ressarcimento,\n    datetime(\n        parse_timestamp('%Y-%m-%dT%H:%M:%E6S%Ez', data_processamento),\n        \"America/Sao_Paulo\"\n    ) as data_processamento,\n    datetime(\n        parse_timestamp('%Y-%m-%dT%H:%M:%E6S%Ez', data_transacao), \"America/Sao_Paulo\"\n    ) as data_transacao\nfrom `rj-smtr-staging`.`source_jae`.`transacao_ordem`", "relation_name": "`rj-smtr`.`bilhetagem_staging`.`transacao_ordem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.341453Z", "completed_at": "2025-02-20T18:13:40.347688Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.349106Z", "completed_at": "2025-02-20T18:13:40.349116Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010452508926391602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_transacao_riocard", "compiled": true, "compiled_code": "\n\nSELECT\n    data,\n    hora,\n    id,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n    SAFE_CAST(JSON_VALUE(content, '$.assinatura') AS STRING) AS assinatura,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_aplicacao') AS STRING) AS cd_aplicacao,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_emissor') AS STRING) AS cd_emissor,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_consorcio') AS STRING) AS cd_consorcio,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_linha') AS STRING) AS cd_linha,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_matriz_integracao') AS STRING) AS cd_matriz_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_operadora') AS STRING) AS cd_operadora,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_secao') AS STRING) AS cd_secao,\n    SAFE_CAST(JSON_VALUE(content, '$.cd_status_transacao') AS STRING) AS cd_status_transacao,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E6S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_processamento') AS STRING)), \"America/Sao_Paulo\") AS data_processamento,\n    DATETIME(PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E6S%Ez', SAFE_CAST(JSON_VALUE(content, '$.data_transacao') AS STRING)), \"America/Sao_Paulo\") AS data_transacao,\n    SAFE_CAST(JSON_VALUE(content, '$.id_cliente') AS STRING) AS id_cliente,\n    SAFE_CAST(JSON_VALUE(content, '$.id_produto') AS STRING) AS id_produto,\n    SAFE_CAST(JSON_VALUE(content, '$.id_servico') AS STRING) AS id_servico,\n    SAFE_CAST(JSON_VALUE(content, '$.id_tipo_midia') AS STRING) AS id_tipo_midia,\n    SAFE_CAST(JSON_VALUE(content, '$.latitude_trx') AS FLOAT64) AS latitude_trx,\n    SAFE_CAST(JSON_VALUE(content, '$.longitude_trx') AS FLOAT64) AS longitude_trx,\n    SAFE_CAST(JSON_VALUE(content, '$.nr_logico_midia_operador') AS STRING) AS nr_logico_midia_operador,\n    SAFE_CAST(JSON_VALUE(content, '$.numero_serie_validador') AS STRING) AS numero_serie_validador,\n    SAFE_CAST(JSON_VALUE(content, '$.pan_hash') AS STRING) AS pan_hash,\n    SAFE_CAST(JSON_VALUE(content, '$.posicao_validador') AS STRING) AS posicao_validador,\n    SAFE_CAST(JSON_VALUE(content, '$.sentido') AS STRING) AS sentido,\n    SAFE_CAST(JSON_VALUE(content, '$.tipo_integracao') AS STRING) AS tipo_integracao,\n    SAFE_CAST(JSON_VALUE(content, '$.tipo_transacao') AS STRING) AS tipo_transacao,\n    SAFE_CAST(JSON_VALUE(content, '$.uid_origem') AS STRING) AS uid_origem,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_tarifa') AS NUMERIC) AS valor_tarifa,\n    SAFE_CAST(JSON_VALUE(content, '$.valor_transacao') AS NUMERIC) AS valor_transacao,\n    SAFE_CAST(JSON_VALUE(content, '$.veiculo_id') AS STRING) AS veiculo_id,\n    SAFE_CAST(JSON_VALUE(content, '$.vl_saldo') AS NUMERIC) AS vl_saldo\nFROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao_riocard`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao_riocard`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.353381Z", "completed_at": "2025-02-20T18:13:40.358541Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.360006Z", "completed_at": "2025-02-20T18:13:40.360015Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009324073791503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_viagem_informada", "compiled": true, "compiled_code": "\n\nSELECT\n  id_viagem,\n  data,\n  hora,\n  DATETIME(PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S%Ez', timestamp_captura), \"America/Sao_Paulo\") AS timestamp_captura,\n  DATE(\n    PARSE_DATETIME(\n      '%Y-%m-%d',\n      SUBSTRING(\n        SAFE_CAST(JSON_VALUE(content, '$.data_viagem') AS STRING),\n        0,\n        10\n      )\n    )\n  ) AS data_viagem,\n  DATETIME(\n    PARSE_TIMESTAMP(\n      '%Y-%m-%dT%H:%M:%S',\n      REPLACE(\n        SAFE_CAST(JSON_VALUE(content, '$.datetime_chegada') AS STRING),\n        \"Z\",\n        \"\"\n      )\n    )\n  ) AS datetime_chegada,\n  DATETIME(\n    PARSE_TIMESTAMP(\n      '%Y-%m-%dT%H:%M:%S',\n      REPLACE(\n        SAFE_CAST(JSON_VALUE(content, '$.datetime_partida') AS STRING),\n        \"Z\",\n        \"\"\n      )\n    )\n  ) AS datetime_partida,\n  DATETIME(\n    PARSE_TIMESTAMP(\n      '%Y-%m-%dT%H:%M:%E*S',\n      REPLACE(\n        SAFE_CAST(JSON_VALUE(content, '$.datetime_processamento') AS STRING),\n        \"Z\",\n        \"\"\n      )\n    )\n  ) AS datetime_processamento,\n  SAFE_CAST(JSON_VALUE(content, '$.id_veiculo') AS STRING) AS id_veiculo,\n  SAFE_CAST(JSON_VALUE(content, '$.route_id') AS STRING) AS route_id,\n  SAFE_CAST(JSON_VALUE(content, '$.sentido') AS STRING) AS sentido,\n  SAFE_CAST(JSON_VALUE(content, '$.servico') AS STRING) AS servico,\n  SAFE_CAST(JSON_VALUE(content, '$.shape_id') AS STRING) AS shape_id,\n  SAFE_CAST(JSON_VALUE(content, '$.trip_id') AS STRING) AS trip_id\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_viagem_zirix_staging`.`viagem_informada`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_viagem_zirix_staging`.`viagem_informada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.364349Z", "completed_at": "2025-02-20T18:13:40.369312Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.370752Z", "completed_at": "2025-02-20T18:13:40.370761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009130239486694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_viagem_informada_brt", "compiled": true, "compiled_code": "\n\nselect\n    data,\n    safe_cast(id_viagem as string) as id_viagem,\n    timestamp_captura,\n    date(\n        parse_timestamp(\n            '%Y-%m-%d', safe_cast(json_value(content, '$.data_viagem') as string)\n        )\n    ) as data_viagem,\n    datetime(\n        parse_timestamp(\n            '%Y-%m-%d %H:%M:%S',\n            safe_cast(json_value(content, '$.datetime_chegada') as string)\n        ),\n        'America/Sao_Paulo'\n    ) as datetime_chegada,\n    datetime(\n        parse_timestamp(\n            '%Y-%m-%d %H:%M:%S',\n            safe_cast(json_value(content, '$.datetime_partida') as string)\n        ),\n        'America/Sao_Paulo'\n    ) as datetime_partida,\n    datetime(\n        parse_timestamp(\n            '%Y-%m-%d %H:%M:%S',\n            safe_cast(json_value(content, '$.datetime_processamento') as string)\n        ),\n        'America/Sao_Paulo'\n    ) as datetime_processamento,\n    safe_cast(json_value(content, '$.id_veiculo') as string) as id_veiculo,\n    safe_cast(json_value(content, '$.route_id') as string) as route_id,\n    safe_cast(json_value(content, '$.sentido') as string) as sentido,\n    safe_cast(json_value(content, '$.servico') as string) as servico,\n    safe_cast(json_value(content, '$.shape_id') as string) as shape_id,\n    safe_cast(json_value(content, '$.trip_id') as string) as trip_id\nfrom `rj-smtr-staging`.`source_sonda`.`viagem_informada`", "relation_name": "`rj-smtr`.`monitoramento_staging`.`viagem_informada_brt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.375267Z", "completed_at": "2025-02-20T18:13:40.380072Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.381506Z", "completed_at": "2025-02-20T18:13:40.381516Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009301185607910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_viagem_informada_rioonibus", "compiled": true, "compiled_code": "\n\nselect\n    data,\n    safe_cast(id_viagem as string) as id_viagem,\n    timestamp_captura,\n    date(\n        parse_timestamp(\n            '%Y-%m-%d', safe_cast(json_value(content, '$.data_viagem') as string)\n        )\n    ) as data_viagem,\n    datetime(\n        parse_timestamp(\n            '%Y-%m-%dT%H:%M:%SZ',\n            safe_cast(json_value(content, '$.datetime_chegada') as string)\n        ),\n        'America/Sao_Paulo'\n    ) as datetime_chegada,\n    datetime(\n        parse_timestamp(\n            '%Y-%m-%dT%H:%M:%SZ',\n            safe_cast(json_value(content, '$.datetime_partida') as string)\n        ),\n        'America/Sao_Paulo'\n    ) as datetime_partida,\n    datetime(\n        parse_timestamp(\n            '%Y-%m-%dT%H:%M:%SZ',\n            safe_cast(json_value(content, '$.datetime_processamento') as string)\n        ),\n        'America/Sao_Paulo'\n    ) as datetime_processamento,\n    safe_cast(json_value(content, '$.fornecedor') as string) as fornecedor,\n    safe_cast(json_value(content, '$.id_veiculo') as string) as id_veiculo,\n    safe_cast(json_value(content, '$.route_id') as string) as route_id,\n    safe_cast(json_value(content, '$.sentido') as string) as sentido,\n    safe_cast(json_value(content, '$.servico') as string) as servico,\n    safe_cast(json_value(content, '$.shape_id') as string) as shape_id,\n    safe_cast(json_value(content, '$.trip_id') as string) as trip_id\nfrom `rj-smtr-staging`.`source_rioonibus`.`viagem_informada`", "relation_name": "`rj-smtr`.`monitoramento_staging`.`viagem_informada_rioonibus`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.388666Z", "completed_at": "2025-02-20T18:13:40.397139Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.398702Z", "completed_at": "2025-02-20T18:13:40.398714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014057159423828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stop_details", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(stop_id AS STRING) stop_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.stop_details as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.403104Z", "completed_at": "2025-02-20T18:13:40.407904Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.409366Z", "completed_at": "2025-02-20T18:13:40.409375Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009026527404785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stop_times", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(stop_id AS STRING) stop_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.stop_times as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_times`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.414047Z", "completed_at": "2025-02-20T18:13:40.418605Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.420045Z", "completed_at": "2025-02-20T18:13:40.420055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00903773307800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stops", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(stop_id AS STRING) stop_id,\nREPLACE(content, \"None\", '') content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.stops as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stops`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.424690Z", "completed_at": "2025-02-20T18:13:40.429604Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.431022Z", "completed_at": "2025-02-20T18:13:40.431032Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009177446365356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_parametros", "compiled": true, "compiled_code": "\n\nSELECT\n  COALESCE(SAFE_CAST(indicador_licenciado AS BOOL), FALSE) indicador_licenciado,\n  COALESCE(SAFE_CAST(indicador_ar_condicionado AS BOOL), FALSE) indicador_ar_condicionado,\n  COALESCE(SAFE_CAST(indicador_autuacao_ar_condicionado AS BOOL), FALSE) indicador_autuacao_ar_condicionado,\n  COALESCE(SAFE_CAST(indicador_autuacao_seguranca AS BOOL), FALSE) indicador_autuacao_seguranca,\n  COALESCE(SAFE_CAST(indicador_autuacao_limpeza AS BOOL), FALSE) indicador_autuacao_limpeza,\n  COALESCE(SAFE_CAST(indicador_autuacao_equipamento AS BOOL), FALSE) indicador_autuacao_equipamento,\n  COALESCE(SAFE_CAST(indicador_sensor_temperatura AS BOOL), FALSE) indicador_sensor_temperatura,\n  COALESCE(SAFE_CAST(indicador_validador_sbd AS BOOL), FALSE) indicador_validador_sbd,\n  COALESCE(SAFE_CAST(indicador_registro_agente_verao_ar_condicionado AS BOOL), FALSE) indicador_registro_agente_verao_ar_condicionado,\n  SAFE_CAST(status AS STRING) status,\n  SAFE_CAST(subsidio_km AS FLOAT64) subsidio_km,\n  SAFE_CAST(irk AS FLOAT64) irk,\n  SAFE_CAST(data_inicio AS DATE) data_inicio,\n  SAFE_CAST(data_fim AS DATE) data_fim,\n  SAFE_CAST(legislacao AS STRING) legislacao,\n  SAFE_CAST(ordem AS INT64) ordem\nFROM\n  `rj-smtr-staging.dashboard_subsidio_sppo_staging.subsidio_parametros`", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`subsidio_parametros`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.435492Z", "completed_at": "2025-02-20T18:13:40.441572Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.442953Z", "completed_at": "2025-02-20T18:13:40.442962Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010363340377807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_quadro_horario", "compiled": true, "compiled_code": "SELECT\n    SAFE_CAST(data_versao AS DATE) data_versao,\n    SAFE_CAST(servico AS STRING) servico,\n    SAFE_CAST(vista AS STRING) vista,\n    SAFE_CAST(consorcio AS STRING) consorcio,\n    SAFE_CAST(horario_inicio AS STRING) horario_inicio,\n    SAFE_CAST(horario_fim AS STRING) horario_fim,\n    SAFE_CAST(trip_id AS STRING) trip_id,\n    SAFE_CAST(sentido AS STRING) sentido,\n    SAFE_CAST(distancia_planejada AS FLOAT64) distancia_planejada,\n    SAFE_CAST(tipo_dia AS STRING) tipo_dia,\n    SAFE_CAST(distancia_total_planejada AS FLOAT64) distancia_total_planejada\nFROM `rj-smtr-staging.projeto_subsidio_sppo_staging.quadro_horario` AS t", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`subsidio_quadro_horario`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.447368Z", "completed_at": "2025-02-20T18:13:40.451716Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.453162Z", "completed_at": "2025-02-20T18:13:40.453172Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008657455444335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_trips_desaninhada", "compiled": true, "compiled_code": "-- 1. Cria view das trips consideradas no subsidio\nselect\n    trip_id,\n    -- concat(substr(trip_id, 1, 10), substr(trip_id, 12, 4)) as trip_no_direction,\n    route_id,\n    trip_headsign,\n    case\n        when REGEXP_EXTRACT(trip_short_name, r'[A-Z]+') is null\n        then trip_short_name\n        else concat(REGEXP_EXTRACT(trip_short_name, r'[A-Z]+'),\n                REGEXP_EXTRACT(trip_short_name, r'[0-9]+'))\n    end as trip_short_name,\n    shape_id,\n    \"DU\" as variacao_itinerario,\n    DATE(data_versao) data_versao\nfrom\n    `rj-smtr-staging.projeto_subsidio_sppo_staging.trips` t", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`subsidio_trips_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.457863Z", "completed_at": "2025-02-20T18:13:40.462574Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.464027Z", "completed_at": "2025-02-20T18:13:40.464037Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009003639221191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_valor_km_tipo_viagem", "compiled": true, "compiled_code": "\n\nSELECT\n  SAFE_CAST(status AS STRING) status,\n  SAFE_CAST(subsidio_km AS FLOAT64) subsidio_km,\n  SAFE_CAST(irk AS FLOAT64) irk,\n  SAFE_CAST(data_inicio AS DATE) data_inicio,\n  SAFE_CAST(data_fim AS DATE) data_fim,\n  SAFE_CAST(indicador_penalidade_judicial AS BOOL) indicador_penalidade_judicial,\n  SAFE_CAST(legislacao AS STRING) legislacao\nFROM\n  `rj-smtr-staging`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.468393Z", "completed_at": "2025-02-20T18:13:40.473132Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.474583Z", "completed_at": "2025-02-20T18:13:40.474592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008908271789550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.tecnologia_servico", "compiled": true, "compiled_code": "\n\nselect\n    safe_cast(servico as string) as servico,\n    safe_cast(codigo_tecnologia as string) as codigo_tecnologia\nfrom `rj-smtr`.`planejamento_staging`.`tecnologia_servico`", "relation_name": "`rj-smtr`.`planejamento`.`tecnologia_servico`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.478813Z", "completed_at": "2025-02-20T18:13:40.484639Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.486036Z", "completed_at": "2025-02-20T18:13:40.486045Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009907245635986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.trips", "compiled": true, "compiled_code": "/*\n\nQuery para publicar a tabela.\n\nEsse \u00e9 o lugar para:\n    - modificar nomes, ordem e tipos de colunas\n    - dar join com outras tabelas\n    - criar colunas extras (e.g. logs, propor\u00e7\u00f5es, etc.)\n\nQualquer coluna definida aqui deve tamb\u00e9m existir em `table_config.yaml`.\n\n# Al\u00e9m disso, sinta-se \u00e0 vontade para alterar alguns nomes obscuros\n# para algo um pouco mais expl\u00edcito.\n\nTIPOS:\n    - Para modificar tipos de colunas, basta substituir STRING por outro tipo v\u00e1lido.\n    - Exemplo: `SAFE_CAST(column_name AS NUMERIC) column_name`\n    - Mais detalhes: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n\n*/\n\nSELECT\nSAFE_CAST(trip_id AS STRING) trip_id,\nREPLACE(content,\"None\",\"\") content,\nSAFE_CAST(data_versao AS DATE) data_versao\nfrom rj-smtr-staging.br_rj_riodejaneiro_sigmob_staging.trips as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`trips`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.490507Z", "completed_at": "2025-02-20T18:13:40.495248Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.496707Z", "completed_at": "2025-02-20T18:13:40.496717Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00899815559387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.valor_km_tipo_viagem", "compiled": true, "compiled_code": "\n\nselect\n    safe_cast(status as string) as status,\n    nullif(safe_cast(tecnologia as string), '') as tecnologia,\n    safe_cast(subsidio_km as float64) as subsidio_km,\n    safe_cast(irk as float64) as irk,\n    safe_cast(data_inicio as date) as data_inicio,\n    safe_cast(data_fim as date) as data_fim,\n    safe_cast(indicador_penalidade_judicial as bool) as indicador_penalidade_judicial,\n    safe_cast(legislacao as string) as legislacao\nfrom `rj-smtr`.`subsidio_staging`.`valor_km_tipo_viagem`", "relation_name": "`rj-smtr`.`subsidio`.`valor_km_tipo_viagem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.500953Z", "completed_at": "2025-02-20T18:13:40.506057Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.507595Z", "completed_at": "2025-02-20T18:13:40.507604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009322643280029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.valor_tipo_penalidade", "compiled": true, "compiled_code": "\n\n-- DEC RIO N. 51940/2023 e 53856/2023\nwith\n    penalidade as (\n        select\n            0 as perc_km_inferior,\n            40 as perc_km_superior,\n            \"Grave\" as tipo_penalidade,\n            1126.55 as valor,\n            date(\"2023-01-16\") as data_inicio,\n            date(\"2024-12-31\") as data_fim\n        union all\n        select\n            0 as perc_km_inferior,\n            40 as perc_km_superior,\n            \"Grave\" as tipo_penalidade,\n            1235.31 as valor,\n            date(\"2025-01-01\") as data_inicio,\n            date(\"2025-12-31\") as data_fim\n        union all\n        select\n            40 as perc_km_inferior,\n            60 as perc_km_superior,\n            \"M\u00e9dia\" as tipo_penalidade,\n            563.28 as valor,\n            date(\"2023-01-16\") as data_inicio,\n            date(\"2024-12-31\") as data_fim\n        union all\n        select\n            40 as perc_km_inferior,\n            60 as perc_km_superior,\n            \"M\u00e9dia\" as tipo_penalidade,\n            617.64 as valor,\n            date(\"2025-01-01\") as data_inicio,\n            date(\"2025-12-31\") as data_fim\n        union all\n        select\n            60 as perc_km_inferior,\n            80 as perc_km_superior,\n            \"Nula\" as tipo_penalidade,\n            0 as valor,\n            date(\"2023-01-16\") as data_inicio,\n            date(\"2025-12-31\") as data_fim\n        union all\n        select\n            80 as perc_km_inferior,\n            100 as perc_km_superior,\n            null as tipo_penalidade,\n            null as valor,\n            date(\"2023-01-16\") as data_inicio,\n            date(\"2025-12-31\") as data_fim\n\n    )\nselect *\nfrom penalidade", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.512145Z", "completed_at": "2025-02-20T18:13:40.517003Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.518548Z", "completed_at": "2025-02-20T18:13:40.518558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009186744689941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.agency_desaninhada", "compiled": true, "compiled_code": "SELECT\n  agency_id,\n  JSON_VALUE(content, \"$.agency_name\") agency_name,\n  JSON_VALUE(content, \"$.agency_url\") agency_url,\n  JSON_VALUE(content, \"$.agency_timezone\") agency_timezone,\n  JSON_VALUE(content, \"$.agency_lang\") agency_lang,\n  JSON_VALUE(content, \"$.agency_phone\") agency_phone,\n  DATE(data_versao) data_versao\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`agency`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`agency_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.522902Z", "completed_at": "2025-02-20T18:13:40.531251Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.532679Z", "completed_at": "2025-02-20T18:13:40.532689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012586355209350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.autuacao", "compiled": true, "compiled_code": "\n\nWITH citran AS (\n    SELECT\n        data,\n        id_auto_infracao,\n        DATETIME(concat(data,' ',hora,':00')) AS datetime_autuacao,\n        data_limite_defesa_previa,\n        data_limite_recurso,\n        situacao_atual AS descricao_situacao_autuacao,\n        IF(status_infracao != \"\", status_infracao, NULL) AS status_infracao,\n        IF(codigo_enquadramento != \"\", codigo_enquadramento, NULL) AS codigo_enquadramento,\n        IF(tipificacao_resumida != \"\", tipificacao_resumida, NULL) AS tipificacao_resumida,\n        IF(pontuacao != \"\", pontuacao, NULL) AS pontuacao,\n        NULL AS gravidade,\n        NULL AS amparo_legal,\n        IF(tipo_veiculo != \"\", tipo_veiculo, NULL) AS tipo_veiculo,\n        IF(descricao_veiculo != \"\", descricao_veiculo, NULL) AS descricao_veiculo,\n        NULL AS placa_veiculo,\n        NULL AS ano_fabricacao_veiculo,\n        NULL AS ano_modelo_veiculo,\n        NULL AS cor_veiculo,\n        IF(especie_veiculo != \"\", especie_veiculo, NULL) AS especie_veiculo,\n        NULL AS uf_infrator,\n        NULL AS uf_principal_condutor,\n        IF(uf_proprietario != \"\", uf_proprietario, NULL) AS uf_proprietario,\n        IF(cep_proprietario != \"\", cep_proprietario, NULL) AS cep_proprietario,\n        valor_infracao / 100 AS valor_infracao,\n        valor_pago  / 100 AS valor_pago,\n        data_pagamento,\n        \"260010\" AS id_autuador,\n        IF(descricao_autuador != \"\", descricao_autuador, NULL) AS descricao_autuador,\n        \"6001\" AS id_municipio_autuacao,\n        \"RIO DE JANEIRO\" AS descricao_municipio,\n        \"RJ\" AS uf_autuacao,\n        NULL AS cep_autuacao, -- n\u00e3o padronizado na citran\n        NULL AS tile_autuacao,\n        IF(processo_defesa_autuacao != \"00000000\" AND processo_defesa_autuacao != \"\" , processo_defesa_autuacao, NULL) AS processo_defesa_autuacao,\n        IF(recurso_penalidade_multa != \"00000000\" AND recurso_penalidade_multa != \"\" , recurso_penalidade_multa, NULL) AS recurso_penalidade_multa,\n        IF(processo_troca_real_infrator != \"00000000\" AND processo_troca_real_infrator != \"\" , processo_troca_real_infrator, NULL) AS processo_troca_real_infrator,\n        FALSE AS status_sne,\n        \"CITRAN\" AS fonte\n    FROM `rj-smtr`.`transito_staging`.`autuacao_citran`\n    \n        WHERE\n            data BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n    \n)\n\nSELECT\n    data,\n    TO_HEX(SHA256(CONCAT(GENERATE_UUID(), id_auto_infracao))) AS id_autuacao,\n    id_auto_infracao,\n    datetime_autuacao,\n    data_limite_defesa_previa,\n    data_limite_recurso,\n    descricao_situacao_autuacao,\n    status_infracao,\n    codigo_enquadramento,\n    tipificacao_resumida,\n    pontuacao,\n    gravidade,\n    amparo_legal,\n    tipo_veiculo,\n    descricao_veiculo,\n    placa_veiculo,\n    ano_fabricacao_veiculo,\n    ano_modelo_veiculo,\n    cor_veiculo,\n    especie_veiculo,\n    uf_infrator,\n    uf_principal_condutor,\n    uf_proprietario,\n    cep_proprietario,\n    valor_infracao,\n    valor_pago,\n    data_pagamento,\n    id_autuador,\n    descricao_autuador,\n    id_municipio_autuacao,\n    descricao_municipio,\n    uf_autuacao,\n    cep_autuacao,\n    tile_autuacao,\n    processo_defesa_autuacao,\n    recurso_penalidade_multa,\n    processo_troca_real_infrator,\n    status_sne,\n    fonte\nFROM\n    citran", "relation_name": "`rj-smtr`.`transito`.`autuacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.537164Z", "completed_at": "2025-02-20T18:13:40.541782Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.543400Z", "completed_at": "2025-02-20T18:13:40.543409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008984565734863281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.brt_registros_desaninhada", "compiled": true, "compiled_code": "SELECT\ndata,\nhora,\nid_veiculo,\ntimestamp_gps,\ntimestamp_captura,\nSAFE_CAST(json_value(content,\"$.latitude\") AS FLOAT64) latitude,\nSAFE_CAST(json_value(content,\"$.longitude\") AS FLOAT64) longitude,\njson_value(content,\"$.servico\") servico,\njson_value(content,\"$.sentido\") sentido,\nSAFE_CAST(json_value(content,\"$.velocidade\") AS INT64) velocidade,\nfrom `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_registros` as t", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_registros_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.548570Z", "completed_at": "2025-02-20T18:13:40.553336Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:40.555033Z", "completed_at": "2025-02-20T18:13:40.555045Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009974002838134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.calendar_desaninhada", "compiled": true, "compiled_code": "SELECT\n  service_id,\n  JSON_VALUE(content, \"$.monday\") monday,\n  JSON_VALUE(content, \"$.tuesday\") tuesday,\n  JSON_VALUE(content, \"$.wednesday\") wednesday,\n  JSON_VALUE(content, \"$.thursday\") thursday,\n  JSON_VALUE(content, \"$.friday\") friday,\n  JSON_VALUE(content, \"$.saturday\") saturday,\n  JSON_VALUE(content, \"$.sunday\") sunday,\n  JSON_VALUE(content, \"$.start_date\") start_date,\n  JSON_VALUE(content, \"$.end_date\") end_date,\n  DATE(data_versao) data_versao\n\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`calendar`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`calendar_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:40.559744Z", "completed_at": "2025-02-20T18:13:42.400782Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:42.402801Z", "completed_at": "2025-02-20T18:13:42.402814Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8462557792663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.agency_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(a.data_versao AS DATE) feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(a.agency_id AS STRING) agency_id,\n  SAFE_CAST(JSON_VALUE(a.content, '$.agency_name') AS STRING) agency_name,\n  SAFE_CAST(JSON_VALUE(a.content, '$.agency_url') AS STRING) agency_url,\n  SAFE_CAST(JSON_VALUE(a.content, '$.agency_timezone') AS STRING) agency_timezone,\n  SAFE_CAST(JSON_VALUE(a.content, '$.agency_lang') AS STRING) agency_lang,\n  '' AS versao_modelo\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`agency` a\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  a.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    a.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`agency`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:42.410314Z", "completed_at": "2025-02-20T18:13:44.220061Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:44.224507Z", "completed_at": "2025-02-20T18:13:44.224532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8204350471496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.calendar_dates_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(cd.data_versao AS DATE) feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(cd.service_id AS STRING) service_id,\n  PARSE_DATE('%Y%m%d', SAFE_CAST(cd.DATE AS STRING)) DATE,\n  SAFE_CAST(JSON_VALUE(cd.content, '$.exception_type') AS STRING) exception_type,\n  '' AS versao_modelo\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`calendar_dates` cd\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  cd.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    cd.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`calendar_dates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:44.236395Z", "completed_at": "2025-02-20T18:13:45.911262Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:45.912700Z", "completed_at": "2025-02-20T18:13:45.912711Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.681225299835205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.calendar_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(c.data_versao AS DATE) feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(c.service_id AS STRING) service_id,\n  SAFE_CAST(JSON_VALUE(c.content, '$.monday') AS STRING) monday,\n  SAFE_CAST(JSON_VALUE(c.content, '$.tuesday') AS STRING) tuesday,\n  SAFE_CAST(JSON_VALUE(c.content, '$.wednesday') AS STRING) wednesday,\n  SAFE_CAST(JSON_VALUE(c.content, '$.thursday') AS STRING) thursday,\n  SAFE_CAST(JSON_VALUE(c.content, '$.friday') AS STRING) friday,\n  SAFE_CAST(JSON_VALUE(c.content, '$.saturday') AS STRING) saturday,\n  SAFE_CAST(JSON_VALUE(c.content, '$.sunday') AS STRING) sunday,\n  PARSE_DATE('%Y%m%d', SAFE_CAST(JSON_VALUE(c.content, '$.start_date') AS STRING)) start_date,\n  PARSE_DATE('%Y%m%d', SAFE_CAST(JSON_VALUE(c.content, '$.end_date') AS STRING)) end_date,\n  '' AS versao_modelo\n FROM `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`calendar` c\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  c.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    c.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`calendar`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:45.916672Z", "completed_at": "2025-02-20T18:13:47.657387Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:47.658896Z", "completed_at": "2025-02-20T18:13:47.658906Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7446894645690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.fare_attributes_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(fa.data_versao AS DATE) feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(fa.fare_id AS STRING) fare_id,\n  SAFE_CAST(JSON_VALUE(fa.content, '$.price') AS FLOAT64) price,\n  SAFE_CAST(JSON_VALUE(fa.content, '$.currency_type') AS STRING) currency_type,\n  SAFE_CAST(JSON_VALUE(fa.content, '$.payment_method') AS STRING) payment_method,\n  SAFE_CAST(JSON_VALUE(fa.content, '$.transfers') AS STRING) transfers,\n  SAFE_CAST(JSON_VALUE(fa.content, '$.agency_id') AS STRING) agency_id,\n  SAFE_CAST(JSON_VALUE(fa.content, '$.transfer_duration') AS INT64) transfer_duration,\n  '' AS versao_modelo\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`fare_attributes` fa\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  fa.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    fa.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`fare_attributes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:47.662959Z", "completed_at": "2025-02-20T18:13:49.597333Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:49.602987Z", "completed_at": "2025-02-20T18:13:49.603020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9457392692565918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.fare_rules_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(fr.data_versao AS DATE) feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(fr.fare_id AS STRING) fare_id,\n  SAFE_CAST(fr.route_id AS STRING) route_id,\n  SAFE_CAST(JSON_VALUE(fr.content, '$.origin_id') AS STRING) origin_id,\n  SAFE_CAST(JSON_VALUE(fr.content, '$.destination_id') AS STRING) destination_id,\n  SAFE_CAST(JSON_VALUE(fr.content, '$.contains_id') AS STRING) contains_id,\n  '' AS versao_modelo\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`fare_rules` fr\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  fr.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    fr.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`fare_rules`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:49.620112Z", "completed_at": "2025-02-20T18:13:51.570143Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:51.571447Z", "completed_at": "2025-02-20T18:13:51.571456Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9586174488067627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.frequencies_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(f.data_versao AS DATE) as feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(f.trip_id AS STRING) trip_id,\n  SAFE_CAST(f.start_time AS STRING) start_time,\n  SAFE_CAST(JSON_VALUE(f.content, '$.end_time') AS STRING) end_time,\n  SAFE_CAST(JSON_VALUE(f.content, '$.headway_secs') AS INT64) headway_secs,\n  SAFE_CAST(JSON_VALUE(f.content, '$.exact_times') AS STRING) exact_times,\n  '' AS versao_modelo\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`frequencies` f\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  f.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    f.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`frequencies`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:51.575582Z", "completed_at": "2025-02-20T18:13:51.602667Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:51.603995Z", "completed_at": "2025-02-20T18:13:51.604004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03122115135192871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_servico_faixa_horaria", "compiled": true, "compiled_code": "\n\n\n  \n    \n  \n  \n\n\n\nWITH\n  dados AS (\n  SELECT\n    SAFE_CAST(data_versao AS DATE) AS data_versao,\n    SAFE_CAST(tipo_os AS STRING) AS tipo_os,\n    SAFE_CAST(servico AS STRING) AS servico,\n    SAFE_CAST(JSON_VALUE(content, \"$.consorcio\") AS STRING) AS consorcio,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_00h_e_03h_dias_uteis\") AS STRING) AS partidas_entre_00h_e_03h_dias_uteis,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_00h_e_03h_dias_uteis\") AS STRING) AS quilometragem_entre_00h_e_03h_dias_uteis,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_03h_e_12h_dias_uteis\") AS STRING) AS partidas_entre_03h_e_12h_dias_uteis,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_03h_e_12h_dias_uteis\") AS STRING) AS quilometragem_entre_03h_e_12h_dias_uteis,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_12h_e_21h_dias_uteis\") AS STRING) AS partidas_entre_12h_e_21h_dias_uteis,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_12h_e_21h_dias_uteis\") AS STRING) AS quilometragem_entre_12h_e_21h_dias_uteis,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_21h_e_24h_dias_uteis\") AS STRING) AS partidas_entre_21h_e_24h_dias_uteis,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_21h_e_24h_dias_uteis\") AS STRING) AS quilometragem_entre_21h_e_24h_dias_uteis,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_24h_e_03h_dia_seguinte_dias_uteis\") AS STRING) AS partidas_entre_24h_e_03h_dia_seguinte_dias_uteis,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_24h_e_03h_dia_seguinte_dias_uteis\") AS STRING) AS quilometragem_entre_24h_e_03h_dia_seguinte_dias_uteis,\n    \n    \n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_00h_e_03h_sabado\") AS STRING) AS partidas_entre_00h_e_03h_sabado,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_00h_e_03h_sabado\") AS STRING) AS quilometragem_entre_00h_e_03h_sabado,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_03h_e_12h_sabado\") AS STRING) AS partidas_entre_03h_e_12h_sabado,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_03h_e_12h_sabado\") AS STRING) AS quilometragem_entre_03h_e_12h_sabado,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_12h_e_21h_sabado\") AS STRING) AS partidas_entre_12h_e_21h_sabado,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_12h_e_21h_sabado\") AS STRING) AS quilometragem_entre_12h_e_21h_sabado,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_21h_e_24h_sabado\") AS STRING) AS partidas_entre_21h_e_24h_sabado,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_21h_e_24h_sabado\") AS STRING) AS quilometragem_entre_21h_e_24h_sabado,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_24h_e_03h_dia_seguinte_sabado\") AS STRING) AS partidas_entre_24h_e_03h_dia_seguinte_sabado,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_24h_e_03h_dia_seguinte_sabado\") AS STRING) AS quilometragem_entre_24h_e_03h_dia_seguinte_sabado,\n    \n    \n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_00h_e_03h_domingo\") AS STRING) AS partidas_entre_00h_e_03h_domingo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_00h_e_03h_domingo\") AS STRING) AS quilometragem_entre_00h_e_03h_domingo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_03h_e_12h_domingo\") AS STRING) AS partidas_entre_03h_e_12h_domingo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_03h_e_12h_domingo\") AS STRING) AS quilometragem_entre_03h_e_12h_domingo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_12h_e_21h_domingo\") AS STRING) AS partidas_entre_12h_e_21h_domingo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_12h_e_21h_domingo\") AS STRING) AS quilometragem_entre_12h_e_21h_domingo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_21h_e_24h_domingo\") AS STRING) AS partidas_entre_21h_e_24h_domingo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_21h_e_24h_domingo\") AS STRING) AS quilometragem_entre_21h_e_24h_domingo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_24h_e_03h_dia_seguinte_domingo\") AS STRING) AS partidas_entre_24h_e_03h_dia_seguinte_domingo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_24h_e_03h_dia_seguinte_domingo\") AS STRING) AS quilometragem_entre_24h_e_03h_dia_seguinte_domingo,\n    \n    \n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_00h_e_03h_ponto_facultativo\") AS STRING) AS partidas_entre_00h_e_03h_ponto_facultativo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_00h_e_03h_ponto_facultativo\") AS STRING) AS quilometragem_entre_00h_e_03h_ponto_facultativo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_03h_e_12h_ponto_facultativo\") AS STRING) AS partidas_entre_03h_e_12h_ponto_facultativo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_03h_e_12h_ponto_facultativo\") AS STRING) AS quilometragem_entre_03h_e_12h_ponto_facultativo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_12h_e_21h_ponto_facultativo\") AS STRING) AS partidas_entre_12h_e_21h_ponto_facultativo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_12h_e_21h_ponto_facultativo\") AS STRING) AS quilometragem_entre_12h_e_21h_ponto_facultativo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_21h_e_24h_ponto_facultativo\") AS STRING) AS partidas_entre_21h_e_24h_ponto_facultativo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_21h_e_24h_ponto_facultativo\") AS STRING) AS quilometragem_entre_21h_e_24h_ponto_facultativo,\n    \n    \n    \n    SAFE_CAST(JSON_VALUE(content, \"$.partidas_entre_24h_e_03h_dia_seguinte_ponto_facultativo\") AS STRING) AS partidas_entre_24h_e_03h_dia_seguinte_ponto_facultativo,\n    SAFE_CAST(JSON_VALUE(content, \"$.quilometragem_entre_24h_e_03h_dia_seguinte_ponto_facultativo\") AS STRING) AS quilometragem_entre_24h_e_03h_dia_seguinte_ponto_facultativo,\n    \n    \n    \n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`ordem_servico_faixa_horaria`\n  WHERE\n    data_versao = '2024-05-03'\n  ),\n  dados_agrupados AS (\n  SELECT\n    data_versao,\n    tipo_os,\n    servico,\n    consorcio,\n    CASE\n      WHEN column_name LIKE '%dias_uteis%' THEN 'Dia \u00datil'\n      WHEN column_name LIKE '%sabado%' THEN 'Sabado'\n      WHEN column_name LIKE '%domingo%' THEN 'Domingo'\n      WHEN column_name LIKE '%ponto_facultativo%' THEN 'Ponto Facultativo'\n    END AS tipo_dia,\n    CASE\n      \n      \n      WHEN column_name LIKE '%00h_e_03h%' THEN '00:00:00'\n      \n      \n      \n      WHEN column_name LIKE '%03h_e_12h%' THEN '03:00:00'\n      \n      \n      \n      WHEN column_name LIKE '%12h_e_21h%' THEN '12:00:00'\n      \n      \n      \n      WHEN column_name LIKE '%21h_e_24h%' THEN '21:00:00'\n      \n      \n      \n      WHEN column_name LIKE '%24h_e_03h_dia_seguinte%' THEN '24:00:00'\n      \n      \n    END AS faixa_horaria_inicio,\n    CASE\n      \n      \n      WHEN column_name LIKE '%00h_e_03h%' THEN '02:59:59'\n      \n      \n      \n      WHEN column_name LIKE '%03h_e_12h%' THEN '11:59:59'\n      \n      \n      \n      WHEN column_name LIKE '%12h_e_21h%' THEN '20:59:59'\n      \n      \n      \n      WHEN column_name LIKE '%21h_e_24h%' THEN '23:59:59'\n      \n      \n      \n      WHEN column_name LIKE '%24h_e_03h_dia_seguinte%' THEN '26:59:59'\n      \n      \n    END AS faixa_horaria_fim,\n    SUM(CASE\n        WHEN column_name LIKE '%partidas%' THEN SAFE_CAST(value AS INT64)\n        ELSE 0\n    END) AS partidas,\n    SUM(CASE\n        WHEN column_name LIKE '%quilometragem%' THEN SAFE_CAST(value AS FLOAT64)\n        ELSE 0\n    END) AS quilometragem\n  FROM dados\n  UNPIVOT (\n    value FOR column_name IN (\n      \n      \n      \n      partidas_entre_00h_e_03h_dias_uteis,\n      quilometragem_entre_00h_e_03h_dias_uteis,\n      \n      \n      \n      partidas_entre_03h_e_12h_dias_uteis,\n      quilometragem_entre_03h_e_12h_dias_uteis,\n      \n      \n      \n      partidas_entre_12h_e_21h_dias_uteis,\n      quilometragem_entre_12h_e_21h_dias_uteis,\n      \n      \n      \n      partidas_entre_21h_e_24h_dias_uteis,\n      quilometragem_entre_21h_e_24h_dias_uteis,\n      \n      \n      \n      partidas_entre_24h_e_03h_dia_seguinte_dias_uteis,\n      quilometragem_entre_24h_e_03h_dia_seguinte_dias_uteis\n      \n      \n      ,\n      \n      \n      \n      partidas_entre_00h_e_03h_sabado,\n      quilometragem_entre_00h_e_03h_sabado,\n      \n      \n      \n      partidas_entre_03h_e_12h_sabado,\n      quilometragem_entre_03h_e_12h_sabado,\n      \n      \n      \n      partidas_entre_12h_e_21h_sabado,\n      quilometragem_entre_12h_e_21h_sabado,\n      \n      \n      \n      partidas_entre_21h_e_24h_sabado,\n      quilometragem_entre_21h_e_24h_sabado,\n      \n      \n      \n      partidas_entre_24h_e_03h_dia_seguinte_sabado,\n      quilometragem_entre_24h_e_03h_dia_seguinte_sabado\n      \n      \n      ,\n      \n      \n      \n      partidas_entre_00h_e_03h_domingo,\n      quilometragem_entre_00h_e_03h_domingo,\n      \n      \n      \n      partidas_entre_03h_e_12h_domingo,\n      quilometragem_entre_03h_e_12h_domingo,\n      \n      \n      \n      partidas_entre_12h_e_21h_domingo,\n      quilometragem_entre_12h_e_21h_domingo,\n      \n      \n      \n      partidas_entre_21h_e_24h_domingo,\n      quilometragem_entre_21h_e_24h_domingo,\n      \n      \n      \n      partidas_entre_24h_e_03h_dia_seguinte_domingo,\n      quilometragem_entre_24h_e_03h_dia_seguinte_domingo\n      \n      \n      ,\n      \n      \n      \n      partidas_entre_00h_e_03h_ponto_facultativo,\n      quilometragem_entre_00h_e_03h_ponto_facultativo,\n      \n      \n      \n      partidas_entre_03h_e_12h_ponto_facultativo,\n      quilometragem_entre_03h_e_12h_ponto_facultativo,\n      \n      \n      \n      partidas_entre_12h_e_21h_ponto_facultativo,\n      quilometragem_entre_12h_e_21h_ponto_facultativo,\n      \n      \n      \n      partidas_entre_21h_e_24h_ponto_facultativo,\n      quilometragem_entre_21h_e_24h_ponto_facultativo,\n      \n      \n      \n      partidas_entre_24h_e_03h_dia_seguinte_ponto_facultativo,\n      quilometragem_entre_24h_e_03h_dia_seguinte_ponto_facultativo\n      \n      \n      \n      \n    )\n  )\n  GROUP BY 1, 2, 3, 4, 5, 6, 7\n)\nSELECT\n  fi.feed_version,\n  fi.feed_start_date,\n  fi.feed_end_date,\n  d.* EXCEPT(data_versao),\n  '' AS versao_modelo\nFROM\n  dados_agrupados AS d\nLEFT JOIN\n  `rj-smtr`.`gtfs`.`feed_info` AS fi\nON\n  d.data_versao = fi.feed_start_date\nWHERE\n  d.data_versao = '2024-05-03'\n  AND fi.feed_start_date = '2024-05-03'\n", "relation_name": "`rj-smtr`.`planejamento`.`ordem_servico_faixa_horaria`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:51.607938Z", "completed_at": "2025-02-20T18:13:51.614971Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:51.616296Z", "completed_at": "2025-02-20T18:13:51.616304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010841608047485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_servico_gtfs", "compiled": true, "compiled_code": "\n\nWITH ordem_servico AS (\n  SELECT\n    fi.feed_version,\n    SAFE_CAST(os.data_versao AS DATE) as feed_start_date,\n    fi.feed_end_date,\n    SAFE_CAST(tipo_os AS STRING) tipo_os,\n    SAFE_CAST(os.servico AS STRING) servico,\n    SAFE_CAST(JSON_VALUE(os.content, '$.vista') AS STRING) vista,\n    SAFE_CAST(JSON_VALUE(os.content, '$.consorcio') AS STRING) consorcio,\n    SAFE_CAST(JSON_VALUE(os.content, '$.horario_inicio') AS STRING) horario_inicio,\n    SAFE_CAST(JSON_VALUE(os.content, '$.horario_fim') AS STRING) horario_fim,\n    SAFE_CAST(JSON_VALUE(os.content, '$.extensao_ida') AS FLOAT64) extensao_ida,\n    SAFE_CAST(JSON_VALUE(os.content, '$.extensao_volta') AS FLOAT64) extensao_volta,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_ida_du') AS FLOAT64) AS INT64) partidas_ida_du,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_volta_du') AS FLOAT64) AS INT64) partidas_volta_du,\n    SAFE_CAST(JSON_VALUE(os.content, '$.viagens_du') AS FLOAT64) viagens_du,\n    SAFE_CAST(JSON_VALUE(os.content, '$.km_dia_util') AS FLOAT64) km_du,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_ida_pf') AS FLOAT64) AS INT64) partidas_ida_pf,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_volta_pf') AS FLOAT64) AS INT64) partidas_volta_pf,\n    SAFE_CAST(JSON_VALUE(os.content, '$.viagens_pf') AS FLOAT64) viagens_pf,\n    SAFE_CAST(JSON_VALUE(os.content, '$.km_pf') AS FLOAT64) km_pf,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_ida_sabado') AS FLOAT64) AS INT64) partidas_ida_sabado,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_volta_sabado') AS FLOAT64) AS INT64) partidas_volta_sabado,\n    SAFE_CAST(JSON_VALUE(os.content, '$.viagens_sabado') AS FLOAT64) viagens_sabado,\n    SAFE_CAST(JSON_VALUE(os.content, '$.km_sabado') AS FLOAT64) km_sabado,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_ida_domingo') AS FLOAT64) AS INT64) partidas_ida_domingo,\n    SAFE_CAST(SAFE_CAST(JSON_VALUE(os.content, '$.partidas_volta_domingo') AS FLOAT64) AS INT64) partidas_volta_domingo,\n    SAFE_CAST(JSON_VALUE(os.content, '$.viagens_domingo') AS FLOAT64) viagens_domingo,\n    SAFE_CAST(JSON_VALUE(os.content, '$.km_domingo') AS FLOAT64) km_domingo,\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`ordem_servico` os\n  JOIN\n    `rj-smtr`.`gtfs`.`feed_info` fi\n  ON\n    os.data_versao = CAST(fi.feed_start_date AS STRING)\n  WHERE\n      os.data_versao = '2024-05-03'\n      AND fi.feed_start_date = '2024-05-03'\n)\nSELECT *,\n  '' as versao_modelo\nFROM ordem_servico UNPIVOT (\n    (\n      partidas_ida,\n      partidas_volta,\n      viagens_planejadas,\n      distancia_total_planejada\n    ) FOR tipo_dia IN (\n      (\n        partidas_ida_du,\n        partidas_volta_du,\n        viagens_du,\n        km_du\n      ) AS 'Dia \u00datil',\n      (\n        partidas_ida_pf,\n        partidas_volta_pf,\n        viagens_pf,\n        km_pf\n      ) AS 'Ponto Facultativo',\n      (\n        partidas_ida_sabado,\n        partidas_volta_sabado,\n        viagens_sabado,\n        km_sabado\n      ) AS 'Sabado',\n      (\n        partidas_ida_domingo,\n        partidas_volta_domingo,\n        viagens_domingo,\n        km_domingo\n      ) AS 'Domingo'\n    )\n  )", "relation_name": "`rj-smtr`.`gtfs`.`ordem_servico`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:51.620816Z", "completed_at": "2025-02-20T18:13:51.627481Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:51.628849Z", "completed_at": "2025-02-20T18:13:51.628859Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010820388793945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_servico_trajeto_alternativo_gtfs", "compiled": true, "compiled_code": "\n\nWITH ordem_servico_trajeto_alternativo AS (\n  SELECT\n    fi.feed_version,\n    SAFE_CAST(o.data_versao AS DATE) feed_start_date,\n    fi.feed_end_date,\n    SAFE_CAST(tipo_os AS STRING) tipo_os,\n    SAFE_CAST(evento AS STRING) evento,\n    SAFE_CAST(o.servico AS STRING) servico,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.ativacao\") AS STRING) ativacao,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.consorcio\") AS STRING) consorcio,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.descricao\") AS STRING) descricao,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.extensao_ida\") AS FLOAT64) extensao_ida,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.extensao_volta\") AS FLOAT64) extensao_volta,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.horario_inicio\") AS STRING) horario_inicio,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.horario_fim\") AS STRING) horario_fim,\n    SAFE_CAST(JSON_VALUE(o.content, \"$.vista\") AS STRING) vista,\n  FROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`ordem_servico_trajeto_alternativo` O\n  LEFT JOIN\n    `rj-smtr`.`gtfs`.`feed_info` fi\n  ON\n    o.data_versao = CAST(fi.feed_start_date AS STRING)\n  WHERE\n      o.data_versao = \"2024-05-03\"\n      AND fi.feed_start_date = \"2024-05-03\"\n)\n\nSELECT\n  feed_version,\n  feed_start_date,\n  feed_end_date,\n  tipo_os,\n  servico,\n  consorcio,\n  vista,\n  ativacao,\n  descricao,\n  CASE\n    WHEN evento LIKE '[%]' THEN LOWER(evento)\n    ELSE REGEXP_REPLACE(LOWER(evento), r\"([a-z\u00e1\u00e9\u00ed\u00f3\u00fa\u00f1\u00fc\u00e7]+)\", r\"[\\1]\")\n  END AS evento,\n  extensao_ida/1000 AS extensao_ida,\n  extensao_volta/1000 AS extensao_volta,\n  horario_inicio AS inicio_periodo,\n  horario_fim AS fim_periodo,\n  '' AS versao_modelo\nFROM\n  ordem_servico_trajeto_alternativo", "relation_name": "`rj-smtr`.`gtfs`.`ordem_servico_trajeto_alternativo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:51.632915Z", "completed_at": "2025-02-20T18:13:53.390374Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:53.394128Z", "completed_at": "2025-02-20T18:13:53.394161Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7651252746582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.routes_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(r.data_versao AS DATE) feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(r.route_id AS STRING) route_id,\n  SAFE_CAST(JSON_VALUE(r.content, '$.agency_id') AS STRING) agency_id,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_short_name') AS STRING) route_short_name,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_long_name') AS STRING) route_long_name,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_desc') AS STRING) route_desc,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_type') AS STRING) route_type,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_url') AS STRING) route_url,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_color') AS STRING) route_color,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_text_color') AS STRING) route_text_color,\n  SAFE_CAST(JSON_VALUE(r.content, '$.route_sort_order') AS INT64) route_sort_order,\n  SAFE_CAST(JSON_VALUE(r.content, '$.continuous_pickup') AS STRING) continuous_pickup,\n  SAFE_CAST(JSON_VALUE(r.content, '$.continuous_drop_off') AS STRING) continuous_drop_off,\n  SAFE_CAST(JSON_VALUE(r.content, '$.network_id') AS STRING) network_id,\n  '' AS versao_modelo\n FROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`routes` r\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  r.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    r.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`routes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:53.403544Z", "completed_at": "2025-02-20T18:13:55.231260Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:55.237450Z", "completed_at": "2025-02-20T18:13:55.237486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8421494960784912, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.shapes_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n  fi.feed_version,\n  SAFE_CAST(s.data_versao AS DATE) as feed_start_date,\n  fi.feed_end_date,\n  SAFE_CAST(s.shape_id AS STRING) shape_id,\n  SAFE_CAST(JSON_VALUE(s.content, '$.shape_pt_lat') AS FLOAT64) shape_pt_lat,\n  SAFE_CAST(JSON_VALUE(s.content, '$.shape_pt_lon') AS FLOAT64) shape_pt_lon,\n  SAFE_CAST(s.shape_pt_sequence AS INT64) shape_pt_sequence,\n  SAFE_CAST(JSON_VALUE(s.content, '$.shape_dist_traveled') AS FLOAT64) shape_dist_traveled,\n  '' AS versao_modelo\nFROM\n  `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`shapes` s\nJOIN\n  `rj-smtr`.`gtfs`.`feed_info` fi\nON\n  s.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n    s.data_versao IN ('2024-04-15', '2024-05-03')\n    AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`shapes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:55.255930Z", "completed_at": "2025-02-20T18:13:57.280811Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:57.286782Z", "completed_at": "2025-02-20T18:13:57.286818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.04282546043396, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stop_times_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n    fi.feed_version,\n    SAFE_CAST(st.data_versao AS DATE) as feed_start_date,\n    fi.feed_end_date,\n    SAFE_CAST(st.trip_id AS STRING) trip_id,\n    SAFE_CAST(JSON_VALUE(st.content, '$.arrival_time') AS STRING) arrival_time,\n    SAFE_CAST(JSON_VALUE(st.content, '$.departure_time') AS DATETIME) departure_time,\n    SAFE_CAST(JSON_VALUE(st.content, '$.stop_id') AS STRING) stop_id,\n    SAFE_CAST(st.stop_sequence AS INT64) stop_sequence,\n    SAFE_CAST(JSON_VALUE(st.content, '$.stop_headsign') AS STRING) stop_headsign,\n    SAFE_CAST(JSON_VALUE(st.content, '$.pickup_type') AS STRING) pickup_type,\n    SAFE_CAST(JSON_VALUE(st.content, '$.drop_off_type') AS STRING) drop_off_type,\n    SAFE_CAST(JSON_VALUE(st.content, '$.continuous_pickup') AS STRING) continuous_pickup,\n    SAFE_CAST(JSON_VALUE(st.content, '$.continuous_drop_off') AS STRING) continuous_drop_off,\n    SAFE_CAST(JSON_VALUE(st.content, '$.shape_dist_traveled') AS FLOAT64) shape_dist_traveled,\n    SAFE_CAST(JSON_VALUE(st.content, '$.timepoint') AS STRING) timepoint,\n    '' AS versao_modelo\nFROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`stop_times` st\nJOIN\n    `rj-smtr`.`gtfs`.`feed_info` fi\nON\n    st.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n        st.data_versao IN ('2024-04-15', '2024-05-03')\n        AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`stop_times`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:57.300907Z", "completed_at": "2025-02-20T18:13:59.195871Z"}, {"name": "execute", "started_at": "2025-02-20T18:13:59.201554Z", "completed_at": "2025-02-20T18:13:59.201604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9087395668029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stops_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n    fi.feed_version,\n    SAFE_CAST(s.data_versao AS DATE) as feed_start_date,\n    fi.feed_end_date,\n    SAFE_CAST(s.stop_id AS STRING) stop_id,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_code') AS STRING) stop_code,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_name') AS STRING) stop_name,\n    SAFE_CAST(JSON_VALUE(s.content, '$.tts_stop_name') AS STRING) tts_stop_name,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_desc') AS STRING) stop_desc,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_lat') AS FLOAT64) stop_lat,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_lon') AS FLOAT64) stop_lon,\n    SAFE_CAST(JSON_VALUE(s.content, '$.zone_id') AS STRING) zone_id,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_url') AS STRING) stop_url,\n    SAFE_CAST(SAFE_CAST(SAFE_CAST(JSON_VALUE(s.content, '$.location_type') AS FLOAT64) AS INT64) AS STRING) location_type,\n    SAFE_CAST(JSON_VALUE(s.content, '$.parent_station') AS STRING) parent_station,\n    SAFE_CAST(JSON_VALUE(s.content, '$.stop_timezone') AS STRING) stop_timezone,\n    SAFE_CAST(JSON_VALUE(s.content, '$.wheelchair_boarding') AS STRING) wheelchair_boarding,\n    SAFE_CAST(JSON_VALUE(s.content, '$.level_id') AS STRING) level_id,\n    SAFE_CAST(JSON_VALUE(s.content, '$.platform_code') AS STRING) platform_code,\n    '' AS versao_modelo\nFROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`stops` s\nJOIN\n    `rj-smtr`.`gtfs`.`feed_info` fi\nON\n    s.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n        s.data_versao IN ('2024-04-15', '2024-05-03')\n        AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`stops`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:13:59.219805Z", "completed_at": "2025-02-20T18:14:01.177249Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:01.183558Z", "completed_at": "2025-02-20T18:14:01.183596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9744651317596436, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.trips_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nSELECT\n    fi.feed_version,\n    SAFE_CAST(t.data_versao AS DATE) as feed_start_date,\n    fi.feed_end_date,\n    SAFE_CAST(JSON_VALUE(t.content, '$.route_id') AS STRING) route_id,\n    SAFE_CAST(JSON_VALUE(t.content, '$.service_id') AS STRING) service_id,\n    SAFE_CAST(t.trip_id AS STRING) trip_id,\n    SAFE_CAST(JSON_VALUE(t.content, '$.trip_headsign') AS STRING) trip_headsign,\n    SAFE_CAST(JSON_VALUE(t.content, '$.trip_short_name') AS STRING) trip_short_name,\n    SAFE_CAST(JSON_VALUE(t.content, '$.direction_id') AS STRING) direction_id,\n    SAFE_CAST(JSON_VALUE(t.content, '$.block_id') AS STRING) block_id,\n    SAFE_CAST(JSON_VALUE(t.content, '$.shape_id') AS STRING) shape_id,\n    SAFE_CAST(JSON_VALUE(t.content, '$.wheelchair_accessible') AS STRING) wheelchair_accessible,\n    SAFE_CAST(JSON_VALUE(t.content, '$.bikes_allowed') AS STRING) bikes_allowed,\n    '' as versao_modelo\nFROM\n    `rj-smtr-staging`.`br_rj_riodejaneiro_gtfs_staging`.`trips` t\nJOIN\n    `rj-smtr`.`gtfs`.`feed_info` fi\nON\n    t.data_versao = CAST(fi.feed_start_date AS STRING)\nWHERE\n        t.data_versao IN ('2024-04-15', '2024-05-03')\n        AND fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`trips`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:01.200304Z", "completed_at": "2025-02-20T18:14:01.209221Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:01.211619Z", "completed_at": "2025-02-20T18:14:01.211632Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01790928840637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.frota_determinada_desaninhada", "compiled": true, "compiled_code": "select\n    data_versao,\n    json_value(content, '$.IDFrotaDeterminada') IDFrotaDeterminada,\n    json_value(content, '$.TipoOnibusID') TipoOnibusID,\n    SAFE_CAST(json_value(content, '$.FrotaDeterminada') AS INT64) FrotaDeterminada,\n    SAFE_CAST(json_value(content, '$.FrotaServico') AS INT64) FrotaServico,\n    json_value(content, '$.dataInicioVigencia') dataInicioVigencia,\n    json_value(content, '$.dataFimVigencia') dataFimVigencia,\n    json_value(content, '$.legislacaoInicioVigencia') legislacaoInicioVigencia,\n    json_value(content, '$.legislacaoFimVigencia') legislacaoFimVigencia,\n    json_value(content, '$.route_id') route_id\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`frota_determinada`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`frota_determinada_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:01.217711Z", "completed_at": "2025-02-20T18:14:03.397000Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.405342Z", "completed_at": "2025-02-20T18:14:03.405391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.1935606002807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.infracao", "compiled": true, "compiled_code": "\n  \nWITH infracao AS (\n  SELECT\n    * EXCEPT(data),\n    SAFE_CAST(data AS DATE) AS data\n  FROM\n    `rj-smtr`.`veiculo_staging`.`infracao` as t\n  \n    WHERE\n      DATE(data) = DATE(\"2023-02-10\")\n  \n),\ninfracao_rn AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY data, id_auto_infracao ORDER BY timestamp_captura DESC) rn\n  FROM\n    infracao\n)\nSELECT\n  * EXCEPT(rn),\n  CURRENT_DATETIME(\"America/Sao_Paulo\") AS datetime_ultima_atualizacao,\n  \"\" AS versao\nFROM\n  infracao_rn\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`veiculo`.`infracao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.416431Z", "completed_at": "2025-02-20T18:14:03.427872Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.429504Z", "completed_at": "2025-02-20T18:14:03.429514Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01799297332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.linhas_desaninhada", "compiled": true, "compiled_code": "SELECT\n  linha_id,\n  JSON_VALUE(content, \"$.agency_id\") agency_id,\n  JSON_VALUE(content, \"$.sigla\") sigla,\n  JSON_VALUE(content, \"$.idModalSmtr\") id_modal_smtr,\n  JSON_VALUE(content, \"$.TipoLinha\") tipo_linha,\n  JSON_VALUE(content, \"$.NomeLinha\") nome_linha,\n  JSON_VALUE(content, \"$.SiglaCompleta\") sigla_completa,\n  JSON_VALUE(content, \"$.NumeroServicos\") numero_servicos,\n  JSON_VALUE(content, \"$.ativa\") ativa,\n  JSON_VALUE(content, \"$.FrotaDeterminada\") frota_determinada,\n  JSON_VALUE(content, \"$.LegisFrotaDeterminada\") legis_frota_determinada,\n  JSON_VALUE(content, \"$.FrotaOperante\") frota_operante,\n  JSON_VALUE(content, \"$.id\") id,\n  JSON_VALUE(content, \"$.Apresentacao\") apresentacao,\n  JSON_VALUE(content, \"$.agency_name\") agency_name,\n  DATE(data_versao) data_versao\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`linhas`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`linhas_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.434133Z", "completed_at": "2025-02-20T18:14:03.454903Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.456309Z", "completed_at": "2025-02-20T18:14:03.456319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02494049072265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ed_metadado_coluna", "compiled": true, "compiled_code": "\n  \n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n\n\nSELECT\n  *\nFROM\n  `rj-smtr`.`catalogo`.`metadado_coluna`\nWHERE\n  \n    (dataset_id = \"br_rj_riodejaneiro_bilhetagem\"\n    AND table_id = \"gps_validador\")\n  \n    OR (dataset_id = \"br_rj_riodejaneiro_bilhetagem\"\n    AND table_id = \"gps_validador_van\")\n  \n    OR (dataset_id = \"br_rj_riodejaneiro_bilhetagem_staging\"\n    AND table_id = \"cliente\")\n  \n    OR (dataset_id = \"planejamento\"\n    AND table_id = \"segmento_shape\")\n  \n    OR (dataset_id = \"planejamento\"\n    AND table_id = \"shapes_geom\")\n  \n    OR (dataset_id = \"br_rj_riodejaneiro_veiculos\"\n    AND table_id = \"gps_sppo_15_minutos\")\n  \n    OR (dataset_id = \"br_rj_riodejaneiro_veiculos\"\n    AND table_id = \"gps_sppo\")\n  \n    OR (dataset_id = \"br_rj_riodejaneiro_veiculos\"\n    AND table_id = \"gps_brt\")\n  \n    OR (dataset_id = \"br_rj_riodejaneiro_onibus_gps_zirix\"\n    AND table_id = \"gps_sppo\")\n  \n    OR (dataset_id = \"gtfs\"\n    AND table_id = \"shapes\")\n  \n    OR (dataset_id = \"gtfs\"\n    AND table_id = \"stops\")\n  \n    OR (dataset_id = \"gtfs\"\n    AND table_id = \"shapes_geom\")\n  \n    OR (dataset_id = \"cadastro\"\n    AND table_id = \"servicos\")\n  \n    OR (dataset_id = \"cadastro\"\n    AND table_id = \"operadoras\")\n  \n\n  OR (dataset_id = \"br_rj_riodejaneiro_stpl_gps\"\n    AND table_id = \"registros\")", "relation_name": "`rj-smtr`.`catalogo`.`ed_metadado_coluna`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.460324Z", "completed_at": "2025-02-20T18:14:03.464387Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.465757Z", "completed_at": "2025-02-20T18:14:03.465765Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007903814315795898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `rj-smtr`.`dbt`.`my_first_dbt_model`\nwhere id = 1", "relation_name": "`rj-smtr`.`dbt`.`my_second_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.470413Z", "completed_at": "2025-02-20T18:14:03.478293Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.479660Z", "completed_at": "2025-02-20T18:14:03.479671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011954307556152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_my_first_dbt_model_id.5fb22c2710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom (select * from `rj-smtr`.`dbt`.`my_first_dbt_model` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.483836Z", "completed_at": "2025-02-20T18:14:03.492331Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.493628Z", "completed_at": "2025-02-20T18:14:03.493637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012398481369018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_my_first_dbt_model_id.16e066b321", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from (select * from `rj-smtr`.`dbt`.`my_first_dbt_model` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.497657Z", "completed_at": "2025-02-20T18:14:03.501929Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.503227Z", "completed_at": "2025-02-20T18:14:03.503236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008046150207519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.routes_desaninhada", "compiled": true, "compiled_code": "with desaninhada as (\n    select\n    data_versao,\n    json_value(content, '$.agency_id') agency_id,\n    json_value(content, '$.route_short_name') route_short_name,\n    json_value(content, '$.route_long_name') route_long_name,\n    json_value(content, '$.route_desc') route_desc,\n    json_value(content, '$.route_type') route_type,\n    json_value(content, '$.route_url') route_url,\n    json_value(content, '$.route_color') route_color,\n    json_value(content, '$.route_text_color') route_text_color,\n    json_value(content, '$.ATIVA') ATIVA,\n    json_value(content, '$.ATUALIZADO') ATUALIZADO,\n    json_value(content, '$.Descricao') Descricao,\n    json_value(content, '$.idModalSmtr') idModalSmtr,\n    json_value(content, '$.linha_id') linha_id,\n    json_value(content, '$.brs') brs,\n    json_value(content, '$.IDTipoServico') IDTipoServico,\n    json_value(content, '$.IDVariacaoServico') IDVariacaoServico,\n    json_value(content, '$.origem') origem,\n    json_value(content, '$.destino') destino,\n    json_value(content, '$.ClassificacaoEspacial') ClassificacaoEspacial,\n    json_value(content, '$.ClassificacaoHierarquica') ClassificacaoHierarquica,\n    json_value(content, '$.InicioVigencia') InicioVigencia,\n    json_value(content, '$.LegisInicioVigencia') LegisInicioVigencia,\n    json_value(content, '$.fimVigencia') fimVigencia,\n    json_value(content, '$.LegisfimVigencia') LegisfimVigencia,\n    json_value(content, '$.FlagVigente') FlagVigente,\n    json_value(content, '$.FrotaDeterminada') FrotaDeterminada,\n    json_value(content, '$.LegisFrota') LegisFrota,\n    json_value(content, '$.FrotaServico') FrotaServico,\n    json_value(content, '$.FrotaOperante') FrotaOperante,\n    json_value(content, '$.Observacoes') Observacoes,\n    json_value(content, '$.IDParadaOrigem') IDParadaOrigem,\n    json_value(content, '$.SiglaServico') SiglaServico,\n    json_value(content, '$.IDParadaDestino') IDParadaDestino,\n    json_value(content, '$.route_id') route_id,\n    json_value(content, '$.id') id,\n    json_value(content, '$.agency_name') agency_name,\n    json_value(content, '$.Via') Via,\n    json_value(content, '$.Vista') Vista,\n    json_value(content, '$.Complemento') Complemento,\n    json_value(content,'$.OLD_routes_id') old_route_id\nfrom `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`routes`\n),\nultimas_versoes as (\n    select\n        *\n    from desaninhada\n    where DATE(fimVigencia) >= DATE(data_versao) or fimVigencia is null\n    order by route_id, fimVigencia\n)\nselect\n    *\nfrom ultimas_versoes", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`routes_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.507142Z", "completed_at": "2025-02-20T18:14:03.512472Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.514664Z", "completed_at": "2025-02-20T18:14:03.514674Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010053873062133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_licenciamento_solicitacao", "compiled": true, "compiled_code": "\n\nSELECT\n   *\n FROM\n     `rj-smtr`.`veiculo_staging`.`sppo_licenciamento_solicitacao` as t", "relation_name": "`rj-smtr`.`veiculo`.`sppo_licenciamento_solicitacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.518655Z", "completed_at": "2025-02-20T18:14:03.524025Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:03.525302Z", "completed_at": "2025-02-20T18:14:03.525310Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009099245071411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.check_gps_capture__sppo_realocacao.a909fe1ee3", "compiled": true, "compiled_code": "WITH\n    t AS (\n    SELECT\n        DATETIME(timestamp_array) AS timestamp_array\n    FROM\n        UNNEST( GENERATE_TIMESTAMP_ARRAY( TIMESTAMP(\"2022-01-01T00:00:00\"), TIMESTAMP(\"2022-01-01T01:00:00\"), INTERVAL 10 minute) ) AS timestamp_array\n    WHERE\n        timestamp_array < TIMESTAMP(\"2022-01-01T01:00:00\") ),\n    logs_table AS (\n    SELECT\n        SAFE_CAST(DATETIME(TIMESTAMP(timestamp_captura), \"America/Sao_Paulo\") AS DATETIME) timestamp_captura,\n        SAFE_CAST(sucesso AS BOOLEAN) sucesso,\n        SAFE_CAST(erro AS STRING) erro,\n        SAFE_CAST(DATA AS DATE) DATA\n    FROM\n        rj-smtr-staging.br_rj_riodejaneiro_onibus_gps_staging.realocacao_logs AS t ),\n    logs AS (\n    SELECT\n        *,\n        TIMESTAMP_TRUNC(timestamp_captura, minute) AS timestamp_array\n    FROM\n        logs_table\n    WHERE\n        DATA BETWEEN DATE(TIMESTAMP(\"2022-01-01T00:00:00\"))\n        AND DATE(TIMESTAMP(\"2022-01-01T01:00:00\"))\n        AND timestamp_captura BETWEEN \"2022-01-01T00:00:00\"\n        AND \"2022-01-01T01:00:00\" )\n    SELECT\n        COALESCE(logs.timestamp_captura, t.timestamp_array) AS timestamp_captura,\n        logs.erro\n    FROM\n        t\n    LEFT JOIN\n        logs\n    ON\n        logs.timestamp_array = t.timestamp_array\n    WHERE\n        logs.sucesso IS NOT TRUE", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:03.529122Z", "completed_at": "2025-02-20T18:14:05.841394Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.842959Z", "completed_at": "2025-02-20T18:14:05.842969Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.3163931369781494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_registro_agente_verao", "compiled": true, "compiled_code": "\n\n\n  \n\n\n\nSELECT\n  * EXCEPT(rn)\nFROM\n  (\n    SELECT\n      *,\n      ROW_NUMBER() OVER(PARTITION BY id_registro ORDER BY datetime_captura DESC) AS rn\n    FROM\n      `rj-smtr`.`veiculo_staging`.`sppo_registro_agente_verao`\n    WHERE\n      data = DATE('2025-02-19')\n      AND validacao = TRUE\n  )\nWHERE rn = 1", "relation_name": "`rj-smtr`.`veiculo`.`sppo_registro_agente_verao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.847726Z", "completed_at": "2025-02-20T18:14:05.855953Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.857758Z", "completed_at": "2025-02-20T18:14:05.857768Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013108491897583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_aux_registros_realocacao", "compiled": true, "compiled_code": "\n\n\n\n-- 1. Filtra realoca\u00e7\u00f5es v\u00e1lidas dentro do intervalo de GPS avaliado\nwith realocacao as (\n  select\n    * except(datetime_saida),\n    case\n      when datetime_saida is null then datetime_operacao\n      else datetime_saida\n    end as datetime_saida,\n  from\n    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_realocacao`\n  where\n    -- Realoca\u00e7\u00e3o deve acontecer ap\u00f3s o registro de GPS e at\u00e9 1 hora depois\n    datetime_diff(datetime_operacao, datetime_entrada, minute) between 0 and 60\n    and data between DATE(\"2022-01-01T00:00:00\")\n    and DATE(datetime_add(\"2022-01-01T01:00:00\", interval 1 hour))\n    and (datetime_saida >= datetime(\"2022-01-01T00:00:00\") or datetime_operacao >= datetime(\"2022-01-01T00:00:00\"))\n),\n-- 2. Altera registros de GPS com servicos realocados\ngps as (\n  select\n    ordem,\n    timestamp_gps,\n    linha,\n    data,\n    hora\n  from `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_registros`\n  where\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    and timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <= \"2022-01-01T01:00:00\"\n),\ncombinacao as (\n  select\n    r.id_veiculo,\n    g.timestamp_gps,\n    g.linha as servico_gps,\n    r.servico as servico_realocado,\n    r.datetime_operacao as datetime_realocacao,\n    g.data,\n    g.hora\n  from gps g\n  inner join realocacao r\n  on\n    g.ordem = r.id_veiculo\n    and g.linha != r.servico\n    and g.timestamp_gps between r.datetime_entrada and r.datetime_saida\n)\n-- Filtra realocacao mais recente para cada timestamp\nselect\n  * except(rn)\nfrom (\n  select\n    *,\n    row_number() over (partition by id_veiculo, timestamp_gps order by datetime_realocacao desc) as rn\n  from combinacao\n)\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_realocacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.862941Z", "completed_at": "2025-02-20T18:14:05.868817Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.870405Z", "completed_at": "2025-02-20T18:14:05.870414Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010611295700073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.check_gps_capture__sppo_registros.93aee2f738", "compiled": true, "compiled_code": "WITH\n    t AS (\n    SELECT\n        DATETIME(timestamp_array) AS timestamp_array\n    FROM\n        UNNEST( GENERATE_TIMESTAMP_ARRAY( TIMESTAMP(\"2022-01-01T00:00:00\"), TIMESTAMP(\"2022-01-01T01:00:00\"), INTERVAL 1 minute) ) AS timestamp_array\n    WHERE\n        timestamp_array < TIMESTAMP(\"2022-01-01T01:00:00\") ),\n    logs_table AS (\n    SELECT\n        SAFE_CAST(DATETIME(TIMESTAMP(timestamp_captura), \"America/Sao_Paulo\") AS DATETIME) timestamp_captura,\n        SAFE_CAST(sucesso AS BOOLEAN) sucesso,\n        SAFE_CAST(erro AS STRING) erro,\n        SAFE_CAST(DATA AS DATE) DATA\n    FROM\n        rj-smtr-staging.br_rj_riodejaneiro_onibus_gps_staging.registros_logs AS t ),\n    logs AS (\n    SELECT\n        *,\n        TIMESTAMP_TRUNC(timestamp_captura, minute) AS timestamp_array\n    FROM\n        logs_table\n    WHERE\n        DATA BETWEEN DATE(TIMESTAMP(\"2022-01-01T00:00:00\"))\n        AND DATE(TIMESTAMP(\"2022-01-01T01:00:00\"))\n        AND timestamp_captura BETWEEN \"2022-01-01T00:00:00\"\n        AND \"2022-01-01T01:00:00\" )\n    SELECT\n        COALESCE(logs.timestamp_captura, t.timestamp_array) AS timestamp_captura,\n        logs.erro\n    FROM\n        t\n    LEFT JOIN\n        logs\n    ON\n        logs.timestamp_array = t.timestamp_array\n    WHERE\n        logs.sucesso IS NOT TRUE", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.875116Z", "completed_at": "2025-02-20T18:14:05.884748Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.886016Z", "completed_at": "2025-02-20T18:14:05.886025Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013625383377075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_aux_registros_realocacao_zirix", "compiled": true, "compiled_code": "\n\n-- 1. Filtra realoca\u00e7\u00f5es v\u00e1lidas dentro do intervalo de GPS avaliado\nwith realocacao as (\n  select\n    * except(datetime_saida),\n    case\n      when datetime_saida is null then datetime_operacao\n      else datetime_saida\n    end as datetime_saida,\n  from\n    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_realocacao`\n  where\n    -- Realoca\u00e7\u00e3o deve acontecer ap\u00f3s o registro de GPS e at\u00e9 1 hora depois\n        datetime_diff(datetime_operacao, datetime_entrada, minute) between 0 and 60\n    and\n        data between DATE(\"2022-01-01T00:00:00\")\n        and DATE(datetime_add(\"2022-01-01T01:00:00\", interval 1\n        hour))\n    and\n        datetime_operacao between datetime(\"2022-01-01T00:00:00\")\n            and datetime_add(\"2022-01-01T01:00:00\", interval 1 hour)),\n-- 2. Altera registros de GPS com servicos realocados\ngps as (\n  select\n    ordem,\n    timestamp_gps,\n    linha,\n    data,\n    hora\n  from `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_registros`\n  where\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    and timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <= \"2022-01-01T01:00:00\"\n),\ncombinacao as (\n  select\n    r.id_veiculo,\n    g.timestamp_gps,\n    g.linha as servico_gps,\n    r.servico as servico_realocado,\n    r.datetime_operacao as datetime_realocacao,\n    g.data,\n    g.hora\n  from gps g\n  inner join realocacao r\n  on\n    g.ordem = r.id_veiculo\n    and g.linha != r.servico\n    and g.timestamp_gps between r.datetime_entrada and r.datetime_saida\n)\n-- Filtra realocacao mais recente para cada timestamp\nselect\n  * except(rn)\nfrom (\n  select\n    *,\n    row_number() over (partition by id_veiculo, timestamp_gps order by datetime_realocacao desc) as rn\n  from combinacao\n)\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registros_realocacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.899765Z", "completed_at": "2025-02-20T18:14:05.905763Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.907093Z", "completed_at": "2025-02-20T18:14:05.907101Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00998997688293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_retorno_ordem_pagamento", "compiled": true, "compiled_code": "\n\nwith\n    arquivo_retorno as (\n        select * except (rn)\n        from\n            (\n                select\n                    *,\n                    row_number() over (\n                        partition by dataordem, idconsorcio, idoperadora\n                        order by timestamp_captura desc\n                    ) as rn\n                from `rj-smtr`.`controle_financeiro_staging`.`arquivo_retorno`\n                \n                    where\n                        date(data) between date(\"2022-01-01T00:00:00\") and date(\n                            \"2022-01-01T01:00:00\"\n                        )\n                \n            )\n        where rn = 1\n    )\nselect distinct\n    dataordem as data_ordem,\n    date(datavencimento) as data_pagamento,\n    idconsorcio as id_consorcio,\n    idoperadora as id_operadora,\n    concat(dataordem, idconsorcio, idoperadora) as unique_id,\n    valorrealefetivado as valor_pago\nfrom arquivo_retorno\nwhere ispago = true", "relation_name": "`rj-smtr`.`controle_financeiro_staging`.`aux_retorno_ordem_pagamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.910887Z", "completed_at": "2025-02-20T18:14:05.915767Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.917027Z", "completed_at": "2025-02-20T18:14:05.917034Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008663177490234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gratuidade_aux", "compiled": true, "compiled_code": "\n\n\n\n\n\nWITH gratuidade_complete_partitions AS (\n    SELECT\n        CAST(CAST(cd_cliente AS FLOAT64) AS INT64) AS id_cliente,\n        id AS id_gratuidade,\n        tipo_gratuidade,\n        data_inclusao AS data_inicio_validade,\n        timestamp_captura\n    FROM\n        `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gratuidade`\n),\ngratuidade_deduplicada AS (\n    SELECT\n        * EXCEPT(rn)\n    FROM\n        (\n            SELECT\n                *,\n                ROW_NUMBER() OVER (PARTITION BY id_gratuidade ORDER BY timestamp_captura DESC) AS rn\n            FROM\n                gratuidade_complete_partitions\n        )\n    WHERE\n        rn = 1\n)\nSELECT\n    id_cliente,\n    id_gratuidade,\n    tipo_gratuidade,\n    data_inicio_validade,\n    LEAD(data_inicio_validade) OVER (PARTITION BY id_cliente ORDER BY data_inicio_validade) AS data_fim_validade,\n    timestamp_captura\nFROM\n    gratuidade_deduplicada", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gratuidade_aux`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.921171Z", "completed_at": "2025-02-20T18:14:05.928383Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.929626Z", "completed_at": "2025-02-20T18:14:05.929635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01089620590209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.consorcios", "compiled": true, "compiled_code": "\n\nWITH stu AS (\n  SELECT\n      perm_autor AS id_consorcio,\n      cnpj,\n      processo,\n      data_registro,\n      razao_social,\n      CASE\n        \n          WHEN perm_autor = '221000014' THEN '6'\n        \n          WHEN perm_autor = '221000023' THEN '4'\n        \n          WHEN perm_autor = '221000032' THEN '3'\n        \n          WHEN perm_autor = '221000041' THEN '5'\n        \n          WHEN perm_autor = '221000050' THEN NULL\n        \n          WHEN perm_autor = '229000010' THEN '1'\n        \n      END AS cd_consorcio_jae\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_stu`.`operadora_empresa` AS stu\n  WHERE\n    perm_autor IN ('221000014', '221000023', '221000032', '221000041', '221000050', '229000010')\n), consorcio AS (\n  SELECT\n    COALESCE(s.id_consorcio, j.cd_consorcio) AS id_consorcio,\n    CASE\n      WHEN s.id_consorcio = '221000050' THEN \"Cons\u00f3rcio BRT\"\n      ELSE j.nm_consorcio\n    END AS consorcio,\n    s.cnpj,\n    s.razao_social,\n    s.id_consorcio AS id_consorcio_stu,\n    j.cd_consorcio AS id_consorcio_jae,\n    s.processo AS id_processo\n  FROM `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`consorcio` AS j\n  FULL OUTER JOIN\n    stu AS s\n  ON\n    j.cd_consorcio = s.cd_consorcio_jae\n)\nSELECT\n  c.id_consorcio,\n  c.consorcio,\n  m.modo,\n  c.cnpj,\n  c.razao_social,\n  c.id_consorcio_stu,\n  c.id_consorcio_jae,\n  c.id_processo\nFROM consorcio c\nLEFT JOIN\n  `rj-smtr`.`cadastro_staging`.`consorcio_modo` AS cm\nUSING (id_consorcio)\nLEFT JOIN\n  `rj-smtr`.`cadastro`.`modos` AS m\nON\n  m.id_modo = cm.id_modo\n  AND cm.fonte_id_modo = m.fonte", "relation_name": "`rj-smtr`.`cadastro`.`consorcios`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.933388Z", "completed_at": "2025-02-20T18:14:05.940239Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:05.941481Z", "completed_at": "2025-02-20T18:14:05.941489Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010621786117553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.operadoras", "compiled": true, "compiled_code": "\n\nwith\n    operadora_jae as (\n        select\n            ot.cd_operadora_transporte,\n            ot.cd_cliente,\n            m.modo,\n            ot.cd_tipo_modal,\n            ot.ds_tipo_modal as modo_jae,\n            -- STU considera BRT como \u00d4nibus\n            case when ot.cd_tipo_modal = '3' then '\u00d4nibus' else m.modo end as modo_join,\n            ot.in_situacao_atividade,\n            case\n                when c.in_tipo_pessoa_fisica_juridica = 'F'\n                then 'CPF'\n                when c.in_tipo_pessoa_fisica_juridica = 'J'\n                then 'CNPJ'\n            end as tipo_documento,\n            c.nr_documento,\n            c.nm_cliente,\n            cb.cd_agencia,\n            cb.cd_tipo_conta,\n            cb.nm_banco,\n            cb.nr_banco,\n            cb.nr_conta\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`operadora_transporte` as ot\n        join `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`cliente` as c on ot.cd_cliente = c.cd_cliente\n        left join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`conta_bancaria` as cb on ot.cd_cliente = cb.cd_cliente\n        join\n            `rj-smtr`.`cadastro`.`modos` m\n            on ot.cd_tipo_modal = m.id_modo\n            and m.fonte = \"jae\"\n    ),\n    stu_pessoa_juridica as (\n        select\n            perm_autor,\n            cnpj as documento,\n            processo,\n            id_modo,\n            modo as modo_stu,\n            tipo_permissao,\n            data_registro,\n            razao_social as nome_operadora,\n            \"CNPJ\" as tipo_documento\n        from `rj-smtr`.`br_rj_riodejaneiro_stu`.`operadora_empresa`\n        where\n            perm_autor not in (\n                '221000014', '221000023', '221000032', '221000041', '221000050'\n            )\n    ),\n    stu_pessoa_fisica as (\n        select\n            perm_autor,\n            cpf as documento,\n            processo,\n            id_modo,\n            modo as modo_stu,\n            tipo_permissao,\n            data_registro,\n            nome as nome_operadora,\n            \"CPF\" as tipo_documento\n        from `rj-smtr`.`br_rj_riodejaneiro_stu`.`operadora_pessoa_fisica`\n    ),\n    stu as (\n        select s.*, m.modo\n        from\n            (\n                select *\n                from stu_pessoa_juridica\n\n                union all\n\n                select *\n                from stu_pessoa_fisica\n            ) s\n        join\n            `rj-smtr`.`cadastro`.`modos` m\n            on s.id_modo = m.id_modo\n            and m.fonte = \"stu\"\n    ),\n    cadastro as (\n        select\n            coalesce(s.perm_autor, j.cd_operadora_transporte) as id_operadora,\n            upper(\n                regexp_replace(\n                    normalize(coalesce(s.nome_operadora, j.nm_cliente), nfd), r\"\\pM\", ''\n                )\n            ) as operadora_completo,\n            s.tipo_permissao as tipo_operadora,\n            coalesce(j.modo, s.modo) as modo,\n            s.modo_stu,\n            j.modo_jae,\n            s.processo as id_processo,\n            s.data_registro as data_processo,\n            coalesce(s.documento, j.nr_documento) as documento,\n            coalesce(s.tipo_documento, j.tipo_documento) as tipo_documento,\n            s.perm_autor as id_operadora_stu,\n            j.cd_operadora_transporte as id_operadora_jae,\n            safe_cast(\n                j.in_situacao_atividade as boolean\n            ) as indicador_operador_ativo_jae,\n            j.cd_agencia as agencia,\n            j.cd_tipo_conta as tipo_conta,\n            j.nm_banco as banco,\n            lpad(j.nr_banco, 3, '0') as codigo_banco,\n            j.nr_conta as conta\n        from stu as s\n        full outer join\n            operadora_jae as j on s.documento = j.nr_documento and s.modo = j.modo_join\n    )\nselect\n    id_operadora,\n    modo,\n    modo_stu,\n    modo_jae,\n    case\n        when tipo_documento = \"CNPJ\"\n        then operadora_completo\n        else regexp_replace(operadora_completo, '[^ ]', '*')\n    end as operadora,\n    operadora_completo,\n    tipo_operadora,\n    tipo_documento,\n    documento,\n    codigo_banco,\n    banco,\n    agencia,\n    tipo_conta,\n    conta,\n    id_operadora_stu,\n    id_operadora_jae,\n    id_processo,\n    data_processo,\n    indicador_operador_ativo_jae\nfrom cadastro\nwhere modo not in (\"Escolar\", \"T\u00e1xi\")", "relation_name": "`rj-smtr`.`cadastro`.`operadoras`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:05.945562Z", "completed_at": "2025-02-20T18:14:08.203343Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:08.209110Z", "completed_at": "2025-02-20T18:14:08.209144Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.269465446472168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.rdo_registros_stpl", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n        \n\n        \n\n        \n    \n\n\nwith\n    rdo_new as (\n        select\n            data_transacao,\n            data_particao as data_arquivo_rdo,\n            trim(linha) as servico_riocard,\n            trim(linha_rcti) as linha_riocard,\n            trim(operadora) as operadora,\n            gratuidade_idoso as quantidade_transacao_gratuidade_idoso,\n            gratuidade_especial as quantidade_transacao_gratuidade_especial,\n            gratuidade_estudante_federal\n            as quantidade_transacao_gratuidade_estudante_federal,\n            gratuidade_estudante_estadual\n            as quantidade_transacao_gratuidade_estudante_estadual,\n            gratuidade_estudante_municipal\n            as quantidade_transacao_gratuidade_estudante_municipal,\n            universitario as quantidade_transacao_buc_universitario,\n            buc_1a_perna as quantidade_transacao_buc_perna_1,\n            buc_2a_perna as quantidade_transacao_buc_perna_2,\n            buc_receita as valor_buc,\n            buc_supervia_1a_perna as quantidade_transacao_buc_supervia_perna_1,\n            buc_supervia_2a_perna as quantidade_transacao_buc_supervia_perna_2,\n            buc_supervia_receita as valor_buc_supervia,\n            buc_van_1a_perna as quantidade_transacao_buc_van_perna_1,\n            buc_van_2a_perna as quantidade_transacao_buc_van_perna_2,\n            buc_van_receita as valor_buc_van,\n            buc_brt_1a_perna as quantidade_transacao_buc_brt_perna_1,\n            buc_brt_2a_perna as quantidade_transacao_buc_brt_perna_2,\n            buc_brt_3a_perna as quantidade_transacao_buc_brt_perna_3,\n            buc_brt_receita as valor_buc_brt,\n            buc_inter_1a_perna as quantidade_transacao_buc_inter_perna_1,\n            buc_inter_2a_perna as quantidade_transacao_buc_inter_perna_2,\n            buc_inter_receita as valor_buc_inter,\n            buc_metro_1a_perna as quantidade_transacao_buc_metro_perna_1,\n            buc_metro_2a_perna as quantidade_transacao_buc_metro_perna_2,\n            buc_metro_receita as valor_buc_metro,\n            cartao as quantidade_transacao_cartao,\n            receita_cartao as valor_cartao,\n            especie_passageiro_transportado as quantidade_transacao_especie,\n            especie_receita as valor_especie,\n            data_processamento,\n            timestamp_captura as datetime_captura\n        from `rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rdo_registros_stpl`\n         where \nano BETWEEN\n    EXTRACT(YEAR FROM DATE(\"2022-01-01T00:00:00\"))\n    AND EXTRACT(YEAR FROM DATE(\"2022-01-01T01:00:00\"))\nAND mes BETWEEN\n    EXTRACT(MONTH FROM DATE(\"2022-01-01T00:00:00\"))\n    AND EXTRACT(MONTH FROM DATE(\"2022-01-01T01:00:00\"))\nAND dia BETWEEN\n    EXTRACT(DAY FROM DATE(\"2022-01-01T00:00:00\"))\n    AND EXTRACT(DAY FROM DATE(\"2022-01-01T01:00:00\"))\n \n    ),\n    rdo_complete_partitions as (\n        select *\n        from rdo_new\n\n        \n\n            union all\n\n            select * except (versao, datetime_ultima_atualizacao)\n            from `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo_registros_stpl`\n            where data_transacao in ('2021-12-16', '2021-12-27', '2021-12-13', '2021-11-18', '2021-12-22', '2021-12-24', '2021-12-26', '2021-12-17', '2021-12-21', '2021-12-04', '2021-12-23', '2021-12-15', '2021-12-19', '2021-12-20', '2021-12-14', '2021-12-18', '2021-12-25')\n\n        \n    ),\n    aux_dedup as (\n        select data_arquivo_rdo, max(datetime_captura) as max_datetime_captura\n        from rdo_complete_partitions\n        group by 1\n    )\nselect\n    r.*,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom rdo_complete_partitions r\njoin aux_dedup a using (data_arquivo_rdo)\nwhere a.max_datetime_captura = r.datetime_captura", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo_registros_stpl`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:08.225119Z", "completed_at": "2025-02-20T18:14:08.234237Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:08.236850Z", "completed_at": "2025-02-20T18:14:08.236868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01851201057434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.staging_rho_registros_sppo", "compiled": true, "compiled_code": "\n\n-- depends_on: `rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rdo_registros_stpl`\nselect\n    concat(\n        trim(linha_rcti),\n        '_',\n        data_transacao,\n        '_',\n        hora_transacao,\n        ano,\n        '_',\n        mes,\n        '_',\n        dia\n    ) id_transacao,\n    trim(linha) linha,\n    safe_cast(data_transacao as date) data_transacao,\n    safe_cast(hora_transacao as int64) hora_transacao,\n    safe_cast(total_gratuidades as int64) total_gratuidades,\n    safe_cast(total_pagantes_especie as int64) total_pagantes_especie,\n    safe_cast(total_pagantes_cartao as int64) total_pagantes_cartao,\n    safe_cast(registro_processado as string) registro_processado,\n    safe_cast(data_processamento as date) data_processamento,\n    safe_cast(operadora as string) operadora,\n    safe_cast(linha_rcti as string) linha_rcti,\n    datetime(timestamp(timestamp_captura), \"America/Sao_Paulo\") as timestamp_captura,\n    safe_cast(ano as int64) ano,\n    safe_cast(mes as int64) mes,\n    safe_cast(dia as int64) dia,\n    date(concat(ano, '-', mes, '-', dia)) data_particao\nfrom `rj-smtr-staging`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_sppo`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_sppo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:08.243342Z", "completed_at": "2025-02-20T18:14:08.253657Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:08.255046Z", "completed_at": "2025-02-20T18:14:08.255056Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014657258987426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_bloqueio_via_ultimo_julgamento", "compiled": true, "compiled_code": "\nWITH exploded AS (\n  SELECT\n    id_recurso,\n    datetime_update AS data_julgamento,\n    SAFE_CAST(COALESCE(JSON_VALUE(items, '$.value'), JSON_VALUE(items, '$.items[0].customFieldItem')) AS STRING\n    ) AS julgamento,\n    SAFE_CAST(JSON_EXTRACT(items, '$.customFieldId') AS STRING ) AS field_id\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_bloqueio_via`,\n    UNNEST(items) items\n  WHERE\n        DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")\n),\npivotado AS (\n  SELECT * EXCEPT(field_id)\n  FROM\n    exploded\n  WHERE field_id = '111865'\n\n),\n\n  julgamento AS (\n    SELECT\n      p.id_recurso,\n      p.julgamento,\n      p.data_julgamento,\n      t.julgamento AS ultimo_julgamento\n    FROM\n      pivotado p\n    LEFT JOIN\n      `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_bloqueio_via_ultimo_julgamento` AS t\n    USING (id_recurso)\n  )\n\n\nSELECT\n  id_recurso,\n  data_julgamento,\n  julgamento\nFROM\n(\n  SELECT\n    ROW_NUMBER() OVER(PARTITION BY j.id_recurso ORDER BY j.data_julgamento DESC) AS rn,\n    *\n  FROM\n    julgamento j\n  WHERE\n    j.julgamento != j.ultimo_julgamento OR j.ultimo_julgamento IS NULL\n)\nWHERE rn=1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_bloqueio_via_ultimo_julgamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:08.259148Z", "completed_at": "2025-02-20T18:14:08.264877Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:08.266124Z", "completed_at": "2025-02-20T18:14:08.266131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009560585021972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_reprocessamento_ultimo_julgamento", "compiled": true, "compiled_code": "\nWITH exploded AS (\n  SELECT\n    id_recurso,\n    datetime_update AS data_julgamento,\n    SAFE_CAST(COALESCE(JSON_VALUE(items, '$.value'), JSON_VALUE(items, '$.items[0].customFieldItem')) AS STRING\n    ) AS julgamento,\n    SAFE_CAST(JSON_EXTRACT(items, '$.customFieldId') AS STRING ) AS field_id\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_reprocessamento`,\n    UNNEST(items) items\n  WHERE\n        DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")\n),\npivotado AS (\n  SELECT * EXCEPT(field_id)\n  FROM\n    exploded\n  WHERE field_id = '111865'\n\n),\n\n  julgamento AS (\n    SELECT\n      p.id_recurso,\n      p.julgamento,\n      p.data_julgamento,\n      t.julgamento AS ultimo_julgamento\n    FROM\n      pivotado p\n    LEFT JOIN\n      `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_reprocessamento_ultimo_julgamento` AS t\n    USING (id_recurso)\n  )\n\n\nSELECT\n  id_recurso,\n  data_julgamento,\n  julgamento\nFROM\n(\n  SELECT\n    ROW_NUMBER() OVER(PARTITION BY j.id_recurso ORDER BY j.data_julgamento DESC) AS rn,\n    *\n  FROM\n    julgamento j\n  WHERE\n    j.julgamento != j.ultimo_julgamento OR j.ultimo_julgamento IS NULL\n)\nWHERE rn=1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_reprocessamento_ultimo_julgamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:08.269840Z", "completed_at": "2025-02-20T18:14:08.276492Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:08.277748Z", "completed_at": "2025-02-20T18:14:08.277756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010253190994262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_viagens_individuais_ultimo_julgamento", "compiled": true, "compiled_code": "\nWITH exploded AS (\n  SELECT\n    id_recurso,\n    datetime_update AS data_julgamento,\n    SAFE_CAST(COALESCE(JSON_VALUE(items, '$.value'), JSON_VALUE(items, '$.items[0].customFieldItem')) AS STRING\n    ) AS julgamento,\n    SAFE_CAST(JSON_EXTRACT(items, '$.customFieldId') AS STRING ) AS field_id\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_viagens_individuais`,\n    UNNEST(items) items\n  WHERE\n        DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")\n),\npivotado AS (\n  SELECT * EXCEPT(field_id)\n  FROM\n    exploded\n  WHERE field_id = '111865'\n\n),\n\n  julgamento AS (\n    SELECT\n      p.id_recurso,\n      p.julgamento,\n      p.data_julgamento,\n      t.julgamento AS ultimo_julgamento\n    FROM\n      pivotado p\n    LEFT JOIN\n      `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_viagens_individuais_ultimo_julgamento` AS t\n    USING (id_recurso)\n  )\n\n\nSELECT\n  id_recurso,\n  data_julgamento,\n  julgamento\nFROM\n(\n  SELECT\n    ROW_NUMBER() OVER(PARTITION BY j.id_recurso ORDER BY j.data_julgamento DESC) AS rn,\n    *\n  FROM\n    julgamento j\n  WHERE\n    j.julgamento != j.ultimo_julgamento OR j.ultimo_julgamento IS NULL\n\n)\nWHERE rn=1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_viagens_individuais_ultimo_julgamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:08.281444Z", "completed_at": "2025-02-20T18:14:10.483408Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:10.484996Z", "completed_at": "2025-02-20T18:14:10.485005Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.205920457839966, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.rho_registros_stpl_aux", "compiled": true, "compiled_code": "\n\n-- Tabela auxiliar para manter os dados com os mesmos identificadores:\n-- data e hora de transacao, linha e operadora desagregados antes de somar na tabela\n-- final\n-- Foi criada para n\u00e3o ter o risco de somar os dados do mesmo arquivo mais de uma vez\n\n\n\n\n\n    \n        \n\n        \n\n        \n    \n\n\n\nwith\n    rho_new as (\n        select\n            data_transacao,\n            hora_transacao,\n            data_particao as data_arquivo_rho,\n            trim(linha) as servico_riocard,\n            trim(operadora) as operadora,\n            total_pagantes as quantidade_transacao_pagante,\n            total_gratuidades as quantidade_transacao_gratuidade,\n            timestamp_captura as datetime_captura\n        from `rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_stpl`\n         where \n    ano BETWEEN\n        EXTRACT(YEAR FROM DATE(\"2022-01-01T00:00:00\"))\n        AND EXTRACT(YEAR FROM DATE(\"2022-01-01T01:00:00\"))\n    AND mes BETWEEN\n        EXTRACT(MONTH FROM DATE(\"2022-01-01T00:00:00\"))\n        AND EXTRACT(MONTH FROM DATE(\"2022-01-01T01:00:00\"))\n    AND dia BETWEEN\n        EXTRACT(DAY FROM DATE(\"2022-01-01T00:00:00\"))\n        AND EXTRACT(DAY FROM DATE(\"2022-01-01T01:00:00\"))\n \n    ),\n    rho_complete_partitions as (\n        select *\n        from rho_new\n\n        \n\n            union all\n\n            select *\n            from `rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_stpl_aux`\n            where data_transacao in ('2021-12-26', '2021-12-23', '2021-12-22', '2021-12-16', '2021-12-27', '2021-12-21', '2021-12-24', '2021-12-13', '2021-12-15', '2021-11-18', '2021-12-18', '2021-12-17', '2021-12-25', '2002-12-31', '2021-12-20', '2021-12-14', '2021-12-19')\n        \n    )\nselect\n    data_transacao,\n    hora_transacao,\n    data_arquivo_rho,\n    servico_riocard,\n    operadora,\n    quantidade_transacao_pagante,\n    quantidade_transacao_gratuidade,\n    datetime_captura\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by\n                    data_transacao,\n                    hora_transacao,\n                    data_arquivo_rho,\n                    servico_riocard,\n                    operadora\n                order by datetime_captura desc\n            ) as rn\n        from rho_complete_partitions\n    )\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_stpl_aux`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:10.488925Z", "completed_at": "2025-02-20T18:14:16.535836Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:16.545793Z", "completed_at": "2025-02-20T18:14:16.545852Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.065321922302246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_informada", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n    \n\n    \n  \n\n\nWITH staging_data AS (\n  SELECT\n    data_viagem AS data,\n    datetime_partida,\n    datetime_chegada,\n    datetime_processamento,\n    timestamp_captura AS datetime_captura,\n    id_veiculo,\n    trip_id,\n    route_id,\n    shape_id,\n    servico,\n    CASE\n      WHEN sentido = 'I' THEN 'Ida'\n      WHEN sentido = 'V' THEN 'Volta'\n      ELSE sentido\n    END AS sentido,\n    id_viagem\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_viagem_zirix_staging`.`viagem_informada`\n  \n    WHERE\n      \n  DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n\n  \n),\ncomplete_partitions AS (\n  SELECT\n    *,\n    0 AS priority\n  FROM\n    staging_data\n\n  \n),\ndeduplicado AS (\n  SELECT\n    * EXCEPT(rn, priority)\n  FROM\n    (\n      SELECT\n        *,\n        ROW_NUMBER() OVER(PARTITION BY id_viagem ORDER BY datetime_captura DESC, priority) AS rn\n      FROM\n        complete_partitions\n    )\n  WHERE\n    rn = 1\n)\nSELECT\n  *,\n  '' AS versao,\n  CURRENT_DATETIME(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nFROM\n  deduplicado", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_viagem_zirix`.`viagem_informada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:16.564115Z", "completed_at": "2025-02-20T18:14:16.572802Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:16.574532Z", "completed_at": "2025-02-20T18:14:16.574544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01584172248840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stop_details_desaninhada", "compiled": true, "compiled_code": "/*Desaninha os campos presentes em 'content' da tabela stop_details*/\nSELECT\n  stop_id,\n  json_value(content, '$.stop_name') stop_name,\n  json_value(content, '$.stop_desc') stop_desc,\n  json_value(content, '$.stop_lat') stop_lat,\n  json_value(content, '$.stop_lon') stop_lon,\n  json_value(content, '$.location_type') location_type,\n  json_value(content, '$.Modal') modal,\n  json_value(content, '$.Corredor') corredor,\n  json_value(content, '$.Tipo de parada') tipo_de_parada ,\n  json_value(content, '$.Tipo Sentido') tipo_sentido,\n  json_value(content, '$.Propriedade da Parada') propriedade_da_parada,\n  json_value(content, '$.Seletivado') seletivado,\n  json_value(content, '$.Sinaliza\u00e7\u00e3o') sinalizacao,\n  json_value(content, '$.Conserva\u00e7\u00e3o') conservacao,\n  json_value(content, '$.Tipo de abrigo') tipo_de_abrigo,\n  json_value(content, '$.Conserva\u00e7\u00e3o do abrigo') conservacao_do_abrigo,\n  json_value(content, '$.Tipo de assento') tipo_do_assento,\n  json_value(content, '$.Tipo de baia') tipo_de_baia,\n  json_value(content, '$.Tipo de cal\u00e7ada') tipo_de_calcada,\n  json_value(content, '$.\"Possui lixeiras?\"') possui_lixeiras,\n  json_value(content, '$.Tipo rampa') tipo_rampa,\n  json_value(content, '$.\"Braile?\"') braile,\n  json_value(content, '$.\"Piso t\u00e1til?\"') piso_tatil,\n  json_value(content, '$.\"Elevador?\"') elevador,\n  json_value(content, '$.N\u00famero de vagas') numero_de_vagas,\n  json_value(content, '$.N\u00famero de cabines') numero_de_cabines,\n  json_value(content, '$.AP') ap,\n  json_value(content, '$.RA') ra,\n  json_value(content, '$.Bairro') bairro,\n  json_value(content, '$.Observa\u00e7\u00f5es') observacoes,\n  json_value(content, '$.Endere\u00e7o') endereco,\n  json_value(content, '$.MultiModal') multi_modal,\n  json_value(content, '$.id_sequencial') id_sequencial,\n  json_value(content, '$.NumeroLinha') numero_linha,\n  json_value(content, '$.Vista') vista,\n  json_value(content, '$.Hor\u00e1rios') horarios,\n  json_value(content, '$.\"Existe o ponto?\"') existe_o_ponto,\n  json_value(content, '$.parent_station') parent_station,\n  json_value(content, '$.nome_ponto') nome_ponto,\n  json_value(content, '$.route_type') route_type,\n  data_versao\n\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_details`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_details_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:16.579510Z", "completed_at": "2025-02-20T18:14:16.584439Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:16.586122Z", "completed_at": "2025-02-20T18:14:16.586132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009682655334472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stop_times_desaninhada", "compiled": true, "compiled_code": "SELECT\n  stop_id,\n  JSON_VALUE(content, \"$.trip_id\") trip_id,\n  JSON_VALUE(content, \"$.arrival_time\") arrival_time,\n  JSON_VALUE(content, \"$.departure_time\") departure_time,\n  JSON_VALUE(content, \"$.stop_sequence\") stop_sequence,\n  JSON_VALUE(content, \"$.shape_dist_traveled\") shape_dist_traveled,\n  DATE(data_versao) data_versao\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_times`", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_times_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:16.593010Z", "completed_at": "2025-02-20T18:14:16.599643Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:16.601140Z", "completed_at": "2025-02-20T18:14:16.601150Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012767314910888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.agg_stops_vistoriadas", "compiled": true, "compiled_code": "WITH t AS (\nSELECT\n    data_versao,\n    case\n        when\n        json_value(content, '$.IDPropriedadeParada') is null\n        then false\n    else true\n    end flag_vistoriada,\n    json_value(content, '$.AP') as AP,\n    json_value(content, '$.RA') as RA,\n    json_value(content, '$.Bairro') as Bairro\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stops`\nwhere json_value(content, '$.PontoExistente') = 'SIM'\nand json_value(content, '$.idModalSmtr') in ('22', 'O'))\nselect data_versao, AP, Bairro,\n    sum(case when flag_vistoriada then 1 else 0 end) n_vistoridas,\n    count(*) n_pontos\nfrom t\ngroup by data_versao, AP, Bairro\norder by 1,2,3", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`agg_stops_vistoriadas`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:16.605198Z", "completed_at": "2025-02-20T18:14:16.609509Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:16.610793Z", "completed_at": "2025-02-20T18:14:16.610801Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008008003234863281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.stops_desaninhada", "compiled": true, "compiled_code": "SELECT\n    stop_id,\n    case when json_value(content, '$.IDPropriedadeParada') is null then false else true end flag_vistoriada,\n    json_value(content, '$.stop_name') as stop_name,\n    json_value(content, '$.stop_desc') as stop_desc,\n    json_value(content, '$.stop_lat') as stop_lat,\n    json_value(content, '$.stop_lon') as stop_lon,\n    json_value(content, '$.location_type') as location_type,\n    json_value(content, '$.GrupoLatitude') as GrupoLatitude,\n    json_value(content, '$.GrupoLongitude') as GrupoLongitude,\n    json_value(content, '$.idModalSmtr') as idModalSmtr,\n    json_value(content, '$.IDCorredor') as IDCorredor,\n    json_value(content, '$.IDTipoParada') as IDTipoParada,\n    json_value(content, '$.IDTipoSentido') as IDTipoSentido,\n    json_value(content, '$.IDPropriedadeParada') as IDPropriedadeParada,\n    json_value(content, '$.Seletivado') as Seletivado,\n    json_value(content, '$.BRS') as BRS,\n    json_value(content, '$.IDTipoSinalizacao') as IDTipoSinalizacao,\n    json_value(content, '$.IDConservacaoSinalizacao') as IDConservacaoSinalizacao,\n    json_value(content, '$.IDTipoAbrigo') as IDTipoAbrigo,\n    json_value(content, '$.ConservacaoAbrigo') as ConservacaoAbrigo,\n    json_value(content, '$.IDTipoAssento') as IDTipoAssento,\n    json_value(content, '$.IDTipoBaia') as IDTipoBaia,\n    json_value(content, '$.QualidadePavimento') as QualidadePavimento,\n    json_value(content, '$.IDTipoCalcada') as IDTipoCalcada,\n    json_value(content, '$.IDLixeiras') as IDLixeiras,\n    json_value(content, '$.IDRampa') as IDRampa,\n    json_value(content, '$.braile') as braile,\n    json_value(content, '$.piso_tatil') as piso_tatil,\n    json_value(content, '$.elevador') as elevador,\n    json_value(content, '$.n_vagas') as n_vagas,\n    json_value(content, '$.n_cabines') as n_cabines,\n    json_value(content, '$.AP') as AP,\n    json_value(content, '$.RA') as RA,\n    json_value(content, '$.Bairro') as Bairro,\n    json_value(content, '$.Observacoes') as Observacoes,\n    json_value(content, '$.dataAtualizacao') as dataAtualizacao,\n    json_value(content, '$.endereco') as endereco,\n    json_value(content, '$.IDBairro') as IDBairro,\n    json_value(content, '$.IDRa') as IDRa,\n    json_value(content, '$.MultiModal') as MultiModal,\n    json_value(content, '$.id_sequencial') as id_sequencial,\n    json_value(content, '$.NumeroLinha') as NumeroLinha,\n    json_value(content, '$.Vista') as Vista,\n    json_value(content, '$.Horarios') as Horarios,\n    json_value(content, '$.id') as id,\n    json_value(content, '$.PontoExistente') as PontoExistente\nFROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stops` t\nwhere data_versao = (select max(data_versao) FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stops`)\nand json_value(content, '$.PontoExistente') = 'SIM'\nand json_value(content, '$.idModalSmtr') in ('22', '23', 'O')", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stops_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:16.614510Z", "completed_at": "2025-02-20T18:14:22.120200Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:22.130585Z", "completed_at": "2025-02-20T18:14:22.130621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.521002292633057, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_data_versao_efetiva", "compiled": true, "compiled_code": "\n\n\n\n  \n  \n  \n\n\nWITH\n  dates AS (\n  SELECT\n    data,\n    CASE\n        WHEN data = \"2022-06-16\" THEN \"Domingo\"\n        WHEN data = \"2022-06-17\" THEN \"Sabado\"\n        WHEN data = \"2022-09-02\" THEN \"Sabado\"\n        WHEN data = \"2022-09-07\" THEN \"Domingo\"\n        WHEN data = \"2022-10-12\" THEN \"Domingo\"\n        WHEN data = \"2022-10-17\" THEN \"Sabado\"\n        WHEN data = \"2022-11-02\" THEN \"Domingo\"\n        WHEN data = \"2022-11-14\" THEN \"Sabado\"\n        WHEN data = \"2022-11-15\" THEN \"Domingo\"\n        WHEN data = \"2022-11-24\" THEN \"Sabado\"\n        WHEN data = \"2022-11-28\" THEN \"Sabado\"\n        WHEN data = \"2022-12-02\" THEN \"Sabado\"\n        WHEN data = \"2022-12-05\" THEN \"Sabado\"\n        WHEN data = \"2022-12-09\" THEN \"Sabado\"\n        WHEN data = \"2023-04-06\" THEN \"Sabado\" -- Ponto Facultativo - DECRETO RIO N\u00ba 52275/2023\n        WHEN data = \"2023-04-07\" THEN \"Domingo\" -- Paix\u00e3o de Cristo -- Art. 1\u00ba, V - PORTARIA ME N\u00ba 11.090/2022\n        WHEN data = \"2023-06-08\" THEN \"Domingo\" -- Corpus Christi - Lei n\u00ba 336/1949 - OF\u00cdCIO N\u00ba MTR-OFI-2023/03260 (MTROFI202303260A)\n        WHEN data = \"2023-06-09\" THEN \"Sabado\" -- Ponto Facultativo - DECRETO RIO N\u00ba 52584/2023\n        WHEN data = \"2023-09-08\" THEN \"Ponto Facultativo\" -- Ponto Facultativo - DECRETO RIO N\u00ba 53137/2023\n        WHEN data = \"2023-10-13\" THEN \"Ponto Facultativo\" -- Ponto Facultativo - DECRETO RIO N\u00ba 53296/2023\n        WHEN data = \"2023-10-16\" THEN \"Ponto Facultativo\" -- Dia do Com\u00e9rcio - OS Outubro/Q2\n        WHEN data = \"2023-11-03\" THEN \"Ponto Facultativo\" -- Ponto Facultativo - DECRETO RIO N\u00ba 53417/2023\n        WHEN data = \"2023-11-05\" THEN \"Sabado\" -- Domingo At\u00edpico - ENEM - OS Novembro/Q1\n        WHEN data = \"2023-11-12\" THEN \"Sabado\" -- Domingo At\u00edpico - ENEM - OS Novembro/Q1\n        WHEN data = \"2023-12-02\" THEN \"Sabado - Ver\u00e3o\" -- OS de Ver\u00e3o\n        WHEN data = \"2023-12-03\" THEN \"Domingo - Ver\u00e3o\" -- OS de Ver\u00e3o\n        WHEN data = \"2023-12-16\" THEN \"Sabado - Ver\u00e3o\" -- OS de Ver\u00e3o\n        WHEN data = \"2023-12-17\" THEN \"Domingo - Ver\u00e3o\" -- OS de Ver\u00e3o\n        WHEN data = \"2024-01-06\" THEN \"Sabado - Ver\u00e3o\" -- OS de Ver\u00e3o\n        WHEN data = \"2024-01-07\" THEN \"Domingo - Ver\u00e3o\" -- OS de Ver\u00e3o\n        WHEN data = \"2024-02-09\" THEN \"Ponto Facultativo\" -- Despacho MTR-DES-2024/07951\n        WHEN data = \"2024-02-12\" THEN \"Domingo\" -- Despacho MTR-DES-2024/07951\n        WHEN data = \"2024-02-13\" THEN \"Domingo\" -- Despacho MTR-DES-2024/07951\n        WHEN data = \"2024-02-14\" THEN \"Ponto Facultativo\" -- Despacho MTR-DES-2024/07951\n        WHEN data = \"2023-12-31\" THEN \"Domingo - R\u00e9veillon\"\n        WHEN data = \"2024-01-01\" THEN \"Domingo - R\u00e9veillon\"\n        WHEN data = \"2024-02-24\" THEN \"Sabado - Ver\u00e3o\" -- OS de Ver\u00e3o - Despacho MTR-DES-2024/10516\n        WHEN data = \"2024-02-25\" THEN \"Domingo - Ver\u00e3o\" -- OS de Ver\u00e3o - Despacho MTR-DES-2024/10516\n        WHEN data = \"2024-03-16\" THEN \"Sabado - Ver\u00e3o\" -- OS de Ver\u00e3o - Despacho MTR-DES-2024/15504\n        WHEN data = \"2024-03-17\" THEN \"Domingo - Ver\u00e3o\" -- OS de Ver\u00e3o - Despacho MTR-DES-2024/15504\n        WHEN data = \"2024-03-22\" THEN \"Ponto Facultativo\" -- Ponto Facultativo - DECRETO RIO N\u00ba 54114/2024\n        WHEN data = \"2024-03-28\" THEN \"Ponto Facultativo\" -- Ponto Facultativo - DECRETO RIO N\u00ba 54081/2024\n        WHEN data = \"2024-03-29\" THEN \"Domingo\" -- Feriado de Paix\u00e3o de Cristo (Sexta-feira Santa)\n        WHEN EXTRACT(DAY FROM data) = 20 AND EXTRACT(MONTH FROM data) = 1 THEN \"Domingo\" -- Dia de S\u00e3o Sebasti\u00e3o -- Art. 8\u00b0, I - Lei Municipal n\u00ba 5146/2010\n        WHEN EXTRACT(DAY FROM data) = 23 AND EXTRACT(MONTH FROM data) = 4 THEN \"Domingo\" -- Dia de S\u00e3o Jorge -- Art. 8\u00b0, II - Lei Municipal n\u00ba 5146/2010 / Lei Estadual N\u00ba 5198/2008 / Lei Estadual N\u00ba 5645/2010\n        WHEN EXTRACT(DAY FROM data) = 20 AND EXTRACT(MONTH FROM data) = 11 THEN \"Domingo\" -- Anivers\u00e1rio de morte de Zumbi dos Palmares / Dia da Consci\u00eancia Negra -- Art. 8\u00b0, IV - Lei Municipal n\u00ba 5146/2010 / Lei Estadual n\u00ba 526/1982 / Lei Estadual n\u00ba 1929/1991 / Lei Estadual n\u00ba 4007/2002 / Lei Estadual N\u00ba 5645/2010\n        WHEN EXTRACT(DAY FROM data) = 21 AND EXTRACT(MONTH FROM data) = 4 THEN \"Domingo\" -- Tiradentes -- Art. 1\u00ba, VI - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAY FROM data) = 1 AND EXTRACT(MONTH FROM data) = 5 THEN \"Domingo\" -- Dia Mundial do Trabalho -- Art. 1\u00ba, VII - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAY FROM data) = 7 AND EXTRACT(MONTH FROM data) = 9 THEN \"Domingo\" -- Independ\u00eancia do Brasil -- Art. 1\u00ba, IX - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAY FROM data) = 12 AND EXTRACT(MONTH FROM data) = 10 THEN \"Domingo\" -- Nossa Senhora Aparecida -- Art. 1\u00ba, X - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAY FROM data) = 2 AND EXTRACT(MONTH FROM data) = 11 THEN \"Domingo\" -- Finados -- Art. 1\u00ba, XII - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAY FROM data) = 15 AND EXTRACT(MONTH FROM data) = 11 THEN \"Domingo\" -- Proclama\u00e7\u00e3o da Rep\u00fablica -- Art. 1\u00ba, XIII - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAY FROM data) = 25 AND EXTRACT(MONTH FROM data) = 12 THEN \"Domingo\" -- Natal -- Art. 1\u00ba, XIV - PORTARIA ME N\u00ba 11.090/2022\n        WHEN EXTRACT(DAYOFWEEK FROM data) = 1 THEN \"Domingo\"\n        WHEN EXTRACT(DAYOFWEEK FROM data) = 7 THEN \"Sabado\"\n        ELSE \"Dia \u00datil\"\n    END AS tipo_dia,\n    CASE\n      -- Reveillon 2022:\n      WHEN data = DATE(2022,12,31) THEN data\n      WHEN data = DATE(2023,1,1) THEN data\n      WHEN data BETWEEN DATE(2023,1,2) AND DATE(2023,1,15) THEN DATE(2023,1,2)\n      -- Reprocessamento:\n      WHEN data BETWEEN DATE(2023,1,15) AND DATE(2023,1,31) THEN DATE(2023,1,16)\n      WHEN data BETWEEN DATE(2023,3,16) AND DATE(2023,3,31) THEN DATE(2023,3,16)\n      -- Altera\u00e7\u00e3o de Planejamento\n      WHEN data BETWEEN DATE(2023,6,16) AND DATE(2023,6,30) THEN DATE(2023,6,16)\n      WHEN data BETWEEN DATE(2023,7,16) AND DATE(2023,7,31) THEN DATE(2023,7,16)\n      WHEN data BETWEEN DATE(2023,8,16) AND DATE(2023,8,31) THEN DATE(2023,8,16)\n      WHEN data BETWEEN DATE(2023,9,16) AND DATE(2023,9,30) THEN DATE(2023,9,16)\n      WHEN data BETWEEN DATE(2023,10,16) AND DATE(2023,10,16) THEN DATE(2023,10,16)\n      WHEN data BETWEEN DATE(2023,10,17) AND DATE(2023,10,23) THEN DATE(2023,10,17)\n      WHEN data BETWEEN DATE(2023,10,24) AND DATE(2023,10,31) THEN DATE(2023,10,24)\n      WHEN data = DATE(2023,12,01) THEN data -- Desvio do TIG\n      WHEN data BETWEEN DATE(2023,12,02) AND DATE(2023,12,03) THEN DATE(2023,12,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2023,12,16) AND DATE(2023,12,17) THEN DATE(2023,12,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2023,12,04) AND DATE(2023,12,20) THEN DATE(2023,12,02) -- Fim do desvio do TIG\n      WHEN data BETWEEN DATE(2023,12,21) AND DATE(2023,12,30) THEN DATE(2023,12,21)\n      -- Reveillon 2023:\n      WHEN data = DATE(2023,12,31) THEN data\n      WHEN data = DATE(2024,01,01) THEN data\n      -- 2024:\n      WHEN data BETWEEN DATE(2024,01,06) AND DATE(2024,01,07) THEN DATE(2024,01,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2024,01,02) AND DATE(2024,01,14) THEN DATE(2024,01,02)\n      WHEN data BETWEEN DATE(2024,01,15) AND DATE(2024,01,31) THEN DATE(2024,01,15)\n      WHEN data BETWEEN DATE(2024,02,01) AND DATE(2024,02,18) THEN DATE(2024,02,01) -- OS fev/Q1\n      WHEN data BETWEEN DATE(2024,02,19) AND DATE(2024,02,23) THEN DATE(2024,02,19) -- OS fev/Q2\n      WHEN data BETWEEN DATE(2024,02,24) AND DATE(2024,02,25) THEN DATE(2024,02,25) -- OS fev/Q2 - TIG - OS Ver\u00e3o\n      WHEN data BETWEEN DATE(2024,02,26) AND DATE(2024,03,01) THEN DATE(2024,02,24) -- OS fev/Q2 - TIG\n      WHEN data BETWEEN DATE(2024,03,02) AND DATE(2024,03,10) THEN DATE(2024,03,02) -- OS mar/Q1\n      WHEN data BETWEEN DATE(2024,03,11) AND DATE(2024,03,15) THEN DATE(2024,03,11) -- OS mar/Q1\n      WHEN data BETWEEN DATE(2024,03,16) AND DATE(2024,03,17) THEN DATE(2024,03,12) -- OS mar/Q2\n      WHEN data BETWEEN DATE(2024,03,18) AND DATE(2024,03,29) THEN DATE(2024,03,18) -- OS mar/Q2\n      WHEN data BETWEEN DATE(2024,03,30) AND DATE(2024,04,30) THEN DATE(2024,03,30) -- OS abr/Q1\n      -- 2022:\n      WHEN data BETWEEN DATE(2022,10,1) AND DATE(2022,10,2) THEN DATE(2022,9,16)\n      WHEN data BETWEEN DATE(2022,6,1) AND LAST_DAY(DATE(2022,6,30), MONTH) THEN DATE(2022,6,1)\n      \n        WHEN data BETWEEN DATE(2022,7,1) AND DATE(2022,7,15) THEN DATE(2022,7,1)\n        WHEN data BETWEEN DATE(2022,7,16) AND LAST_DAY(DATE(2022,7,30), MONTH) THEN DATE(2022,7,16)\n      \n        WHEN data BETWEEN DATE(2022,8,1) AND DATE(2022,8,15) THEN DATE(2022,8,1)\n        WHEN data BETWEEN DATE(2022,8,16) AND LAST_DAY(DATE(2022,8,30), MONTH) THEN DATE(2022,8,16)\n      \n        WHEN data BETWEEN DATE(2022,9,1) AND DATE(2022,9,15) THEN DATE(2022,9,1)\n        WHEN data BETWEEN DATE(2022,9,16) AND LAST_DAY(DATE(2022,9,30), MONTH) THEN DATE(2022,9,16)\n      \n        WHEN data BETWEEN DATE(2022,10,1) AND DATE(2022,10,15) THEN DATE(2022,10,1)\n        WHEN data BETWEEN DATE(2022,10,16) AND LAST_DAY(DATE(2022,10,30), MONTH) THEN DATE(2022,10,16)\n      \n        WHEN data BETWEEN DATE(2022,11,1) AND DATE(2022,11,15) THEN DATE(2022,11,1)\n        WHEN data BETWEEN DATE(2022,11,16) AND LAST_DAY(DATE(2022,11,30), MONTH) THEN DATE(2022,11,16)\n      \n        WHEN data BETWEEN DATE(2022,12,1) AND DATE(2022,12,15) THEN DATE(2022,12,1)\n        WHEN data BETWEEN DATE(2022,12,16) AND LAST_DAY(DATE(2022,12,30), MONTH) THEN DATE(2022,12,16)\n      \n      -- 2023 a 2024:\n      \n        \n          WHEN EXTRACT(MONTH FROM data) = 1 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,1,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 2 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,2,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 3 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,3,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 4 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,4,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 5 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,5,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 6 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,6,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 7 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,7,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 8 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,8,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 9 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,9,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 10 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,10,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 11 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,11,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 12 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,12,1)\n        \n      \n        \n          WHEN EXTRACT(MONTH FROM data) = 1 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,1,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 2 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,2,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 3 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,3,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 4 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,4,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 5 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,5,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 6 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,6,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 7 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,7,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 8 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,8,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 9 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,9,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 10 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,10,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 11 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,11,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 12 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,12,1)\n        \n      \n    END AS data_versao_trips,\n    CASE\n      -- Reveillon 2022:\n      WHEN data = DATE(2022,12,31) THEN data\n      WHEN data = DATE(2023,1,1) THEN data\n      WHEN data BETWEEN DATE(2023,1,2) AND DATE(2023,1,15) THEN DATE(2023,1,2)\n      -- Reprocessamento:\n      WHEN data BETWEEN DATE(2023,1,15) AND DATE(2023,1,31) THEN DATE(2023,1,16)\n      WHEN data BETWEEN DATE(2023,3,16) AND DATE(2023,3,31) THEN DATE(2023,3,16)\n      -- Altera\u00e7\u00e3o de Planejamento\n      WHEN data BETWEEN DATE(2023,6,16) AND DATE(2023,6,30) THEN DATE(2023,6,16)\n      WHEN data BETWEEN DATE(2023,7,16) AND DATE(2023,7,31) THEN DATE(2023,7,16)\n      WHEN data BETWEEN DATE(2023,8,16) AND DATE(2023,8,31) THEN DATE(2023,8,16)\n      WHEN data BETWEEN DATE(2023,9,16) AND DATE(2023,9,30) THEN DATE(2023,9,16)\n      WHEN data BETWEEN DATE(2023,10,16) AND DATE(2023,10,16) THEN DATE(2023,10,16)\n      WHEN data BETWEEN DATE(2023,10,17) AND DATE(2023,10,23) THEN DATE(2023,10,17)\n      WHEN data BETWEEN DATE(2023,10,24) AND DATE(2023,10,31) THEN DATE(2023,10,24)\n      WHEN data = DATE(2023,12,01) THEN data -- Desvio do TIG\n      WHEN data BETWEEN DATE(2023,12,02) AND DATE(2023,12,03) THEN DATE(2023,12,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2023,12,16) AND DATE(2023,12,17) THEN DATE(2023,12,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2023,12,04) AND DATE(2023,12,20) THEN DATE(2023,12,02) -- Fim do desvio do TIG\n      WHEN data BETWEEN DATE(2023,12,21) AND DATE(2023,12,30) THEN DATE(2023,12,21)\n      -- Reveillon 2023:\n      WHEN data = DATE(2023,12,31) THEN data\n      WHEN data = DATE(2024,01,01) THEN data\n      -- 2024:\n      WHEN data BETWEEN DATE(2024,01,06) AND DATE(2024,01,07) THEN DATE(2024,01,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2024,01,02) AND DATE(2024,01,14) THEN DATE(2024,01,02)\n      WHEN data BETWEEN DATE(2024,01,15) AND DATE(2024,01,31) THEN DATE(2024,01,15)\n      WHEN data BETWEEN DATE(2024,02,01) AND DATE(2024,02,18) THEN DATE(2024,02,01) -- OS fev/Q1\n      WHEN data BETWEEN DATE(2024,02,19) AND DATE(2024,02,23) THEN DATE(2024,02,19) -- OS fev/Q2\n      WHEN data BETWEEN DATE(2024,02,24) AND DATE(2024,02,25) THEN DATE(2024,02,25) -- OS fev/Q2 - TIG - OS Ver\u00e3o\n      WHEN data BETWEEN DATE(2024,02,26) AND DATE(2024,03,01) THEN DATE(2024,02,24) -- OS fev/Q2 - TIG\n      WHEN data BETWEEN DATE(2024,03,02) AND DATE(2024,03,10) THEN DATE(2024,03,02) -- OS mar/Q1\n      WHEN data BETWEEN DATE(2024,03,11) AND DATE(2024,03,15) THEN DATE(2024,03,11) -- OS mar/Q1\n      WHEN data BETWEEN DATE(2024,03,16) AND DATE(2024,03,17) THEN DATE(2024,03,12) -- OS mar/Q2\n      WHEN data BETWEEN DATE(2024,03,18) AND DATE(2024,03,29) THEN DATE(2024,03,18) -- OS mar/Q2\n      WHEN data BETWEEN DATE(2024,03,30) AND DATE(2024,04,30) THEN DATE(2024,03,30) -- OS abr/Q1\n      -- 2022:\n      WHEN data BETWEEN DATE(2022,10,1) AND DATE(2022,10,2) THEN DATE(2022,9,16)\n      WHEN data BETWEEN DATE(2022,6,1) AND LAST_DAY(DATE(2022,6,30), MONTH) THEN DATE(2022,6,1)\n      \n        WHEN data BETWEEN DATE(2022,7,1) AND DATE(2022,7,15) THEN DATE(2022,7,1)\n        WHEN data BETWEEN DATE(2022,7,16) AND LAST_DAY(DATE(2022,7,30), MONTH) THEN DATE(2022,7,16)\n      \n        WHEN data BETWEEN DATE(2022,8,1) AND DATE(2022,8,15) THEN DATE(2022,8,1)\n        WHEN data BETWEEN DATE(2022,8,16) AND LAST_DAY(DATE(2022,8,30), MONTH) THEN DATE(2022,8,16)\n      \n        WHEN data BETWEEN DATE(2022,9,1) AND DATE(2022,9,15) THEN DATE(2022,9,1)\n        WHEN data BETWEEN DATE(2022,9,16) AND LAST_DAY(DATE(2022,9,30), MONTH) THEN DATE(2022,9,16)\n      \n        WHEN data BETWEEN DATE(2022,10,1) AND DATE(2022,10,15) THEN DATE(2022,10,1)\n        WHEN data BETWEEN DATE(2022,10,16) AND LAST_DAY(DATE(2022,10,30), MONTH) THEN DATE(2022,10,16)\n      \n        WHEN data BETWEEN DATE(2022,11,1) AND DATE(2022,11,15) THEN DATE(2022,11,1)\n        WHEN data BETWEEN DATE(2022,11,16) AND LAST_DAY(DATE(2022,11,30), MONTH) THEN DATE(2022,11,16)\n      \n        WHEN data BETWEEN DATE(2022,12,1) AND DATE(2022,12,15) THEN DATE(2022,12,1)\n        WHEN data BETWEEN DATE(2022,12,16) AND LAST_DAY(DATE(2022,12,30), MONTH) THEN DATE(2022,12,16)\n      \n      -- 2023 a 2024:\n      \n        \n          WHEN EXTRACT(MONTH FROM data) = 1 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,1,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 2 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,2,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 3 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,3,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 4 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,4,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 5 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,5,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 6 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,6,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 7 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,7,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 8 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,8,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 9 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,9,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 10 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,10,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 11 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,11,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 12 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,12,1)\n        \n      \n        \n          WHEN EXTRACT(MONTH FROM data) = 1 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,1,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 2 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,2,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 3 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,3,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 4 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,4,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 5 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,5,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 6 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,6,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 7 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,7,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 8 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,8,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 9 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,9,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 10 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,10,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 11 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,11,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 12 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,12,1)\n        \n      \n    END AS data_versao_shapes,\n    CASE\n      -- Reveillon 2022:\n      WHEN data = DATE(2022,12,31) THEN data\n      WHEN data = DATE(2023,1,1) THEN data\n      WHEN data BETWEEN DATE(2023,1,2) AND DATE(2023,1,15) THEN DATE(2023,1,2)\n      -- Reprocessamento:\n      WHEN data BETWEEN DATE(2023,1,15) AND DATE(2023,1,31) THEN DATE(2023,1,16)\n      WHEN data BETWEEN DATE(2023,3,16) AND DATE(2023,3,31) THEN DATE(2023,3,16)\n      -- Altera\u00e7\u00e3o de Planejamento\n      WHEN data BETWEEN DATE(2023,6,16) AND DATE(2023,6,30) THEN DATE(2023,6,16)\n      WHEN data BETWEEN DATE(2023,7,16) AND DATE(2023,7,31) THEN DATE(2023,7,16)\n      WHEN data BETWEEN DATE(2023,8,16) AND DATE(2023,8,31) THEN DATE(2023,8,16)\n      WHEN data BETWEEN DATE(2023,9,16) AND DATE(2023,9,30) THEN DATE(2023,9,16)\n      WHEN data BETWEEN DATE(2023,10,16) AND DATE(2023,10,16) THEN DATE(2023,10,16)\n      WHEN data BETWEEN DATE(2023,10,17) AND DATE(2023,10,23) THEN DATE(2023,10,17)\n      WHEN data BETWEEN DATE(2023,10,24) AND DATE(2023,10,31) THEN DATE(2023,10,24)\n      WHEN data = DATE(2023,12,01) THEN data -- Desvio do TIG\n      WHEN data BETWEEN DATE(2023,12,02) AND DATE(2023,12,03) THEN DATE(2023,12,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2023,12,16) AND DATE(2023,12,17) THEN DATE(2023,12,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2023,12,04) AND DATE(2023,12,20) THEN DATE(2023,12,02) -- Fim do desvio do TIG\n      WHEN data BETWEEN DATE(2023,12,21) AND DATE(2023,12,30) THEN DATE(2023,12,21)\n      -- Reveillon 2023:\n      WHEN data = DATE(2023,12,31) THEN data\n      WHEN data = DATE(2024,01,01) THEN data\n      -- 2024:\n      WHEN data BETWEEN DATE(2024,01,06) AND DATE(2024,01,07) THEN DATE(2024,01,03) -- OS de Ver\u00e3o\n      WHEN data BETWEEN DATE(2024,01,02) AND DATE(2024,01,14) THEN DATE(2024,01,02)\n      WHEN data BETWEEN DATE(2024,01,15) AND DATE(2024,01,31) THEN DATE(2024,01,15)\n      WHEN data BETWEEN DATE(2024,02,01) AND DATE(2024,02,18) THEN DATE(2024,02,01) -- OS fev/Q1\n      WHEN data BETWEEN DATE(2024,02,19) AND DATE(2024,02,23) THEN DATE(2024,02,19) -- OS fev/Q2\n      WHEN data BETWEEN DATE(2024,02,24) AND DATE(2024,02,25) THEN DATE(2024,02,25) -- OS fev/Q2 - TIG - OS Ver\u00e3o\n      WHEN data BETWEEN DATE(2024,02,26) AND DATE(2024,03,01) THEN DATE(2024,02,24) -- OS fev/Q2 - TIG\n      WHEN data BETWEEN DATE(2024,03,02) AND DATE(2024,03,10) THEN DATE(2024,03,02) -- OS mar/Q1\n      WHEN data BETWEEN DATE(2024,03,11) AND DATE(2024,03,15) THEN DATE(2024,03,11) -- OS mar/Q1\n      WHEN data BETWEEN DATE(2024,03,16) AND DATE(2024,03,17) THEN DATE(2024,03,12) -- OS mar/Q2\n      WHEN data BETWEEN DATE(2024,03,18) AND DATE(2024,03,29) THEN DATE(2024,03,18) -- OS mar/Q2\n      WHEN data BETWEEN DATE(2024,03,30) AND DATE(2024,04,30) THEN DATE(2024,03,30) -- OS abr/Q1\n      -- 2022:\n      \n        WHEN data BETWEEN DATE(2022,6,1) AND DATE(2022,6,15) THEN DATE(2022,6,1)\n        WHEN data BETWEEN DATE(2022,6,16) AND LAST_DAY(DATE(2022,6,30), MONTH) THEN DATE(2022,6,16)\n      \n        WHEN data BETWEEN DATE(2022,7,1) AND DATE(2022,7,15) THEN DATE(2022,7,1)\n        WHEN data BETWEEN DATE(2022,7,16) AND LAST_DAY(DATE(2022,7,30), MONTH) THEN DATE(2022,7,16)\n      \n        WHEN data BETWEEN DATE(2022,8,1) AND DATE(2022,8,15) THEN DATE(2022,8,1)\n        WHEN data BETWEEN DATE(2022,8,16) AND LAST_DAY(DATE(2022,8,30), MONTH) THEN DATE(2022,8,16)\n      \n        WHEN data BETWEEN DATE(2022,9,1) AND DATE(2022,9,15) THEN DATE(2022,9,1)\n        WHEN data BETWEEN DATE(2022,9,16) AND LAST_DAY(DATE(2022,9,30), MONTH) THEN DATE(2022,9,16)\n      \n        WHEN data BETWEEN DATE(2022,10,1) AND DATE(2022,10,15) THEN DATE(2022,10,1)\n        WHEN data BETWEEN DATE(2022,10,16) AND LAST_DAY(DATE(2022,10,30), MONTH) THEN DATE(2022,10,16)\n      \n        WHEN data BETWEEN DATE(2022,11,1) AND DATE(2022,11,15) THEN DATE(2022,11,1)\n        WHEN data BETWEEN DATE(2022,11,16) AND LAST_DAY(DATE(2022,11,30), MONTH) THEN DATE(2022,11,16)\n      \n        WHEN data BETWEEN DATE(2022,12,1) AND DATE(2022,12,15) THEN DATE(2022,12,1)\n        WHEN data BETWEEN DATE(2022,12,16) AND LAST_DAY(DATE(2022,12,30), MONTH) THEN DATE(2022,12,16)\n      \n      -- 2023 a 2024:\n      \n        \n          WHEN EXTRACT(MONTH FROM data) = 1 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,1,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 2 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,2,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 3 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,3,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 4 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,4,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 5 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,5,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 6 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,6,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 7 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,7,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 8 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,8,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 9 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,9,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 10 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,10,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 11 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,11,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 12 AND EXTRACT(YEAR FROM data) = 2023 THEN DATE(2023,12,1)\n        \n      \n        \n          WHEN EXTRACT(MONTH FROM data) = 1 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,1,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 2 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,2,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 3 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,3,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 4 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,4,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 5 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,5,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 6 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,6,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 7 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,7,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 8 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,8,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 9 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,9,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 10 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,10,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 11 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,11,1)\n        \n          WHEN EXTRACT(MONTH FROM data) = 12 AND EXTRACT(YEAR FROM data) = 2024 THEN DATE(2024,12,1)\n        \n      \n    END AS data_versao_frequencies,\n    CASE\n      WHEN EXTRACT(YEAR FROM data) = 2022 THEN (\n        CASE\n          WHEN EXTRACT(MONTH FROM data) = 6 THEN 2.13\n          WHEN EXTRACT(MONTH FROM data) = 7 THEN 1.84\n          WHEN EXTRACT(MONTH FROM data) = 8 THEN 1.80\n          WHEN EXTRACT(MONTH FROM data) = 9 THEN 1.75\n          WHEN EXTRACT(MONTH FROM data) = 10 THEN 1.62\n          WHEN EXTRACT(MONTH FROM data) = 11 THEN 1.53\n          WHEN EXTRACT(MONTH FROM data) = 12 THEN 1.78\n        END\n      )\n      WHEN EXTRACT(YEAR FROM data) = 2023 THEN (\n        CASE\n          WHEN data <= DATE(\"2023-01-06\") THEN 3.18\n          ELSE 2.81\n        END\n      )\n    END AS valor_subsidio_por_km\n  FROM UNNEST(GENERATE_DATE_ARRAY(\"2022-06-01\", DATE_SUB(\"2024-04-01\", INTERVAL 1 DAY))) AS data),\n  trips AS (\n  SELECT\n    DISTINCT data_versao\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_trips_desaninhada`\n  \n  WHERE\n    data_versao >= DATE_TRUNC(DATE_SUB(DATE(\"2022-01-01T01:00:00\"), INTERVAL 30 DAY), MONTH)\n  \n  ),\n  shapes AS (\n  SELECT\n    DISTINCT data_versao\n  FROM\n    `rj-smtr-staging.projeto_subsidio_sppo_staging.shapes`\n  \n  WHERE\n    data_versao >= DATE_TRUNC(DATE_SUB(DATE(\"2022-01-01T01:00:00\"), INTERVAL 30 DAY), MONTH)\n  \n  ),\n  frequencies AS (\n  SELECT\n    DISTINCT data_versao\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_quadro_horario`\n  \n  WHERE\n    data_versao >= DATE_TRUNC(DATE_SUB(DATE(\"2022-01-01T01:00:00\"), INTERVAL 30 DAY), MONTH)\n  \n  )\nSELECT\n  data,\n  tipo_dia,\n  SAFE_CAST(NULL AS STRING) AS subtipo_dia,\n  COALESCE(t.data_versao, DATE(\"2024-03-30\")) AS data_versao_trips,\n  COALESCE(s.data_versao, DATE(\"2024-03-30\")) AS data_versao_shapes,\n  COALESCE(f.data_versao, DATE(\"2024-03-30\")) AS data_versao_frequencies,\n  valor_subsidio_por_km,\n  SAFE_CAST(NULL AS STRING) AS feed_version,\n  SAFE_CAST(NULL AS DATE)AS feed_start_date,\n  SAFE_CAST(NULL AS STRING) AS tipo_os,\nFROM\n  dates AS d\nLEFT JOIN\n  trips AS t\nON\n  t.data_versao = d.data_versao_trips\nLEFT JOIN\n  shapes AS s\nON\n  s.data_versao = d.data_versao_shapes\nLEFT JOIN\n  frequencies AS f\nON\n  f.data_versao = d.data_versao_frequencies\nWHERE\n\n  data BETWEEN DATE_SUB(DATE(\"2022-01-01T01:00:00\"), INTERVAL 1 DAY) AND DATE(\"2022-01-01T01:00:00\")\n\n\n", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:22.141805Z", "completed_at": "2025-02-20T18:14:22.155208Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:22.156905Z", "completed_at": "2025-02-20T18:14:22.156916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019544363021850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.brt_aux_registros_filtrada", "compiled": true, "compiled_code": "\n/*\n- Descri\u00e7\u00e3o:\nFiltragem e tratamento b\u00e1sico de registros de gps.\n1. Filtra registros antigos. Remove registros que tem diferen\u00e7a maior\n   que 1 minuto entre o timestamp_captura e timestamp_gps.\n2. Filtra registros que est\u00e3o fora de uma caixa que cont\u00e9m a \u00e1rea do\n   munic\u00edpio de Rio de Janeiro.\n*/\nWITH\nbox AS (\n  /*1. Geometria de caixa que cont\u00e9m a \u00e1rea do munic\u00edpio de Rio de Janeiro.*/\n\tSELECT\n\t*\n\tFROM\n\trj-smtr.br_rj_riodejaneiro_geo.limites_geograficos_caixa),\ngps AS (\n  /* 1. Filtra registros antigos. Remove registros que tem diferen\u00e7a maior\n   que 1 minuto entre o timestamp_captura e timestamp_gps.*/\n  SELECT\n    *,\n    ST_GEOGPOINT(longitude, latitude) posicao_veiculo_geo\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_registros_desaninhada`\n  WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <= \"2022-01-01T01:00:00\"\n    AND DATETIME_DIFF(timestamp_captura, timestamp_gps, MINUTE) BETWEEN 0 AND 1\n    ),\nfiltrada AS (\n  /* 2. Filtra registros que est\u00e3o fora de uma caixa que cont\u00e9m a \u00e1rea do\n   munic\u00edpio de Rio de Janeiro.*/\n  SELECT\n    id_veiculo,\n    latitude,\n    longitude,\n    posicao_veiculo_geo,\n    velocidade,\n    servico,\n    timestamp_gps,\n    timestamp_captura,\n    data,\n    hora,\n    row_number() over (partition by id_veiculo, timestamp_gps, servico) rn\n  FROM\n    gps\n  WHERE\n    ST_INTERSECTSBOX(posicao_veiculo_geo,\n      ( SELECT min_longitude FROM box),\n      ( SELECT min_latitude FROM box),\n      ( SELECT max_longitude FROM box),\n      ( SELECT max_latitude FROM box))\n  )\nSELECT\n  * except(rn),\n  \"\" as versao\nFROM\n  filtrada\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:22.161333Z", "completed_at": "2025-02-20T18:14:24.417826Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:24.423342Z", "completed_at": "2025-02-20T18:14:24.423376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.267805814743042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.calendario", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n        \n\n        \n    \n\n\nwith\n    calendar as (\n        select *\n        \n        from `rj-smtr`.`gtfs`.`calendar`\n        \n            where feed_start_date in ()\n        \n    ),\n    datas as (\n        select data, extract(dayofweek from data) as dia_semana, feed_start_date\n        from\n            `rj-smtr`.`gtfs`.`feed_info`,\n            unnest(\n                generate_date_array(\n                    \n                        date(\"2022-01-01T00:00:00\"),\n                        date(\"2022-01-01T01:00:00\")\n                    \n                )\n            ) as data\n        where\n            data >= feed_start_date and (data <= feed_end_date or feed_end_date is null)\n    ),\n    modificacao_manual as (\n        select\n            d.data,\n            d.dia_semana,\n            coalesce(m.feed_start_date, d.feed_start_date) as feed_start_date,\n            m.tipo_dia,\n            ifnull(m.tipo_os, \"Regular\") as tipo_os\n        from datas d\n        left join `rj-smtr`.`planejamento_staging`.`aux_calendario_manual` m using (data)\n    ),\n    calendar_dates as (\n        select\n            cd.date as data,\n            m.tipo_dia,\n            m.tipo_os,\n            case\n                when cd.exception_type = '2'\n                then\n                    regexp_replace(\n                        cd.service_id,\n                        \"^[U|S|D]_\",\n                        case\n                            when extract(dayofweek from cd.date) = 7\n                            then \"S_\"\n                            when extract(dayofweek from cd.date) = 1\n                            then \"D_\"\n                            else \"U_\"\n                        end\n                    )\n                else cd.service_id\n            end as service_id,\n            cd.exception_type,\n            cd.feed_start_date,\n        \n        from `rj-smtr`.`gtfs`.`calendar_dates` cd\n        join\n            modificacao_manual m\n            on cd.date = m.data\n            and cd.feed_start_date = m.feed_start_date\n        where\n            \n                cd.feed_start_date in ()\n                and cd.date between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n            \n    ),\n    datas_service_id as (\n        select d.data, d.tipo_dia, d.tipo_os, c.service_id, d.feed_start_date\n        from modificacao_manual d\n        join\n            calendar c\n            on d.feed_start_date = c.feed_start_date\n            and (\n                (d.dia_semana = 1 and c.sunday = '1')\n                or (d.dia_semana = 2 and c.monday = '1')\n                or (d.dia_semana = 3 and c.tuesday = '1')\n                or (d.dia_semana = 4 and c.wednesday = '1')\n                or (d.dia_semana = 5 and c.thursday = '1')\n                or (d.dia_semana = 6 and c.friday = '1')\n                or (d.dia_semana = 7 and c.saturday = '1')\n            )\n    ),\n    service_ids_retirados as (\n        select d.*\n        from datas_service_id d\n        left join\n            (select * from calendar_dates where exception_type = '2') c using (\n                data, service_id\n            )\n        where c.service_id is null\n\n    ),\n    service_ids_adicionados as (\n        select data, tipo_dia, tipo_os, service_id, feed_start_date\n        from service_ids_retirados\n\n        union distinct\n\n        select data, tipo_dia, tipo_os, service_id, feed_start_date\n        from calendar_dates\n        where exception_type = '1'\n    ),\n    service_id_corrigido as (\n        select\n            data,\n            tipo_dia,\n            tipo_os,\n            case\n                when tipo_dia = \"Domingo\"\n                then regexp_replace(service_id, \"^[U|S]_\", \"D_\")\n                when tipo_dia = \"Sabado\"\n                then regexp_replace(service_id, \"^[U|D]_\", \"S_\")\n                when tipo_dia = \"Dia \u00datil\"\n                then regexp_replace(service_id, \"^[S|D]_\", \"U_\")\n                else service_id\n            end as service_id,\n            feed_start_date\n        from service_ids_adicionados\n    ),\n    service_id_agg as (\n        select\n            data,\n            tipo_dia,\n            tipo_os,\n            feed_start_date,\n            array_agg(service_id) as service_ids\n        from service_id_corrigido\n        group by 1, 2, 3, 4\n    )\nselect\n    data,\n    case\n        when c.tipo_dia is not null\n        then c.tipo_dia\n        when \"D_REG\" in unnest(c.service_ids)\n        then \"Domingo\"\n        when \"S_REG\" in unnest(c.service_ids)\n        then \"Sabado\"\n        when \"U_REG\" in unnest(c.service_ids)\n        then \"Dia \u00datil\"\n    end as tipo_dia,\n    case\n        when c.tipo_os = \"Extraordin\u00e1ria - Ver\u00e3o\"\n        then \"Ver\u00e3o\"\n        when c.tipo_os like \"%Madonna%\"\n        then \"Madonna\"\n        when c.tipo_os = \"Regular\"\n        then null\n        else c.tipo_os\n    end as subtipo_dia,\n    c.tipo_os,\n    c.service_ids,\n    i.feed_version,\n    c.feed_start_date,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom service_id_agg c\njoin `rj-smtr`.`gtfs`.`feed_info` i using (feed_start_date)", "relation_name": "`rj-smtr`.`planejamento`.`calendario`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:24.437990Z", "completed_at": "2025-02-20T18:14:24.448499Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:24.450494Z", "completed_at": "2025-02-20T18:14:24.450506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0181732177734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_column_values_to_match_regex__service_id__calendar_gtfs.c915c69497", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(service_id, '^([USD]_|EXCEP)', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from `rj-smtr`.`gtfs`.`calendar` where feed_start_date = '2024-05-03')\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:24.475042Z", "completed_at": "2025-02-20T18:14:24.482557Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:24.483803Z", "completed_at": "2025-02-20T18:14:24.483811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011091947555541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__ordem_servico_faixa_horaria.49b4b40dfc", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        feed_start_date as col_1,\n        tipo_os as col_2,\n        \n        count(distinct tipo_os) as expression\n    from\n        (select * from `rj-smtr`.`planejamento`.`ordem_servico_faixa_horaria` where 1=1)\n    where\n        feed_start_date = '2024-05-03'\n    \n    \n    group by\n        1,\n        2\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        feed_start_date as col_1,\n        tipo_os as col_2,\n        \n        count(distinct tipo_os) as expression\n    from\n        `rj-smtr`.`gtfs`.`ordem_servico`\n    where\n        feed_start_date = '2024-05-03'\n    \n    \n    group by\n        1,\n        2\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            coalesce(a.col_2, b.col_2) as col_2,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 and\n            a.col_2 = b.col_2 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:24.487519Z", "completed_at": "2025-02-20T18:14:24.495147Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:24.496386Z", "completed_at": "2025-02-20T18:14:24.496393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011187076568603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__ordem_servico_trajeto_alternativo_gtfs.a8ec1a56eb", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        feed_start_date as col_1,\n        tipo_os as col_2,\n        \n        count(distinct tipo_os) as expression\n    from\n        (select * from `rj-smtr`.`gtfs`.`ordem_servico_trajeto_alternativo` where 1=1)\n    where\n        feed_start_date = '2024-05-03'\n    \n    \n    group by\n        1,\n        2\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        feed_start_date as col_1,\n        tipo_os as col_2,\n        \n        count(distinct tipo_os) as expression\n    from\n        `rj-smtr`.`gtfs`.`ordem_servico`\n    where\n        feed_start_date = '2024-05-03'\n    \n    \n    group by\n        1,\n        2\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            coalesce(a.col_2, b.col_2) as col_2,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 and\n            a.col_2 = b.col_2 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:24.508404Z", "completed_at": "2025-02-20T18:14:26.282355Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:26.283859Z", "completed_at": "2025-02-20T18:14:26.283875Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7778875827789307, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.shapes_geom_gtfs", "compiled": true, "compiled_code": "\n\n\n  \n\n\nWITH contents AS (\n    SELECT\n        shape_id,\n        ST_GEOGPOINT(shape_pt_lon, shape_pt_lat) AS ponto_shape,\n        shape_pt_sequence,\n        feed_start_date,\n    FROM `rj-smtr`.`gtfs`.`shapes` s\n    WHERE feed_start_date IN ('2024-04-15', '2024-05-03')\n),\npts AS (\n    SELECT *,\n        MAX(shape_pt_sequence) OVER(PARTITION BY feed_start_date, shape_id) final_pt_sequence\n    FROM contents c\n    ORDER BY feed_start_date,\n        shape_id,\n        shape_pt_sequence\n),\nshapes AS (\n    -- BUILD LINESTRINGS OVER SHAPE POINTS\n    SELECT\n        shape_id,\n        feed_start_date,\n        ST_MAKELINE(ARRAY_AGG(ponto_shape)) AS shape,\n        ARRAY_AGG(ponto_shape)[ORDINAL(1)] AS start_pt,\n        ARRAY_AGG(ponto_shape)[ORDINAL(ARRAY_LENGTH(ARRAY_AGG(ponto_shape)))] AS end_pt,\n    FROM pts\n    GROUP BY 1,\n            2\n),\nshapes_half AS (\n    -- BUILD HALF LINESTRINGS OVER SHAPE POINTS\n    (\n        SELECT\n            shape_id,\n            feed_start_date,\n            shape_id || \"_0\" AS new_shape_id,\n            ST_MAKELINE(ARRAY_AGG(ponto_shape)) AS shape,\n            ARRAY_AGG(ponto_shape)[ORDINAL(1)] AS start_pt,\n            ARRAY_AGG(ponto_shape)[ORDINAL(ARRAY_LENGTH(ARRAY_AGG(ponto_shape)))] AS end_pt,\n        FROM\n            pts\n        WHERE\n            shape_pt_sequence <= ROUND(final_pt_sequence / 2)\n        GROUP BY\n            1,\n            2\n    )\n    UNION ALL\n    (\n        SELECT\n            shape_id,\n            feed_start_date,\n            shape_id || \"_1\" AS new_shape_id,\n            ST_MAKELINE(ARRAY_AGG(ponto_shape)) AS shape,\n            ARRAY_AGG(ponto_shape)[ORDINAL(1)] AS start_pt,\n            ARRAY_AGG(ponto_shape)[ORDINAL(ARRAY_LENGTH(ARRAY_AGG(ponto_shape)))] AS end_pt,\n        FROM\n            pts\n        WHERE\n            shape_pt_sequence > ROUND(final_pt_sequence / 2)\n        GROUP BY\n            1,\n            2\n    )\n),\nids AS (\n    SELECT\n      * EXCEPT(rn)\n    FROM\n    (\n        SELECT\n            feed_start_date,\n            shape_id,\n            shape,\n            start_pt,\n            end_pt,\n            ROW_NUMBER() OVER(PARTITION BY feed_start_date, shape_id) rn\n        FROM\n            shapes\n    )\n    WHERE rn = 1\n),\nunion_shapes AS (\n  (\n    SELECT\n        feed_start_date,\n        shape_id,\n        shape,\n        start_pt,\n        end_pt,\n    FROM\n        ids\n  )\n  UNION ALL\n  (\n    SELECT\n        feed_start_date,\n        new_shape_id AS shape_id,\n        s.shape,\n        s.start_pt,\n        s.end_pt,\n    FROM\n        ids AS i\n    LEFT JOIN\n        shapes_half AS s\n    USING\n        (feed_start_date, shape_id)\n    WHERE\n        ROUND(ST_Y(i.start_pt),4) = ROUND(ST_Y(i.end_pt),4)\n        AND ROUND(ST_X(i.start_pt),4) = ROUND(ST_X(i.end_pt),4)\n  )\n)\nSELECT\n    feed_version,\n    feed_start_date,\n    feed_end_date,\n    shape_id,\n    shape,\n    ROUND(ST_LENGTH(shape), 1) shape_distance,\n    start_pt,\n    end_pt,\n    '' as versao_modelo\nFROM union_shapes AS m\nLEFT JOIN\n    `rj-smtr`.`gtfs`.`feed_info` AS fi\nUSING\n    (feed_start_date)\nWHERE\n    fi.feed_start_date IN ('2024-04-15', '2024-05-03')", "relation_name": "`rj-smtr`.`gtfs`.`shapes_geom`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:26.288114Z", "completed_at": "2025-02-20T18:14:28.252851Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.254089Z", "completed_at": "2025-02-20T18:14:28.254098Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9685065746307373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.shapes_geom_planejamento", "compiled": true, "compiled_code": "\n\n-- depends_on: `rj-smtr`.`gtfs`.`feed_info`\n\n    \n\n\nwith\n    shapes as (\n        select\n            feed_version,\n            feed_start_date,\n            feed_end_date,\n            shape_id,\n            shape_pt_sequence,\n            st_geogpoint(shape_pt_lon, shape_pt_lat) as ponto_shape,\n            concat(shape_pt_lon, \" \", shape_pt_lat) as lon_lat,\n        from `rj-smtr`.`gtfs`.`shapes`\n        \n        \n            where\n                feed_start_date\n                in ('2024-04-15', '2024-05-03')\n        \n    ),\n    shapes_agg as (\n        select\n            feed_start_date,\n            feed_end_date,\n            feed_version,\n            shape_id,\n            array_agg(ponto_shape order by shape_pt_sequence) as array_shape,\n            concat(\n                \"LINESTRING(\", string_agg(lon_lat, \", \" order by shape_pt_sequence), \")\"\n            ) as wkt_shape\n\n        from shapes\n        group by 1, 2, 3, 4\n    )\nselect\n    feed_start_date,\n    feed_end_date,\n    feed_version,\n    shape_id,\n    st_makeline(array_shape) as shape,\n    wkt_shape,\n    array_shape[ordinal(1)] as start_pt,\n    array_shape[ordinal(array_length(array_shape))] as end_pt,\n    '' as versao\nfrom shapes_agg", "relation_name": "`rj-smtr`.`planejamento`.`shapes_geom`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.281458Z", "completed_at": "2025-02-20T18:14:28.296586Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.298539Z", "completed_at": "2025-02-20T18:14:28.298549Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020416259765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__infracao.23ccb6363c", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        data as col_1,\n        \n        count(distinct data) as expression\n    from\n        (select * from `rj-smtr`.`veiculo`.`infracao` where DATE(data) between DATE('2022-01-08 00:00:00') AND DATE('2022-01-09 01:00:00'))\n    where\n        DATE(data) between DATE('2022-01-08 00:00:00') AND DATE('2022-01-09 01:00:00')\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        Date(data) as col_1,\n        \n        count(distinct data) as expression\n    from\n        `rj-smtr`.`veiculo_staging`.`infracao`\n    where\n        DATE(data) between DATE('2022-01-08 00:00:00') AND DATE('2022-01-09 01:00:00')\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.302450Z", "completed_at": "2025-02-20T18:14:28.307571Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.308830Z", "completed_at": "2025-02-20T18:14:28.308838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008853912353515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_my_second_dbt_model_id.151b76d778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom (select * from `rj-smtr`.`dbt`.`my_second_dbt_model` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.312675Z", "completed_at": "2025-02-20T18:14:28.317646Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.319352Z", "completed_at": "2025-02-20T18:14:28.319360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009108781814575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_my_second_dbt_model_id.57a0f8c493", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from (select * from `rj-smtr`.`dbt`.`my_second_dbt_model` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.323327Z", "completed_at": "2025-02-20T18:14:28.328576Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.329861Z", "completed_at": "2025-02-20T18:14:28.329871Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009036064147949219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.trips_desaninhada", "compiled": true, "compiled_code": "with contents as (\n  select\n    trip_id,\n    json_value(content, \"$.route_id\") route_id,\n    json_value(content, \"$.service_id\") service_id,\n    json_value(content, \"$.trip_headsign\") trip_headsign,\n    json_value(content, \"$.trip_short_name\") trip_short_name,\n    json_value(content, \"$.direction_id\") direction_id,\n    json_value(content, \"$.block_id\") block_id,\n    json_value(content, \"$.shape_id\") shape_id,\n    json_value(content, \"$.variacao_itinerario\") variacao_itinerario,\n    json_value(content, \"$.versao\") versao,\n    json_value(content, \"$.complemento\") complemento,\n    json_value(content, \"$.via\") via,\n    json_value(content, \"$.observacoes\") observacoes,\n    json_value(content, \"$.ultima_medicao_operante\") ultima_medicao_operante,\n    json_value(content, \"$.idModalSmtr\") id_modal_smtr,\n    json_value(content, \"$.Direcao\") direcao,\n    json_value(content, \"$.id\") id,\n    DATE(data_versao) data_versao\n\n  from `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`trips`\n),\nroutes as (\n  select\n    *\n  from `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`routes_desaninhada`\n),\nultimas_versoes as (\n  select\n    c.*,\n    row_number() over(\n      partition by c.data_versao, c.route_id, c.direction_id, c.variacao_itinerario\n      order by c.versao desc\n    ) rn\n  from contents c\n  join routes r\n  on c.route_id = r.route_id\n  and c.data_versao = r.data_versao\n)\nselect\n  * except(rn)\nfrom ultimas_versoes\nwhere rn=1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`trips_desaninhada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.333833Z", "completed_at": "2025-02-20T18:14:28.341337Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.342706Z", "completed_at": "2025-02-20T18:14:28.342714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011312007904052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_aux_registros_filtrada", "compiled": true, "compiled_code": "\n\n\n\n  /*\nDescri\u00e7\u00e3o:\nFiltragem e tratamento b\u00e1sico de registros de gps.\n1. Filtra registros que est\u00e3o fora de uma caixa que cont\u00e9m a \u00e1rea do munic\u00edpio de Rio de Janeiro.\n2. Filtra registros antigos. Remove registros que tem diferen\u00e7a maior que 1 minuto entre o timestamp_captura e timestamp_gps.\n3. Muda o nome de vari\u00e1veis para o padr\u00e3o do projeto.\n\t- id_veiculo --> ordem\n*/\nWITH\nbox AS (\n  /*1. Geometria de caixa que cont\u00e9m a \u00e1rea do munic\u00edpio de Rio de Janeiro.*/\n\tSELECT\n\t*\n\tFROM\n\trj-smtr.br_rj_riodejaneiro_geo.limites_geograficos_caixa\n),\ngps AS (\n  /*2. Filtra registros antigos. Remove registros que tem diferen\u00e7a maior que 1 minuto entre o timestamp_captura e timestamp_gps.*/\n  SELECT\n    *,\n    ST_GEOGPOINT(longitude, latitude) posicao_veiculo_geo\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_registros`\n  WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n  AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\nrealocacao as (\n  SELECT\n    g.* except(linha),\n    coalesce(r.servico_realocado, g.linha) as linha\n  FROM\n    gps g\n  LEFT JOIN\n    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_realocacao` r\n  ON\n    g.ordem = r.id_veiculo\n    and g.timestamp_gps = r.timestamp_gps\n),\nfiltrada AS (\n  /*1,2, e 3. Muda o nome de vari\u00e1veis para o padr\u00e3o do projeto.*/\n  SELECT\n    ordem AS id_veiculo,\n    latitude,\n    longitude,\n    posicao_veiculo_geo,\n    velocidade,\n    linha,\n    timestamp_gps,\n    timestamp_captura,\n    data,\n    hora,\n    row_number() over (partition by ordem, timestamp_gps, linha) rn\n  FROM\n    realocacao\n  WHERE\n    ST_INTERSECTSBOX(posicao_veiculo_geo,\n      ( SELECT min_longitude FROM box),\n      ( SELECT min_latitude FROM box),\n      ( SELECT max_longitude FROM box),\n      ( SELECT max_latitude FROM box))\n  )\nSELECT\n  * except(rn),\n  \"\" as versao\nFROM\n  filtrada\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.346581Z", "completed_at": "2025-02-20T18:14:28.353475Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:28.354813Z", "completed_at": "2025-02-20T18:14:28.354820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010693073272705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_aux_registros_filtrada_zirix", "compiled": true, "compiled_code": "\n  /*\nDescri\u00e7\u00e3o:\nFiltragem e tratamento b\u00e1sico de registros de gps.\n1. Filtra registros que est\u00e3o fora de uma caixa que cont\u00e9m a \u00e1rea do munic\u00edpio de Rio de Janeiro.\n2. Filtra registros antigos. Remove registros que tem diferen\u00e7a maior que 1 minuto entre o timestamp_captura e timestamp_gps.\n3. Muda o nome de vari\u00e1veis para o padr\u00e3o do projeto.\n\t- id_veiculo --> ordem\n*/\nWITH\nbox AS (\n  /*1. Geometria de caixa que cont\u00e9m a \u00e1rea do munic\u00edpio de Rio de Janeiro.*/\n\tSELECT\n\t*\n\tFROM\n\trj-smtr.br_rj_riodejaneiro_geo.limites_geograficos_caixa\n),\ngps AS (\n  /*2. Filtra registros antigos. Remove registros que tem diferen\u00e7a maior que 1 minuto entre o timestamp_captura e timestamp_gps.*/\n  SELECT\n    *,\n    ST_GEOGPOINT(longitude, latitude) posicao_veiculo_geo\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_registros`\n  WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\nrealocacao as (\n  SELECT\n    g.* except(linha),\n    coalesce(r.servico_realocado, g.linha) as linha\n  FROM\n    gps g\n  LEFT JOIN\n    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registros_realocacao` r\n  ON\n    g.ordem = r.id_veiculo\n    and g.timestamp_gps = r.timestamp_gps\n),\nfiltrada AS (\n  /*1,2, e 3. Muda o nome de vari\u00e1veis para o padr\u00e3o do projeto.*/\n  SELECT\n    ordem AS id_veiculo,\n    latitude,\n    longitude,\n    posicao_veiculo_geo,\n    velocidade,\n    linha,\n    timestamp_gps,\n    timestamp_captura,\n    data,\n    hora,\n    row_number() over (partition by ordem, timestamp_gps, linha) rn\n  FROM\n    realocacao\n  WHERE\n    ST_INTERSECTSBOX(posicao_veiculo_geo,\n      ( SELECT min_longitude FROM box),\n      ( SELECT min_latitude FROM box),\n      ( SELECT max_longitude FROM box),\n      ( SELECT max_latitude FROM box))\n  )\nSELECT\n  * except(rn),\n  \"\" as versao\nFROM\n  filtrada\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registro_filtrada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:28.358733Z", "completed_at": "2025-02-20T18:14:30.404226Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:30.406499Z", "completed_at": "2025-02-20T18:14:30.406518Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0509002208709717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.licenciamento", "compiled": true, "compiled_code": "-- depends_on: __dbt__cte__aux_sppo_licenciamento_vistoria_atualizada\n\n\n\n    \n\n\nwith\n     __dbt__cte__aux_sppo_licenciamento_vistoria_atualizada as (\n\n\n/* Dados auxiliares de vistoria de \u00f4nibus levantados pela Coordenadoria Geral de Licenciamento e Fiscaliza\u00e7\u00e3o (TR/SUBTT/CGLF),\npara atualiza\u00e7\u00e3o da data de \u00faltima vistoria informada no sistema [STU]. */\n\nSELECT\n  data,\n  id_veiculo,\n  placa,\n  MAX(ano_ultima_vistoria) AS ano_ultima_vistoria,\nFROM\n    (\n        SELECT\n            data,\n            id_veiculo,\n            placa,\n            ano_ultima_vistoria,\n        FROM\n            `rj-smtr`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_2023`\n        UNION ALL\n        SELECT\n            data,\n            id_veiculo,\n            placa,\n            ano_ultima_vistoria,\n        FROM\n            `rj-smtr`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_2024`\n        UNION ALL\n        SELECT\n            data,\n            id_veiculo,\n            placa,\n            ano_ultima_vistoria,\n        FROM\n            `rj-smtr`.`veiculo_staging`.`sppo_vistoria_tr_subtt_cglf_pendentes_2024`\n    )\nGROUP BY\n  1,\n  2,\n  3\n), stu as (\n        select * except (data), date(data) as data\n        from `rj-smtr`.`veiculo_staging`.`licenciamento_stu` as t\n        \n            where date(data) = date(\"2023-02-01\")\n        \n    ),\n    stu_rn as (\n        select\n            * except (timestamp_captura),\n            extract(year from data_ultima_vistoria) as ano_ultima_vistoria,\n            row_number() over (partition by data, id_veiculo) rn\n        from stu\n    ),\n    stu_ano_ultima_vistoria as (\n        -- Temporariamente considerando os dados de vistoria enviados pela TR/SUBTT/CGLF\n        select\n            s.* except (ano_ultima_vistoria),\n            case\n                when\n                    data between \"2024-03-01\" and \"2024-12-31\"\n                    and c.ano_ultima_vistoria > s.ano_ultima_vistoria\n                then c.ano_ultima_vistoria\n                when data between \"2024-03-01\" and \"2024-12-31\"\n                then coalesce(s.ano_ultima_vistoria, c.ano_ultima_vistoria)\n                else s.ano_ultima_vistoria\n            end as ano_ultima_vistoria_atualizado,\n        from stu_rn as s\n        left join\n            (\n                select id_veiculo, placa, ano_ultima_vistoria\n                from __dbt__cte__aux_sppo_licenciamento_vistoria_atualizada\n            ) as c using (id_veiculo, placa)\n    )\nselect\n    data,\n    modo,\n    id_veiculo,\n    ano_fabricacao,\n    carroceria,\n    data_ultima_vistoria,\n    id_carroceria,\n    id_chassi,\n    id_fabricante_chassi,\n    id_interno_carroceria,\n    id_planta,\n    indicador_ar_condicionado,\n    indicador_elevador,\n    indicador_usb,\n    indicador_wifi,\n    nome_chassi,\n    permissao,\n    placa,\n    case\n        when tipo_veiculo like \"%BASIC%\" or tipo_veiculo like \"%BS%\"\n        then \"BASICO\"\n        when tipo_veiculo like \"%MIDI%\"\n        then \"MIDI\"\n        when tipo_veiculo like \"%MINI%\"\n        then \"MINI\"\n        when tipo_veiculo like \"%PDRON%\" or tipo_veiculo like \"%PADRON%\"\n        then \"PADRON\"\n        when tipo_veiculo like \"%ARTICULADO%\"\n        then \"ARTICULADO\"\n        else null\n    end as tecnologia,\n    quantidade_lotacao_pe,\n    quantidade_lotacao_sentado,\n    tipo_combustivel,\n    tipo_veiculo,\n    status,\n    data_inicio_vinculo,\n    ano_ultima_vistoria_atualizado,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao,\n    \"\" as versao\nfrom stu_ano_ultima_vistoria\nwhere rn = 1", "relation_name": "`rj-smtr`.`veiculo`.`licenciamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:30.413845Z", "completed_at": "2025-02-20T18:14:30.424044Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:30.426279Z", "completed_at": "2025-02-20T18:14:30.426293Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016961097717285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.pagamento_bilhetagem_jae", "compiled": true, "compiled_code": "\n\n\nWITH arquivo_retorno AS (\n  SELECT\n    id,\n    DATE(dataVencimento) AS data,\n    dataVencimento AS datetime_pagamento,\n    timestamp_captura AS datetime_captura,\n    idConsorcio AS id_consorcio,\n    idOperadora AS id_operadora,\n    dataOrdem AS data_ordem,\n    idOrdemPagamento AS id_ordem_pagamento,\n    favorecido,\n    valor AS valor_ordem,\n    valorRealEfetivado AS valor_pago,\n    isPago AS indicador_pagamento_realizado\n  FROM\n    `rj-smtr`.`controle_financeiro_staging`.`arquivo_retorno`\n),\narquivo_retorno_deduplicado AS (\n  SELECT\n    * EXCEPT(rn)\n  FROM\n  (\n    SELECT\n      *,\n      ROW_NUMBER() OVER (PARTITION BY id_consorcio, id_operadora, data_ordem ORDER BY indicador_pagamento_realizado DESC, datetime_captura DESC) AS rn\n    FROM\n      arquivo_retorno\n  )\n  WHERE\n    rn = 1\n)\nSELECT\n  a.data,\n  a.datetime_pagamento,\n  a.datetime_captura,\n  a.id_consorcio,\n  a.id_operadora,\n  c.modo,\n  CASE\n    WHEN c.modo = \"Van\" THEN c.consorcio\n    ELSE a.favorecido\n  END AS favorecido,\n  a.data_ordem,\n  a.id_ordem_pagamento,\n  a.valor_ordem,\n  a.valor_pago,\n  a.indicador_pagamento_realizado,\n  '' AS versao\nFROM\n  arquivo_retorno_deduplicado a\nLEFT JOIN\n  `rj-smtr`.`cadastro`.`consorcios` c\nUSING(id_consorcio)", "relation_name": "`rj-smtr`.`controle_financeiro`.`pagamento_bilhetagem_jae`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:30.433449Z", "completed_at": "2025-02-20T18:14:30.440851Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:30.442402Z", "completed_at": "2025-02-20T18:14:30.442411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013075113296508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.passageiro_gratuidade", "compiled": true, "compiled_code": "\n\nWITH consorcio AS (\n  SELECT\n    id_consorcio,\n    modo\n  FROM\n    `rj-smtr`.`cadastro`.`consorcios`\n    -- rj-smtr.cadastro.consorcios\n  WHERE\n    modo IN (\"\u00d4nibus\", \"BRT\")\n)\nSELECT\n  DATE_TRUNC(data, MONTH) AS data,\n  rdo.ano,\n  rdo.mes,\n  c.modo,\n  SUM(rdo.qtd_grt_idoso + rdo.qtd_grt_especial +\n      rdo.qtd_grt_estud_federal + rdo.qtd_grt_estud_estadual +\n      rdo.qtd_grt_estud_municipal + rdo.qtd_grt_rodoviario +\n      rdo.qtd_grt_passe_livre_universitario) AS quantidade_passageiro_gratuidade_mes,\n  CURRENT_DATE(\"America/Sao_Paulo\") AS data_ultima_atualizacao,\n  '' as versao\nFROM\n  consorcio AS c\nLEFT JOIN\n  `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_tratado` AS rdo\nON\n  rdo.termo = c.id_consorcio\nWHERE\n  rdo.data >= \"2015-01-01\"\n  \n  AND rdo.data BETWEEN DATE_TRUNC(DATE(\"2022-01-01T01:00:00\"), MONTH)\n  AND LAST_DAY(DATE(\"2022-01-01T01:00:00\"), MONTH)\n  AND rdo.data < DATE_TRUNC(CURRENT_DATE(\"America/Sao_Paulo\"), MONTH)\n  \nGROUP BY\n  data,\n  rdo.ano,\n  rdo.mes,\n  c.modo", "relation_name": "`rj-smtr`.`indicadores_continuados_egp_staging`.`passageiro_gratuidade`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:30.446935Z", "completed_at": "2025-02-20T18:14:30.456822Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:30.458185Z", "completed_at": "2025-02-20T18:14:30.458194Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014260292053222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.passageiro_pagante", "compiled": true, "compiled_code": "\n\nWITH consorcio AS (\n  SELECT\n    id_consorcio,\n    modo\n  FROM\n    `rj-smtr`.`cadastro`.`consorcios`\n    -- rj-smtr.cadastro.consorcios\n  WHERE\n    modo IN (\"\u00d4nibus\", \"BRT\")\n)\nSELECT\n  DATE_TRUNC(data, MONTH) AS data,\n  rdo.ano,\n  rdo.mes,\n  c.modo,\n  SUM(qtd_buc_1_perna+qtd_buc_2_perna_integracao+\n      qtd_buc_supervia_1_perna+qtd_buc_supervia_2_perna_integracao+\n      qtd_cartoes_perna_unica_e_demais+qtd_pagamentos_especie) AS quantidade_passageiro_pagante_mes,\n  CURRENT_DATE(\"America/Sao_Paulo\") AS data_ultima_atualizacao,\n  '' as versao\nFROM\n  consorcio AS c\nLEFT JOIN\n  `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_tratado` AS rdo\nON\n  rdo.termo = c.id_consorcio\nWHERE\n  rdo.data >= \"2015-01-01\"\n  \n  AND rdo.data BETWEEN DATE_TRUNC(DATE(\"2022-01-01T01:00:00\"), MONTH)\n  AND LAST_DAY(DATE(\"2022-01-01T01:00:00\"), MONTH)\n  AND rdo.data < DATE_TRUNC(CURRENT_DATE(\"America/Sao_Paulo\"), MONTH)\n  \nGROUP BY\n  data,\n  rdo.ano,\n  rdo.mes,\n  c.modo", "relation_name": "`rj-smtr`.`indicadores_continuados_egp_staging`.`passageiro_pagante`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:30.462763Z", "completed_at": "2025-02-20T18:14:30.467469Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:30.468740Z", "completed_at": "2025-02-20T18:14:30.468749Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008805036544799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.rdo40_registros", "compiled": true, "compiled_code": "WITH\n  consorcios AS (\n  SELECT\n    id_consorcio,\n    case when id_consorcio = \"221000050\" then \"Cons\u00f3rcio BRT\" else consorcio end as consorcio\n  FROM\n    -- rj-smtr.cadastro.consorcios\n    `rj-smtr`.`cadastro`.`consorcios` )\nSELECT\n  data,\n  ano,\n  mes,\n  dia,\n  id_consorcio,\n  consorcio,\n  linha AS servico,\n  r.* EXCEPT(data,\n    ano,\n    mes,\n    dia,\n    termo),\n  (qtd_grt_idoso + qtd_grt_especial + qtd_grt_estud_federal + qtd_grt_estud_estadual + qtd_grt_estud_municipal + qtd_grt_rodoviario + qtd_buc_1_perna + qtd_buc_2_perna_integracao + qtd_buc_supervia_1_perna + qtd_buc_supervia_2_perna_integracao + qtd_cartoes_perna_unica_e_demais + qtd_pagamentos_especie + qtd_grt_passe_livre_universitario) AS qtd_passageiros_total\nFROM\n  `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_tratado` r\nLEFT JOIN\n  consorcios c\nON\n  r.termo = c.id_consorcio", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_registros`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:30.472775Z", "completed_at": "2025-02-20T18:14:30.480400Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:30.481652Z", "completed_at": "2025-02-20T18:14:30.481660Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011279582977294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_transacao_ordem", "compiled": true, "compiled_code": "\n\n-- WITH servico_motorista AS (\n--     SELECT\n--         * EXCEPT(rn)\n--     FROM\n--     (\n--         SELECT\n--             id_servico,\n--             dt_fechamento,\n--             nr_logico_midia,\n--             cd_linha,\n--             cd_operadora,\n--             ROW_NUMBER() OVER (PARTITION BY id_servico, nr_logico_midia ORDER BY timestamp_captura DESC) AS rn\n--         FROM\n--             `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`servico_motorista`\n--         \n--     )\n-- ),\nWITH transacao AS (\n  SELECT\n    t.id AS id_transacao,\n    t.timestamp_captura,\n    DATE(t.data_transacao) AS data_transacao,\n    DATE(t.data_processamento) AS data_processamento,\n    t.data_processamento AS datetime_processamento,\n    t.cd_linha AS id_servico_jae,\n    do.id_operadora,\n    t.valor_transacao,\n    t.tipo_transacao,\n    t.id_tipo_modal,\n    dc.id_consorcio,\n    -- sm.dt_fechamento AS datetime_fechamento_servico,\n    -- sm.cd_linha AS cd_linha_servico,\n    -- sm.cd_operadora AS cd_operadora_servico,\n    t.id_servico\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao` t\n  -- LEFT JOIN\n  --     servico_motorista sm\n  -- ON\n  --     sm.id_servico = t.id_servico\n  --     AND sm.nr_logico_midia = t.nr_logico_midia_operador\n  LEFT JOIN\n    `rj-smtr`.`cadastro`.`operadoras` AS do\n  ON\n    t.cd_operadora = do.id_operadora_jae\n  LEFT JOIN\n    `rj-smtr`.`cadastro`.`consorcios` AS dc\n  ON\n    t.cd_consorcio = dc.id_consorcio_jae\n  WHERE\n    \n      DATE(t.data) <= CURRENT_DATE(\"America/Sao_Paulo\")\n      AND DATE(t.data_processamento) <= CURRENT_DATE(\"America/Sao_Paulo\")\n    \n),\ntransacao_deduplicada AS (\n  SELECT\n    t.* EXCEPT(rn),\n    DATE_ADD(data_processamento, INTERVAL 1 DAY) AS data_ordem -- TODO: Regra da data por servi\u00e7os fechados no modo \u00d4nibus quando come\u00e7ar a opera\u00e7\u00e3o\n  FROM\n  (\n    SELECT\n      *,\n      ROW_NUMBER() OVER (PARTITION BY id_transacao ORDER BY timestamp_captura DESC) AS rn\n    FROM\n      transacao\n  ) t\n  WHERE\n    rn = 1\n)\nSELECT\n  t.*\nFROM\n  transacao_deduplicada t\nLEFT JOIN\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_sem_ressarcimento` l\nON\n  t.id_servico_jae = l.id_linha\nWHERE\n  -- Remove dados com data de ordem de pagamento maiores que a execu\u00e7\u00e3o do modelo\n  \n    t.data_ordem <= CURRENT_DATE(\"America/Sao_Paulo\")\n  \n  -- Remove linhas de teste que n\u00e3o entram no ressarcimento\n  AND l.id_linha IS NULL\n  -- Remove gratuidades e transfer\u00eancias da contagem de transa\u00e7\u00f5es\n  AND tipo_transacao NOT IN ('5', '21', '40')", "relation_name": "`rj-smtr`.`validacao_dados_jae_staging`.`aux_transacao_ordem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:30.485414Z", "completed_at": "2025-02-20T18:14:35.337879Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:35.343657Z", "completed_at": "2025-02-20T18:14:35.343692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.864061594009399, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.integracao", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`planejamento`.`matriz_integracao`\n\n\n\n\n\n\n\n    \n        \n\n        \n\n    \n\n\nwith\n    integracao_transacao_deduplicada as (\n        select * except (rn)\n        from\n            (\n                select\n                    *,\n                    row_number() over (\n                        partition by id order by timestamp_captura desc\n                    ) as rn\n                from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`integracao_transacao`\n                \n                where \n    date(data) between date(\"2022-01-01T00:00:00\") and date(\n                            \"2022-01-01T01:00:00\"\n    )\n    and timestamp_captura\n    between datetime(\"2022-01-01T00:00:00\") and datetime(\n        \"2022-01-01T01:00:00\"\n                        )\n\n            )\n        where rn = 1\n    ),\n    integracao_melt as (\n        select\n            extract(date from im.data_transacao) as data,\n            extract(hour from im.data_transacao) as hora,\n            i.data_inclusao as datetime_inclusao,\n            i.data_processamento as datetime_processamento_integracao,\n            i.timestamp_captura as datetime_captura,\n            i.id as id_integracao,\n            im.sequencia_integracao,\n            im.data_transacao as datetime_transacao,\n            im.id_tipo_modal,\n            im.id_consorcio,\n            im.id_operadora,\n            im.id_linha,\n            im.id_transacao,\n            im.sentido,\n            im.perc_rateio,\n            im.valor_rateio_compensacao,\n            im.valor_rateio,\n            im.valor_transacao,\n            i.valor_transacao_total,\n            i.tx_adicional as texto_adicional,\n            im.id_ordem_rateio\n        from\n            integracao_transacao_deduplicada i,\n            -- Transforma colunas com os dados de cada transa\u00e7\u00e3o da integra\u00e7\u00e3o em\n            -- linhas diferentes\n            unnest(\n                [\n                    \n                        struct(\n                            \n                                \n                                    data_transacao_t0 as data_transacao,\n                                \n                            \n                                \n                            \n                                \n                                    id_consorcio_t0 as id_consorcio,\n                                \n                            \n                                \n                            \n                                \n                                    id_linha_t0 as id_linha,\n                                \n                            \n                                \n                            \n                                \n                                    id_operadora_t0 as id_operadora,\n                                \n                            \n                                \n                                    id_ordem_rateio_t0 as id_ordem_rateio,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    id_tipo_modal_t0 as id_tipo_modal,\n                                \n                            \n                                \n                                    id_transacao_t0 as id_transacao,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    perc_rateio_t0 as perc_rateio,\n                                \n                            \n                                \n                            \n                                \n                                    sentido_t0 as sentido,\n                                \n                            \n                                \n                                    valor_rateio_compensacao_t0 as valor_rateio_compensacao,\n                                \n                            \n                                \n                                    valor_rateio_t0 as valor_rateio,\n                                \n                            \n                                \n                                    valor_tarifa_t0 as valor_tarifa,\n                                \n                            \n                                \n                                    valor_transacao_t0 as valor_transacao,\n                                \n                            \n                                \n                            \n                            1 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                \n                                    data_transacao_t1 as data_transacao,\n                                \n                            \n                                \n                            \n                                \n                                    id_consorcio_t1 as id_consorcio,\n                                \n                            \n                                \n                            \n                                \n                                    id_linha_t1 as id_linha,\n                                \n                            \n                                \n                            \n                                \n                                    id_operadora_t1 as id_operadora,\n                                \n                            \n                                \n                                    id_ordem_rateio_t1 as id_ordem_rateio,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    id_tipo_modal_t1 as id_tipo_modal,\n                                \n                            \n                                \n                                    id_transacao_t1 as id_transacao,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    perc_rateio_t1 as perc_rateio,\n                                \n                            \n                                \n                            \n                                \n                                    sentido_t1 as sentido,\n                                \n                            \n                                \n                                    valor_rateio_compensacao_t1 as valor_rateio_compensacao,\n                                \n                            \n                                \n                                    valor_rateio_t1 as valor_rateio,\n                                \n                            \n                                \n                                    valor_tarifa_t1 as valor_tarifa,\n                                \n                            \n                                \n                                    valor_transacao_t1 as valor_transacao,\n                                \n                            \n                                \n                            \n                            2 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                \n                                    data_transacao_t2 as data_transacao,\n                                \n                            \n                                \n                            \n                                \n                                    id_consorcio_t2 as id_consorcio,\n                                \n                            \n                                \n                            \n                                \n                                    id_linha_t2 as id_linha,\n                                \n                            \n                                \n                            \n                                \n                                    id_operadora_t2 as id_operadora,\n                                \n                            \n                                \n                                    id_ordem_rateio_t2 as id_ordem_rateio,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    id_tipo_modal_t2 as id_tipo_modal,\n                                \n                            \n                                \n                                    id_transacao_t2 as id_transacao,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    perc_rateio_t2 as perc_rateio,\n                                \n                            \n                                \n                            \n                                \n                                    sentido_t2 as sentido,\n                                \n                            \n                                \n                                    valor_rateio_compensacao_t2 as valor_rateio_compensacao,\n                                \n                            \n                                \n                                    valor_rateio_t2 as valor_rateio,\n                                \n                            \n                                \n                                    valor_tarifa_t2 as valor_tarifa,\n                                \n                            \n                                \n                                    valor_transacao_t2 as valor_transacao,\n                                \n                            \n                                \n                            \n                            3 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                \n                                    data_transacao_t3 as data_transacao,\n                                \n                            \n                                \n                            \n                                \n                                    id_consorcio_t3 as id_consorcio,\n                                \n                            \n                                \n                            \n                                \n                                    id_linha_t3 as id_linha,\n                                \n                            \n                                \n                            \n                                \n                                    id_operadora_t3 as id_operadora,\n                                \n                            \n                                \n                                    id_ordem_rateio_t3 as id_ordem_rateio,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    id_tipo_modal_t3 as id_tipo_modal,\n                                \n                            \n                                \n                                    id_transacao_t3 as id_transacao,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    perc_rateio_t3 as perc_rateio,\n                                \n                            \n                                \n                            \n                                \n                                    sentido_t3 as sentido,\n                                \n                            \n                                \n                                    valor_rateio_compensacao_t3 as valor_rateio_compensacao,\n                                \n                            \n                                \n                                    valor_rateio_t3 as valor_rateio,\n                                \n                            \n                                \n                                    valor_tarifa_t3 as valor_tarifa,\n                                \n                            \n                                \n                                    valor_transacao_t3 as valor_transacao,\n                                \n                            \n                                \n                            \n                            4 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                \n                                    data_transacao_t4 as data_transacao,\n                                \n                            \n                                \n                            \n                                \n                                    id_consorcio_t4 as id_consorcio,\n                                \n                            \n                                \n                            \n                                \n                                    id_linha_t4 as id_linha,\n                                \n                            \n                                \n                            \n                                \n                                    id_operadora_t4 as id_operadora,\n                                \n                            \n                                \n                                    id_ordem_rateio_t4 as id_ordem_rateio,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    id_tipo_modal_t4 as id_tipo_modal,\n                                \n                            \n                                \n                                    id_transacao_t4 as id_transacao,\n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                            \n                                \n                                    perc_rateio_t4 as perc_rateio,\n                                \n                            \n                                \n                            \n                                \n                                    sentido_t4 as sentido,\n                                \n                            \n                                \n                                    valor_rateio_compensacao_t4 as valor_rateio_compensacao,\n                                \n                            \n                                \n                                    valor_rateio_t4 as valor_rateio,\n                                \n                            \n                                \n                                    valor_tarifa_t4 as valor_tarifa,\n                                \n                            \n                                \n                                    valor_transacao_t4 as valor_transacao,\n                                \n                            \n                                \n                            \n                            5 as sequencia_integracao\n                        )\n                        \n                    \n                ]\n            ) as im\n    ),\n    integracao_new as (\n        select\n            i.data,\n            i.hora,\n            i.datetime_processamento_integracao,\n            i.datetime_captura,\n            i.datetime_transacao,\n            timestamp_diff(\n                i.datetime_transacao,\n                lag(i.datetime_transacao) over (\n                    partition by i.id_integracao order by sequencia_integracao\n                ),\n                minute\n            ) as intervalo_integracao,\n            i.id_integracao,\n            i.sequencia_integracao,\n            m.modo,\n            dc.id_consorcio,\n            dc.consorcio,\n            do.id_operadora,\n            do.operadora,\n            i.id_linha as id_servico_jae,\n            l.nr_linha as servico_jae,\n            l.nm_linha as descricao_servico_jae,\n            i.id_transacao,\n            i.sentido,\n            i.perc_rateio as percentual_rateio,\n            i.valor_rateio_compensacao,\n            i.valor_rateio,\n            i.valor_transacao,\n            i.valor_transacao_total,\n            i.texto_adicional,\n            i.id_ordem_rateio,\n            o.data_ordem,\n            o.id_ordem_pagamento,\n            o.id_ordem_pagamento_consorcio as id_ordem_pagamento_consorcio_dia,\n            o.id_ordem_pagamento_consorcio_operadora\n            as id_ordem_pagamento_consorcio_operador_dia,\n            '' as versao\n        from integracao_melt i\n        left join\n            `rj-smtr`.`cadastro`.`modos` m\n            on i.id_tipo_modal = m.id_modo\n            and m.fonte = \"jae\"\n        left join `rj-smtr`.`cadastro`.`operadoras` do on i.id_operadora = do.id_operadora_jae\n        \n        left join `rj-smtr`.`cadastro`.`consorcios` dc on i.id_consorcio = dc.id_consorcio_jae\n        \n        left join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` l\n            \n            on i.id_linha = l.cd_linha\n        left join `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_rateio` o using (id_ordem_rateio)\n        where i.id_transacao is not null\n    ),\n    complete_partitions as (\n        select *, 0 as priority\n        from integracao_new\n\n        \n            union all\n\n            select *, 1 as priority\n            from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao`\n            where\n                 data = \"2000-01-01\"\n                \n        \n    ),\n    integracoes_teste_invalidas as (\n        select distinct i.id_integracao\n        from complete_partitions i\n        left join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_sem_ressarcimento` l\n            \n            on i.id_servico_jae = l.id_linha\n        where l.id_linha is not null or i.data < \"2023-07-17\"\n    )\nselect * except (priority)\nfrom complete_partitions\nwhere id_integracao not in (select id_integracao from integracoes_teste_invalidas)\nqualify\n    row_number() over (\n        partition by id_integracao, id_transacao\n        order by datetime_processamento_integracao desc, priority\n    )\n    = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:35.359013Z", "completed_at": "2025-02-20T18:14:35.373001Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:35.374900Z", "completed_at": "2025-02-20T18:14:35.374912Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02136850357055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.operadoras_contato", "compiled": true, "compiled_code": "\n\n\nSELECT\n  d.id_operadora,\n  cpj.nm_contato AS contato,\n  cpj.nr_ramal AS ramal,\n  COALESCE(cpj.nr_telefone, c.nr_telefone) AS telefone,\n  COALESCE(cpj.tx_email, c.tx_email) AS email\nFROM\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`cliente` AS c\nLEFT JOIN\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`contato_pessoa_juridica` cpj\nON\n  c.cd_cliente = cpj.cd_cliente\nJOIN\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`operadora_transporte` AS ot\nON\n  ot.cd_cliente = c.cd_cliente\nJOIN\n  `rj-smtr`.`cadastro`.`operadoras` d\nON d.id_operadora_jae = ot.cd_operadora_transporte", "relation_name": "`rj-smtr`.`cadastro`.`operadoras_contato`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:35.379904Z", "completed_at": "2025-02-20T18:14:35.387716Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:35.389002Z", "completed_at": "2025-02-20T18:14:35.389012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011797428131103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_servico_operador_dia", "compiled": true, "compiled_code": "\n\nwith\n    ordem_pagamento as (\n        select\n            r.data_ordem,\n            r.id_ordem_ressarcimento as id_ordem_pagamento_servico_operador_dia,\n            dc.id_consorcio,\n            dc.consorcio,\n            do.id_operadora,\n            do.operadora,\n            r.id_linha as id_servico_jae,\n            l.nr_linha as servico_jae,\n            l.nm_linha as descricao_servico_jae,\n            r.id_ordem_pagamento_consorcio_operadora\n            as id_ordem_pagamento_consorcio_operador_dia,\n            r.id_ordem_pagamento_consorcio as id_ordem_pagamento_consorcio_dia,\n            r.id_ordem_pagamento as id_ordem_pagamento,\n            rat.id_ordem_rateio as id_ordem_rateio,\n            r.qtd_debito as quantidade_transacao_debito,\n            r.valor_debito,\n            r.qtd_vendaabordo as quantidade_transacao_especie,\n            r.valor_vendaabordo as valor_especie,\n            r.qtd_gratuidade as quantidade_transacao_gratuidade,\n            r.valor_gratuidade,\n            r.qtd_integracao as quantidade_transacao_integracao,\n            r.valor_integracao,\n            coalesce(\n                rat.qtd_rateio_compensacao_credito_total, r.qtd_rateio_credito\n            ) as quantidade_transacao_rateio_credito,\n            coalesce(\n                rat.valor_rateio_compensacao_credito_total, r.valor_rateio_credito\n            ) as valor_rateio_credito,\n            coalesce(\n                rat.qtd_rateio_compensacao_debito_total, r.qtd_rateio_debito\n            ) as quantidade_transacao_rateio_debito,\n            coalesce(\n                rat.valor_rateio_compensacao_debito_total, r.valor_rateio_debito\n            ) as valor_rateio_debito,\n            (\n                r.qtd_debito + r.qtd_vendaabordo + r.qtd_gratuidade + r.qtd_integracao\n            ) as quantidade_total_transacao,\n            r.valor_bruto as valor_total_transacao_bruto,\n            r.valor_taxa as valor_desconto_taxa,\n            r.valor_liquido as valor_total_transacao_liquido\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_ressarcimento` r\n        left join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_rateio` rat using (\n                data_ordem, id_consorcio, id_operadora, id_linha\n            )\n        left join `rj-smtr`.`cadastro`.`operadoras` as do on r.id_operadora = do.id_operadora_jae\n        left join `rj-smtr`.`cadastro`.`consorcios` as dc on r.id_consorcio = dc.id_consorcio_jae\n        left join `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` as l on r.id_linha = l.cd_linha\n        \n            where\n                date(r.data) between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        \n    )\nselect\n    data_ordem,\n    id_ordem_pagamento_servico_operador_dia,\n    id_consorcio,\n    consorcio,\n    id_operadora,\n    operadora,\n    id_servico_jae,\n    servico_jae,\n    descricao_servico_jae,\n    id_ordem_pagamento_consorcio_operador_dia,\n    id_ordem_pagamento_consorcio_dia,\n    id_ordem_pagamento,\n    id_ordem_rateio,\n    quantidade_transacao_debito,\n    valor_debito,\n    quantidade_transacao_especie,\n    valor_especie,\n    quantidade_transacao_gratuidade,\n    valor_gratuidade,\n    quantidade_transacao_integracao,\n    valor_integracao,\n    quantidade_transacao_rateio_credito,\n    valor_rateio_credito,\n    quantidade_transacao_rateio_debito,\n    valor_rateio_debito,\n    quantidade_total_transacao,\n    valor_total_transacao_bruto\n    + valor_rateio_debito\n    + valor_rateio_credito as valor_total_transacao_bruto,\n    valor_desconto_taxa,\n    valor_total_transacao_liquido\n    + valor_rateio_debito\n    + valor_rateio_credito as valor_total_transacao_liquido,\n    '' as versao\nfrom ordem_pagamento o", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_servico_operador_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:35.393871Z", "completed_at": "2025-02-20T18:14:35.400402Z"}, {"name": "execute", "started_at": "2025-02-20T18:14:35.401668Z", "completed_at": "2025-02-20T18:14:35.401677Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011203289031982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.servico_operadora", "compiled": true, "compiled_code": "\n\nwith\n    linha_tarifa as (\n        select\n            cd_linha,\n            vl_tarifa_ida as tarifa_ida,\n            vl_tarifa_volta as tarifa_volta,\n            dt_inicio_validade,\n            lead(dt_inicio_validade) over (\n                partition by cd_linha order by nr_sequencia\n            ) as data_fim_validade\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_tarifa`\n    ),\n    tratado as (\n        select\n            c.modo,\n            c.id_consorcio,\n            c.consorcio,\n            o.id_operadora,\n            o.operadora,\n            lco.cd_linha as id_servico_jae,\n            l.nr_linha as servico_jae,\n            l.nm_linha as descricao_servico_jae,\n            coalesce(l.gtfs_route_id, l.gtfs_stop_id) as id_servico_gtfs,\n            case\n                when l.gtfs_route_id is not null\n                then 'routes'\n                when l.gtfs_stop_id is not null\n                then 'stops'\n            end as tabela_origem_gtfs,\n            lt.tarifa_ida,\n            lt.tarifa_volta,\n            case\n                when datetime(lco.dt_inicio_validade) > lt.dt_inicio_validade\n                then datetime(lco.dt_inicio_validade)\n                else lt.dt_inicio_validade\n            end as data_inicio_validade,\n            case\n                when lco.dt_fim_validade is null and lt.data_fim_validade is not null\n                then lt.data_fim_validade\n                when lco.dt_fim_validade is not null and lt.data_fim_validade is null\n                then lco.dt_fim_validade\n                when datetime(lco.dt_fim_validade) > lt.data_fim_validade\n                then lt.data_fim_validade\n                when datetime(lco.dt_fim_validade) < lt.data_fim_validade\n                then datetime(lco.dt_fim_validade)\n            end as data_fim_validade\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_consorcio_operadora_transporte` lco\n        join\n            `rj-smtr`.`cadastro`.`operadoras` o\n            on lco.cd_operadora_transporte = o.id_operadora_jae\n        join `rj-smtr`.`cadastro`.`consorcios` c on lco.cd_consorcio = c.id_consorcio_jae\n        join `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` l on lco.cd_linha = l.cd_linha\n        left join linha_tarifa lt on lco.cd_linha = lt.cd_linha\n        where\n            (\n                (\n                    lt.data_fim_validade is not null\n                    and datetime(lco.dt_inicio_validade) < lt.data_fim_validade\n                )\n                and (\n                    lco.dt_fim_validade is not null\n                    and datetime(lt.dt_inicio_validade) < lco.dt_fim_validade\n                )\n            )\n            or (lt.data_fim_validade is null or lco.dt_fim_validade is null)\n    )\nselect *, '' as versao\nfrom tratado\nwhere data_inicio_validade < data_fim_validade or data_fim_validade is null", "relation_name": "`rj-smtr`.`cadastro`.`servico_operadora`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:14:35.405627Z", "completed_at": "2025-02-20T18:15:10.761774Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:10.763705Z", "completed_at": "2025-02-20T18:15:10.763719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 35.3611946105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.transacao_riocard", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n\nWITH staging_transacao AS (\n  SELECT\n    *\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao_riocard`\n  \n    WHERE\n      \n  DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n  AND timestamp_captura BETWEEN DATETIME(\"2022-01-01T00:00:00\") AND DATETIME(\"2022-01-01T01:00:00\")\n\n  \n),\nnovos_dados AS (\n  SELECT\n    EXTRACT(DATE FROM t.data_transacao) AS data,\n    EXTRACT(HOUR FROM t.data_transacao) AS hora,\n    t.data_transacao AS datetime_transacao,\n    t.data_processamento AS datetime_processamento,\n    t.timestamp_captura AS datetime_captura,\n    COALESCE(do.modo, dc.modo) AS modo,\n    dc.id_consorcio,\n    dc.consorcio,\n    do.id_operadora,\n    do.operadora,\n    t.cd_linha AS id_servico_jae,\n    l.nr_linha AS servico_jae,\n    l.nm_linha AS descricao_servico_jae,\n    t.sentido,\n    CASE\n      WHEN do.modo = \"VLT\" THEN SUBSTRING(t.veiculo_id, 1, 3)\n      WHEN do.modo = \"BRT\" THEN NULL\n      ELSE t.veiculo_id\n    END AS id_veiculo,\n    t.numero_serie_validador AS id_validador,\n    t.id AS id_transacao,\n    t.latitude_trx AS latitude,\n    t.longitude_trx AS longitude,\n    ST_GEOGPOINT(t.longitude_trx, t.latitude_trx) AS geo_point_transacao,\n    t.valor_transacao\n  FROM\n    staging_transacao t\n  LEFT JOIN\n    `rj-smtr`.`cadastro`.`operadoras` do\n  ON\n    t.cd_operadora = do.id_operadora_jae\n  LEFT JOIN\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` l\n  ON\n    t.cd_linha = l.cd_linha\n  LEFT JOIN\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_consorcio` lc\n  ON\n    t.cd_linha = lc.cd_linha\n    AND (\n      t.data_transacao BETWEEN lc.dt_inicio_validade AND lc.dt_fim_validade\n      OR lc.dt_fim_validade IS NULL\n    )\n  LEFT JOIN\n    `rj-smtr`.`cadastro`.`consorcios` dc\n  ON\n    lc.cd_consorcio = dc.id_consorcio_jae\n),\n-- consorcios AS (\n--   SELECT\n--     t.data,\n--     t.hora,\n--     t.datetime_transacao,\n--     t.datetime_processamento,\n--     t.datetime_captura,\n--     COALESCE(t.modo, dc.modo) AS modo,\n--     dc.id_consorcio,\n--     dc.consorcio,\n--     t.id_operadora,\n--     t.operadora,\n--     t.id_servico_jae,\n--     t.servico_jae,\n--     t.descricao_servico_jae,\n--     t.sentido,\n--     t.id_veiculo,\n--     t.id_validador,\n--     t.id_transacao,\n--     t.latitude,\n--     t.longitude,\n--     t.valor_transacao\n--   FROM\n--     novos_dados t\n--   LEFT JOIN\n--     `rj-smtr`.`cadastro`.`consorcios` dc\n--   USING(id_consorcio_jae)\n-- ),\nparticoes_completas AS (\n  SELECT\n    *,\n    0 AS priority\n  FROM\n    novos_dados\n\n  \n),\ntransacao_deduplicada AS (\n  SELECT\n    * EXCEPT(rn, priority)\n  FROM\n  (\n    SELECT\n      *,\n      ROW_NUMBER() OVER (PARTITION BY id_transacao ORDER BY datetime_captura DESC, priority) AS rn\n    FROM\n      particoes_completas\n  )\n  WHERE\n    rn = 1\n)\nSELECT\n  *,\n  '' AS versao\nFROM\n  transacao_deduplicada", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:10.770353Z", "completed_at": "2025-02-20T18:15:13.002800Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:13.004245Z", "completed_at": "2025-02-20T18:15:13.004255Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.237545967102051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.rho_registros_sppo", "compiled": true, "compiled_code": "\n\n\n\n    \n        \n\n        \n\n        \n    \n\n\nWITH rho_new AS (\n    SELECT\n        data_transacao,\n        hora_transacao,\n        data_processamento,\n        data_particao AS data_arquivo_rho,\n        linha AS servico_riocard,\n        linha_rcti AS linha_riocard,\n        operadora,\n        total_pagantes_cartao AS quantidade_transacao_cartao,\n        total_pagantes_especie AS quantidade_transacao_especie,\n        total_gratuidades AS quantidade_transacao_gratuidade,\n        registro_processado,\n        timestamp_captura AS datetime_captura\n    FROM\n        `rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_sppo`\n    \n        WHERE\n            ano BETWEEN\n                EXTRACT(YEAR FROM DATE(\"2022-01-01T00:00:00\"))\n                AND EXTRACT(YEAR FROM DATE(\"2022-01-01T01:00:00\"))\n            AND mes BETWEEN\n                EXTRACT(MONTH FROM DATE(\"2022-01-01T00:00:00\"))\n                AND EXTRACT(MONTH FROM DATE(\"2022-01-01T01:00:00\"))\n            AND dia BETWEEN\n                EXTRACT(DAY FROM DATE(\"2022-01-01T00:00:00\"))\n                AND EXTRACT(DAY FROM DATE(\"2022-01-01T01:00:00\"))\n    \n),\nrho_complete_partitions AS (\n    SELECT\n        *\n    FROM\n        rho_new\n\n    \n),\n-- Deduplica os dados com base na data e hora da transacao, linha, linha_rcti e operadora\nrho_rn AS (\n    SELECT\n        *,\n        ROW_NUMBER() OVER(\n            PARTITION BY\n                data_transacao,\n                hora_transacao,\n                data_arquivo_rho,\n                servico_riocard,\n                linha_riocard,\n                operadora\n            ORDER BY\n                datetime_captura DESC\n        ) AS rn\n    FROM\n        rho_complete_partitions\n)\nSELECT\n    * EXCEPT(rn)\nFROM\n    rho_rn\nWHERE\n    rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo`.`rho_registros_sppo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:13.008729Z", "completed_at": "2025-02-20T18:15:13.016123Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:13.017740Z", "completed_at": "2025-02-20T18:15:13.017749Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011937618255615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_bloqueio_via", "compiled": true, "compiled_code": "\n\nWITH exploded AS (\n  SELECT\n    id_recurso,\n    datetime_recurso,\n    datetime_captura,\n    datetime_update,\n    SAFE_CAST(COALESCE(JSON_VALUE(items, '$.value'), JSON_VALUE(items, '$.items[0].customFieldItem')) AS STRING\n    ) AS value,\n    SAFE_CAST(JSON_EXTRACT(items, '$.customFieldId') AS STRING ) AS field_id\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_bloqueio_via`,\n    UNNEST(items) items\n  WHERE\n      DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")\n),\npivotado AS (\n  SELECT *,\n  ROW_NUMBER() OVER(PARTITION BY id_recurso ORDER BY datetime_captura DESC) AS rn,\n  FROM\n    exploded PIVOT(\n      ANY_VALUE(value) FOR field_id IN (\n        '111870', '111871', '111872',\n        '111901', '111865', '111867', '111868',\n        '111869', '111866', '111904', '125615',\n        '111900', '111874'\n      )\n    )\n),\ntratado AS (\n  SELECT\n    id_recurso,\n    datetime_captura,\n    datetime_recurso,\n    datetime_update,\n    SAFE_CAST(p.111865 AS STRING) AS julgamento,\n    SAFE_CAST(p.111870 AS STRING) AS consorcio,\n    CASE\n      WHEN SAFE_CAST(p.111872 AS STRING) = \"SR - Regular\" THEN SAFE_CAST(p.111871 AS STRING)\n      ELSE CONCAT(REPLACE(SPLIT(SAFE_CAST(p.111872 AS STRING), \"-\")[OFFSET(0)], \" \", \"\"), SAFE_CAST(p.111871 AS STRING))\n    END AS servico,\n     CASE\n        WHEN SAFE_CAST(p.111901 AS STRING) = \"Ida\" THEN \"I\"\n        WHEN SAFE_CAST(p.111901 AS STRING) = \"Volta\" THEN \"V\"\n        WHEN SAFE_CAST(p.111901 AS STRING) = \"Circular\" THEN \"C\"\n    END\n      AS sentido,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez',SAFE_CAST(p.111867 AS STRING), 'America/Sao_Paulo') AS data_viagem,\n    SAFE_CAST(p.111874 AS STRING) AS numero_relatorio_cimu,\n    COALESCE(SAFE_CAST(p.111904 AS STRING), SAFE_CAST(p.111900 AS STRING)) AS motivo_julgamento,\n    SAFE_CAST(p.125615 AS STRING) AS observacao,\n\n  FROM\n    pivotado p\n  WHERE rn=1\n)\n\nSELECT\n      t.id_recurso,\n      DATE(datetime_recurso) AS data,\n      t.datetime_captura,\n      t.datetime_recurso,\n      t.datetime_update,\n      t.consorcio,\n      t.servico,\n      t.sentido,\n      DATE(EXTRACT(date FROM TIMESTAMP(data_viagem))) AS data_viagem,\n      t.numero_relatorio_cimu,\n      t.julgamento,\n      t.motivo_julgamento,\n      t.observacao AS observacao_julgamento,\n      j.data_julgamento\n\nFROM\n      tratado t\n\nLEFT JOIN\n\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_bloqueio_via_ultimo_julgamento` AS j\n\n  ON t.id_recurso = j.id_recurso", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_bloqueio_via`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:13.022582Z", "completed_at": "2025-02-20T18:15:13.029895Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:13.031561Z", "completed_at": "2025-02-20T18:15:13.031571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012030839920043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_reprocessamento", "compiled": true, "compiled_code": "\n\nWITH exploded AS (\n  SELECT\n    id_recurso,\n    datetime_recurso,\n    datetime_captura,\n    datetime_update,\n    SAFE_CAST(COALESCE(JSON_VALUE(items, '$.value'), JSON_VALUE(items, '$.items[0].customFieldItem')) AS STRING\n    ) AS value,\n    SAFE_CAST(JSON_EXTRACT(items, '$.customFieldId') AS STRING ) AS field_id\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_reprocessamento`,\n    UNNEST(items) items\n\n  WHERE\n    DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")\n\n),\npivotado AS (\n  SELECT *,\n  ROW_NUMBER() OVER(PARTITION BY id_recurso ORDER BY datetime_captura DESC) AS rn,\n  FROM\n    exploded PIVOT(\n      ANY_VALUE(value) FOR field_id IN (\n        '113816', '113817', '111865','111866','111904',\n        '111900', '125615'\n      )\n    )\n),\ntratado AS (\n  SELECT\n    id_recurso,\n    datetime_captura,\n    datetime_recurso,\n    datetime_update,\n    SAFE_CAST(p.111865 AS STRING) AS julgamento,\n    PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', SAFE_CAST(p.113816 AS STRING), 'America/Sao_Paulo') AS data_hora_inicio,\n    PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S', SAFE_CAST(p.113817 AS STRING), 'America/Sao_Paulo') AS data_hora_fim,\n    COALESCE(SAFE_CAST(p.111904 AS STRING), SAFE_CAST(p.111900 AS STRING)) AS motivo_julgamento,\n    SAFE_CAST(p.125615 AS STRING) AS observacao,\n\n  FROM\n    pivotado p\n  WHERE rn = 1\n)\nSELECT\n      t.id_recurso,\n      DATE(datetime_recurso) AS data,\n      t.datetime_captura,\n      t.datetime_recurso,\n      t.datetime_update,\n      DATETIME(TIMESTAMP_SUB(data_hora_inicio, INTERVAL 3 HOUR)) AS data_hora_inicio_viagem,\n      DATETIME(TIMESTAMP_SUB(data_hora_fim, INTERVAL 3 HOUR)) AS data_hora_fim_viagem,\n      t.julgamento,\n      t.motivo_julgamento,\n      t.observacao AS observacao_julgamento,\n      j.data_julgamento\n\nFROM\n      tratado t\n\nLEFT JOIN\n\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_reprocessamento_ultimo_julgamento` AS j\n\n  ON t.id_recurso = j.id_recurso", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_reprocessamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:13.036080Z", "completed_at": "2025-02-20T18:15:13.046611Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:13.047894Z", "completed_at": "2025-02-20T18:15:13.047903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014359474182128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.recursos_sppo_viagens_individuais", "compiled": true, "compiled_code": "\n\nWITH exploded AS (\n  SELECT\n    id_recurso,\n    datetime_recurso,\n    datetime_captura,\n    datetime_update,\n    SAFE_CAST(COALESCE(JSON_VALUE(items, '$.value'), JSON_VALUE(items, '$.items[0].customFieldItem')) AS STRING\n    ) AS value,\n    SAFE_CAST(JSON_EXTRACT(items, '$.customFieldId') AS STRING ) AS field_id\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`staging_recursos_sppo_viagens_individuais`,\n    UNNEST(items) items\n\n  WHERE\n      DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")\n\n),\npivotado AS (\n  SELECT *,\n  ROW_NUMBER() OVER(PARTITION BY id_recurso ORDER BY datetime_captura DESC) AS rn,\n  FROM\n    exploded PIVOT(\n      ANY_VALUE(value) FOR field_id IN (\n        '111870', '111871', '111872', '111873',\n        '111901', '111865', '111867', '111868',\n        '111869', '111866', '111904', '125615',\n        '111900'\n      )\n    )\n),\ntratado AS (\n  SELECT\n    id_recurso,\n    datetime_captura,\n    datetime_recurso,\n    datetime_update,\n    SAFE_CAST(p.111865 AS STRING) AS julgamento,\n    SAFE_CAST(p.111870 AS STRING) AS consorcio,\n    CASE\n      WHEN SAFE_CAST(p.111872 AS STRING) = \"SR - Regular\" THEN SAFE_CAST(p.111871 AS STRING)\n      ELSE CONCAT(REPLACE(SPLIT(SAFE_CAST(p.111872 AS STRING), \"-\")[OFFSET(0)], \" \", \"\"), SAFE_CAST(p.111871 AS STRING))\n    END AS servico,\n    SAFE_CAST(p.111873 AS STRING) AS id_veiculo,\n    CASE\n        WHEN SAFE_CAST(p.111901 AS STRING) = \"Ida\" THEN \"I\"\n        WHEN SAFE_CAST(p.111901 AS STRING) = \"Volta\" THEN \"V\"\n        WHEN SAFE_CAST(p.111901 AS STRING) = \"Circular\" THEN \"C\"\n    END\n      AS sentido,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez',SAFE_CAST(p.111867 AS STRING), 'America/Sao_Paulo') AS data_viagem,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(p.111868 AS STRING), 'America/Sao_Paulo') AS hora_inicio_viagem,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', SAFE_CAST(p.111869 AS STRING), 'America/Sao_Paulo') AS hora_fim_viagem,\n    SAFE_CAST(p.111866 AS STRING) AS motivo,\n    COALESCE(SAFE_CAST(p.111904 AS STRING), SAFE_CAST(p.111900 AS STRING)) AS motivo_julgamento,\n    SAFE_CAST(p.125615 AS STRING) AS observacao,\n\n  FROM\n    pivotado p\n  WHERE rn=1\n)\nSELECT\n      t.id_recurso,\n      DATE(datetime_recurso) AS data,\n      t.datetime_captura,\n      t.datetime_recurso,\n      t.datetime_update,\n      t.consorcio,\n      t.servico,\n      t.sentido,\n      t.id_veiculo AS id_veiculo_numeral,\n      DATETIME(EXTRACT(date FROM TIMESTAMP(data_viagem)), EXTRACT(time FROM TIMESTAMP_SUB(hora_inicio_viagem, INTERVAL 2 HOUR)) ) AS datetime_partida,\n      CASE\n        WHEN\n          EXTRACT(time FROM TIMESTAMP_SUB(hora_inicio_viagem, INTERVAL 2 HOUR)) > EXTRACT(time FROM TIMESTAMP_SUB(hora_fim_viagem, INTERVAL 2 HOUR))\n\n        THEN\n          DATETIME(EXTRACT(date FROM TIMESTAMP_ADD(data_viagem, INTERVAL 1 DAY)), EXTRACT(time FROM TIMESTAMP_SUB(hora_fim_viagem, INTERVAL 2 HOUR)))\n        ELSE\n          DATETIME(EXTRACT(date FROM TIMESTAMP(data_viagem)),\n            EXTRACT(time FROM TIMESTAMP_SUB(hora_fim_viagem, INTERVAL 2 HOUR))\n          )\n      END AS datetime_chegada,\n      t.motivo AS motivo_recurso,\n      t.julgamento,\n      t.motivo_julgamento,\n      t.observacao AS observacao_julgamento,\n      j.data_julgamento\n\nFROM\n      tratado t\nLEFT JOIN\n    `rj-smtr`.`br_rj_riodejaneiro_recursos_staging`.`recursos_sppo_viagens_individuais_ultimo_julgamento` AS j\n\n  ON t.id_recurso = j.id_recurso", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_viagens_individuais`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:13.051716Z", "completed_at": "2025-02-20T18:15:15.722380Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:15.729209Z", "completed_at": "2025-02-20T18:15:15.729240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.6828019618988037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.rho_registros_stpl", "compiled": true, "compiled_code": "\n\n\n\n    \n        \n\n        \n\n        \n    \n\n\nSELECT\n    data_transacao,\n    hora_transacao,\n    servico_riocard,\n    operadora,\n    SUM(quantidade_transacao_pagante) AS quantidade_transacao_pagante,\n    SUM(quantidade_transacao_gratuidade) AS quantidade_transacao_gratuidade\nFROM\n    `rj-smtr`.`br_rj_riodejaneiro_rdo_staging`.`rho_registros_stpl_aux`\n\n    WHERE\n        data_transacao\n        \n            IN ('2021-12-23', '2021-12-26', '2021-12-22', '2021-12-24', '2021-12-16', '2021-11-18', '2021-12-17', '2021-12-18', '2021-12-19', '2021-12-25', '2021-12-27', '2002-12-31', '2021-12-15', '2021-12-21', '2021-12-20', '2021-12-14', '2021-12-13')\n        \n\nGROUP BY\n    1,\n    2,\n    3,\n    4", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_rdo`.`rho_registros_stpl`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:15.740756Z", "completed_at": "2025-02-20T18:15:15.751907Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:15.753598Z", "completed_at": "2025-02-20T18:15:15.753609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016778945922851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_shapes_geom", "compiled": true, "compiled_code": "\n\nwith data_versao as (\n    select data_versao_shapes\n    from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n    where data between date_sub(\"2022-01-01T01:00:00\", interval 1 day) and date(\"2022-01-01T01:00:00\")\n),\ncontents as (\n    SELECT\n        shape_id,\n        ST_GEOGPOINT(\n            SAFE_CAST(shape_pt_lon AS FLOAT64),\n            SAFE_CAST(shape_pt_lat AS FLOAT64)\n        ) ponto_shape,\n        SAFE_CAST(shape_pt_sequence as INT64) shape_pt_sequence,\n        DATE(data_versao) AS data_versao\n    FROM\n        `rj-smtr-staging.projeto_subsidio_sppo_staging.shapes` s\n    \n    WHERE\n        data_versao in (select data_versao_shapes from data_versao)\n    \n),\npts as (\n    select\n        *,\n        max(shape_pt_sequence) over(\n                partition by data_versao, shape_id\n        ) final_pt_sequence\n    from\n        contents c\n    order by\n        data_versao, shape_id, shape_pt_sequence\n),\nshapes as (\n-- BUILD LINESTRINGS OVER SHAPE POINTS\n    SELECT\n        shape_id,\n        data_versao,\n        st_makeline(ARRAY_AGG(ponto_shape)) as shape\n    FROM pts\n    GROUP BY 1,2\n),\nboundary as (\n-- EXTRACT START AND END POINTS FROM SHAPES\n    SELECT\n        c1.shape_id,\n        c1.ponto_shape start_pt,\n        c2.ponto_shape end_pt,\n        c1.data_versao\n    FROM\n        (select * from pts where shape_pt_sequence = 1) c1\n    JOIN\n        (select * from pts where shape_pt_sequence = final_pt_sequence) c2\n    ON\n        c1.shape_id = c2.shape_id and c1.data_versao = c2.data_versao\n),\nmerged as (\n-- JOIN SHAPES AND BOUNDARY POINTS\n    SELECT\n        s.*,\n        b.* except(data_versao, shape_id),\n        round(ST_LENGTH(shape),1) shape_distance,\n    FROM\n        shapes s\n    JOIN\n        boundary b\n    ON\n        s.shape_id = b.shape_id and s.data_versao = b.data_versao\n),\nids as (\n    SELECT\n        shape_id,\n        shape,\n        shape_distance,\n        start_pt,\n        end_pt,\n        data_versao,\n        row_number() over(\n                partition by data_versao, shape_id\n        ) rn\n    FROM merged m\n)\nSELECT\n       * except(rn),\n       \"\" as versao_modelo\nFROM ids\nWHERE rn = 1", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`subsidio_shapes_geom`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:15.779562Z", "completed_at": "2025-02-20T18:15:18.679831Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:18.681096Z", "completed_at": "2025-02-20T18:15:18.681105Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.904005527496338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_informada_monitoramento", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n    \n        \n\n        \n\n         \n        \n    \n\n\n\nwith\n    staging_rioonibus as (\n        select\n            data_viagem as data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            fornecedor as fonte_gps,\n            datetime_processamento,\n            timestamp_captura as datetime_captura\n        from `rj-smtr`.`monitoramento_staging`.`viagem_informada_rioonibus`\n         where \n  DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n \n    ),\n    staging_brt as (\n        select\n            data_viagem as data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            \"brt\" as fonte_gps,\n            datetime_processamento,\n            timestamp_captura as datetime_captura\n        from `rj-smtr`.`monitoramento_staging`.`viagem_informada_brt`\n        where\n             \n  DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n and \n            datetime_processamento >= \"2024-09-10 13:00:00\"\n    ),\n    staging_union as (\n        select *\n        from staging_rioonibus\n\n        union all\n\n        select *\n        from staging_brt\n    ),\n    staging as (\n        select\n            data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            fonte_gps,\n            datetime_processamento,\n            datetime_captura\n        from staging_union\n    ),\n    complete_partitions as (\n        select *, 0 as priority\n        from staging\n\n        \n    ),\n    deduplicado as (\n        select * except (rn, priority)\n        from\n            (\n                select\n                    *,\n                    row_number() over (\n                        partition by id_viagem order by datetime_captura desc, priority\n                    ) as rn\n                from complete_partitions\n            )\n        where rn = 1\n    ),\n    calendario as (\n        select *\n        from `rj-smtr`.`planejamento`.`calendario`\n        \n            where data in ()\n        \n    ),\n    routes as (\n        select *\n        from `rj-smtr`.`gtfs`.`routes`\n        \n        \n            where feed_start_date in ()\n        \n    ),\n    viagem_modo as (\n        select\n            data,\n            v.id_viagem,\n            v.datetime_partida,\n            v.datetime_chegada,\n            case\n                when v.fonte_gps = 'brt'\n                then 'BRT'\n                when r.route_type = '200'\n                then '\u00d4nibus Executivo'\n                when r.route_type = '700'\n                then '\u00d4nibus SPPO'\n            end as modo,\n            if(trim(v.id_veiculo) = '', null, v.id_veiculo) as id_veiculo,\n            if(trim(v.trip_id) = '', null, v.trip_id) as trip_id,\n            if(trim(v.route_id) = '', null, v.route_id) as route_id,\n            if(trim(v.shape_id) = '', null, v.shape_id) as shape_id,\n            if(trim(v.servico) = '', null, v.servico) as servico,\n            if(trim(v.sentido) = '', null, v.sentido) as sentido,\n            if(trim(v.fonte_gps) = '', null, v.fonte_gps) as fonte_gps,\n            v.datetime_processamento,\n            v.datetime_captura\n        from deduplicado v\n        join calendario c using (data)\n        left join routes r using (route_id, feed_start_date, feed_version)\n    )\nselect\n    *,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom viagem_modo", "relation_name": "`rj-smtr`.`monitoramento`.`viagem_informada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:18.710395Z", "completed_at": "2025-02-20T18:15:18.715021Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:18.716296Z", "completed_at": "2025-02-20T18:15:18.716303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008298873901367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.servicos_sentido", "compiled": true, "compiled_code": "\n\nwith\n    servicos_exclusivos_sabado as (\n        select distinct servico\n        from `rj-smtr`.`gtfs`.`ordem_servico`\n        where tipo_dia = \"Dia \u00datil\" and viagens_planejadas = 0\n    ),\n    servicos as (\n        select * except (versao_modelo, shape)\n        from `rj-smtr`.`gtfs`.`trips` as t\n        left join `rj-smtr`.`gtfs`.`shapes_geom` as s using (feed_start_date, shape_id)\n        where\n            (\n                feed_start_date >= \"2023-06-01\"\n                and (\n                    trip_short_name not in (select * from servicos_exclusivos_sabado)\n                    and (service_id like \"U_R%\" or service_id like \"U_O%\")\n                )\n                or (\n                    trip_short_name in (select * from servicos_exclusivos_sabado)\n                    and (service_id like \"S_R%\" or service_id like \"S_O%\")\n                )\n            )\n            or (\n                feed_start_date < \"2023-06-01\"\n                and (\n                    trip_short_name not in (select * from servicos_exclusivos_sabado)\n                    or (\n                        trip_short_name in (select * from servicos_exclusivos_sabado)\n                        and service_id = \"S\"\n                    )\n                )\n            )\n            and shape_distance is not null\n    ),\n    servicos_rn as (\n        select\n            *,\n            row_number() over (\n                partition by feed_start_date, trip_short_name, direction_id\n                order by trip_short_name, service_id, shape_id, direction_id\n            ) as rn\n        from servicos\n    ),\n    servicos_filtrada as (select * except (rn) from servicos_rn where rn = 1),\n    servicos_potencialmente_circulares as (\n        select\n            feed_start_date, trip_short_name, count(distinct direction_id) as q_direcoes\n        from servicos_filtrada\n        group by 1, 2\n        having count(distinct direction_id) = 1\n    )\nselect\n    feed_start_date,\n    trip_short_name as servico,\n    case\n        when q_direcoes = 1 and st_distance(start_pt, end_pt) <= 50\n        then \"C\"\n        when direction_id = \"0\"\n        then \"I\"\n        when direction_id = \"1\"\n        then \"V\"\n    end as sentido\nfrom servicos_filtrada as sf\nleft join\n    servicos_potencialmente_circulares as spc using (feed_start_date, trip_short_name)", "relation_name": "`rj-smtr`.`dashboard_operacao_onibus_staging`.`servicos_sentido`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:21.147355Z", "completed_at": "2025-02-20T18:15:21.163498Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:21.168975Z", "completed_at": "2025-02-20T18:15:21.169006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03208422660827637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_shapes_geom_filtrada", "compiled": true, "compiled_code": "SELECT\n  *\nFROM\n  `rj-smtr`.`planejamento`.`shapes_geom`\nWHERE\n  feed_start_date = '2024-05-03'", "relation_name": "`rj-smtr`.`planejamento_staging`.`aux_shapes_geom_filtrada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:21.202450Z", "completed_at": "2025-02-20T18:15:23.305781Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:23.311437Z", "completed_at": "2025-02-20T18:15:23.311470Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.114936351776123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.shapes_geom", "compiled": true, "compiled_code": "\n\n       \n\nwith\n       trips as (\n              SELECT\n                     trip_id,\n                     shape_id,\n                     route_id,\n                     DATE(data_versao) data_versao\n              FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`trips_desaninhada` t\n              WHERE DATE(data_versao) between DATE(\"2022-08-14\") and DATE_ADD(DATE(\"2022-08-14\"), INTERVAL 15 DAY)\n       ),\n       linhas as (\n              SELECT\n                     trip_id,\n                     shape_id,\n                     t.route_id,\n                     route_short_name linha,\n                     idModalSmtr id_modal_smtr,\n                     t.data_versao,\n              FROM trips t\n              INNER JOIN (\n              SELECT *\n              FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`routes_desaninhada`\n              WHERE DATE(data_versao) between DATE(\"2022-08-14\") and DATE_ADD(DATE(\"2022-08-14\"), INTERVAL 15 DAY)\n              ) r\n              on t.route_id = r.route_id\n              and t.data_versao = r.data_versao\n       ),\n       contents as (\n       -- EXTRACTS VALUES FROM JSON STRING FIELD 'content'\n              SELECT\n                     shape_id,\n                     ST_GEOGPOINT(\n                            SAFE_CAST(json_value(content, \"$.shape_pt_lon\") AS FLOAT64),\n                            SAFE_CAST(json_value(content, \"$.shape_pt_lat\") AS FLOAT64)\n                     ) ponto_shape,\n                     SAFE_CAST(json_value(content, \"$.shape_pt_sequence\") as INT64) shape_pt_sequence,\n                     DATE(data_versao) AS data_versao\n              FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes` s\n              WHERE DATE(data_versao) between DATE(\"2022-08-14\") and DATE_ADD(DATE(\"2022-08-14\"), INTERVAL 15 DAY)\n       ),\n       pts as (\n              select\n                     *,\n                     max(shape_pt_sequence) over(\n                            partition by data_versao, shape_id\n                     ) final_pt_sequence\n              from contents c\n              order by data_versao, shape_id, shape_pt_sequence\n       ),\n       shapes as (\n              -- BUILD LINESTRINGS OVER SHAPE POINTS\n              SELECT\n                     shape_id,\n                     data_versao,\n                     st_makeline(ARRAY_AGG(ponto_shape)) as shape\n              FROM pts\n              GROUP BY 1,2\n       ),\n       boundary as (\n              -- EXTRACT START AND END POINTS FROM SHAPES\n              SELECT\n                     c1.shape_id,\n                     c1.ponto_shape start_pt,\n                     c2.ponto_shape end_pt,\n                     c1.data_versao\n              FROM (select * from pts where shape_pt_sequence = 1) c1\n              JOIN (select * from pts where shape_pt_sequence = final_pt_sequence) c2\n              ON c1.shape_id = c2.shape_id and c1.data_versao = c2.data_versao\n       ),\n       merged as (\n              -- JOIN SHAPES AND BOUNDARY POINTS\n              SELECT\n                     s.*,\n                     b.* except(data_versao, shape_id),\n                     round(ST_LENGTH(shape),1) shape_distance,\n              FROM shapes s\n              JOIN boundary b\n              ON s.shape_id = b.shape_id and s.data_versao = b.data_versao\n       ),\n       ids as (\n              SELECT\n                     trip_id,\n                     m.shape_id,\n                     route_id,\n                     id_modal_smtr,\n                     replace(linha, \" \", \"\") as linha_gtfs,\n                     shape,\n                     shape_distance,\n                     start_pt,\n                     end_pt,\n                     m.data_versao,\n                     row_number() over(\n                            partition by m.data_versao, m.shape_id, l.trip_id\n                     ) rn\n              FROM merged m\n              JOIN linhas l\n              ON m.shape_id = l.shape_id\n              AND m.data_versao = l.data_versao\n              -- mudar join para o route_id em todas as dependencias\n       )\nSELECT\n       * except(rn)\nFROM ids\nWHERE rn = 1\n\nAND data_versao > DATE(\"2022-08-14\")\n", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:23.494580Z", "completed_at": "2025-02-20T18:15:23.498858Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:23.501383Z", "completed_at": "2025-02-20T18:15:23.501393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009734630584716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.licenciamento_veiculo_datario", "compiled": true, "compiled_code": "\nselect *\nfrom `rj-smtr`.`veiculo`.`licenciamento`\n", "relation_name": "`rj-smtr`.`datario`.`licenciamento_veiculo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:23.514726Z", "completed_at": "2025-02-20T18:15:25.937735Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:25.943776Z", "completed_at": "2025-02-20T18:15:25.943813Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.4357340335845947, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.integracao_invalida", "compiled": true, "compiled_code": "\n\n\n\n    \n\n        \n\n        \n        \n\n        \n        \n    \n\n\nwith\n    matriz as (\n        select distinct\n            data_inicio_matriz,\n            data_fim_matriz,\n            array_to_string(sequencia_completa_modo, ', ') as modos,\n            to_json_string(sequencia_completa_rateio) as rateio,\n            tempo_integracao_minutos\n        from `rj-smtr`.`planejamento`.`matriz_integracao`\n    ),\n    versao_matriz as (select distinct data_inicio_matriz, data_fim_matriz from matriz),\n    integracao_agg as (\n        select\n            date(datetime_processamento_integracao) as data,\n            id_integracao,\n            string_agg(\n                case\n                    when modo = 'Van'\n                    then consorcio\n                    when modo = '\u00d4nibus'\n                    then 'SPPO'\n                    else modo\n                end,\n                ', '\n                order by sequencia_integracao\n            ) as modos,\n            to_json_string(\n                array_agg(\n                    cast(percentual_rateio as numeric) order by sequencia_integracao\n                )\n            ) as rateio,\n            min(datetime_transacao) as datetime_primeira_transacao,\n            max(datetime_transacao) as datetime_ultima_transacao,\n            min(intervalo_integracao) as menor_intervalo\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao`\n        \n        \n            where\n                 data = \"2000-01-01\"\n                \n        \n        group by 1, 2\n    ),\n    integracao_matriz as (\n        select\n            i.data,\n            i.id_integracao,\n            i.modos,\n            i.rateio,\n            i.datetime_primeira_transacao,\n            i.datetime_ultima_transacao,\n            i.menor_intervalo,\n            m.modos as modos_matriz,\n            m.rateio as rateio_matriz,\n            m.tempo_integracao_minutos,\n            v.data_inicio_matriz\n        from integracao_agg i\n        left join\n            matriz m\n            on i.data >= m.data_inicio_matriz\n            and (i.data <= m.data_fim_matriz or m.data_fim_matriz is null)\n            and i.modos = m.modos\n        left join\n            versao_matriz v\n            on i.data >= v.data_inicio_matriz\n            and (i.data <= v.data_fim_matriz or v.data_fim_matriz is null)\n    ),\n    indicadores as (\n        select\n            data,\n            id_integracao,\n            modos,\n            modos_matriz is null as indicador_fora_matriz,\n            case\n                when modos_matriz is null\n                then null\n                else\n                    timestamp_diff(\n                        datetime_ultima_transacao, datetime_primeira_transacao, minute\n                    )\n                    > tempo_integracao_minutos\n            end as indicador_tempo_integracao_invalido,\n            case\n                when modos_matriz is null then null else rateio != rateio_matriz\n            end as indicador_rateio_invalido,\n            rateio,\n            rateio_matriz,\n            data_inicio_matriz\n        from integracao_matriz\n    )\nselect\n    *,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom indicadores\nwhere\n    (\n        indicador_fora_matriz\n        or indicador_tempo_integracao_invalido\n        or indicador_rateio_invalido\n    )\n    and data >= (select min(data_inicio_matriz) from versao_matriz)", "relation_name": "`rj-smtr`.`validacao_dados_jae`.`integracao_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:25.964565Z", "completed_at": "2025-02-20T18:15:28.122217Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:28.128351Z", "completed_at": "2025-02-20T18:15:28.128386Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.1754536628723145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_transacao_id_ordem_pagamento", "compiled": true, "compiled_code": "\n\n\n\n\n\n    \n        \n\n        \n\n    \n\n\nwith\n    staging as (\n        select\n            date(data_transacao) as data,\n            id as id_transacao,\n            id_ordem_ressarcimento as id_ordem_pagamento_servico_operador_dia,\n            data_transacao as datetime_transacao,\n            data_processamento as datetime_processamento,\n            timestamp_captura as datetime_captura\n        from `rj-smtr`.`bilhetagem_staging`.`transacao_ordem`\n         where \n  DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n  AND timestamp_captura BETWEEN DATETIME(\"2022-01-01T00:00:00\") AND DATETIME(\"2022-01-01T01:00:00\")\n \n    ),\n    new_data as (\n        select\n            s.data,\n            s.id_transacao,\n            s.datetime_transacao,\n            s.datetime_processamento,\n            o.data_ordem,\n            id_ordem_pagamento_servico_operador_dia,\n            o.id_ordem_pagamento_consorcio_operador_dia,\n            o.id_ordem_pagamento_consorcio_dia,\n            o.id_ordem_pagamento,\n            s.datetime_captura\n        from staging s\n        join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_servico_operador_dia` o using (\n                id_ordem_pagamento_servico_operador_dia\n            )\n    ),\n    complete_partitions as (\n        select *, 0 as priority\n        from new_data\n        \n    )\nselect * except (rn, priority)\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id_transacao order by datetime_captura desc, priority\n            ) as rn\n        from complete_partitions\n    )\nwhere rn = 1", "relation_name": "`rj-smtr`.`bilhetagem_staging`.`aux_transacao_id_ordem_pagamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:28.143922Z", "completed_at": "2025-02-20T18:15:31.965069Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:31.968213Z", "completed_at": "2025-02-20T18:15:31.968233Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.8310000896453857, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_consorcio_operador_dia", "compiled": true, "compiled_code": "\n-- depends_on: `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_servico_operador_dia`\n\n\n\n\n    \n        -- Verifica as ordens de pagamento capturadas\n        \n\n        \n\n        \n\n        \n    \n\n\n\nwith\n    pagamento as (\n        select data_pagamento, data_ordem, id_consorcio, id_operadora, valor_pago\n        from `rj-smtr`.`controle_financeiro_staging`.`aux_retorno_ordem_pagamento`\n        -- `rj-smtr.controle_financeiro_staging.aux_retorno_ordem_pagamento`\n        \n            where\n                 data_ordem = '2000-01-01'\n                \n                \n\n        \n    ),\n    ordem_pagamento as (\n        select\n            o.data_ordem,\n            o.id_ordem_pagamento_consorcio_operadora\n            as id_ordem_pagamento_consorcio_operador_dia,\n            dc.id_consorcio,\n            dc.consorcio,\n            do.id_operadora,\n            do.operadora,\n            op.id_ordem_pagamento as id_ordem_pagamento,\n            o.qtd_debito as quantidade_transacao_debito,\n            o.valor_debito,\n            o.qtd_vendaabordo as quantidade_transacao_especie,\n            o.valor_vendaabordo as valor_especie,\n            o.qtd_gratuidade as quantidade_transacao_gratuidade,\n            o.valor_gratuidade,\n            o.qtd_integracao as quantidade_transacao_integracao,\n            o.valor_integracao,\n            o.qtd_rateio_credito as quantidade_transacao_rateio_credito,\n            o.valor_rateio_credito as valor_rateio_credito,\n            o.qtd_rateio_debito as quantidade_transacao_rateio_debito,\n            o.valor_rateio_debito as valor_rateio_debito,\n            (\n                o.qtd_debito + o.qtd_vendaabordo + o.qtd_gratuidade + o.qtd_integracao\n            ) as quantidade_total_transacao,\n            o.valor_bruto as valor_total_transacao_bruto,\n            o.valor_taxa as valor_desconto_taxa,\n            o.valor_liquido as valor_total_transacao_liquido_ordem,\n            o.timestamp_captura as datetime_captura,\n            current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento_consorcio_operadora` o\n        -- `rj-smtr.br_rj_riodejaneiro_bilhetagem_staging.ordem_pagamento_consorcio_operadora` o\n        join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento` op\n            \n            on o.data_ordem = op.data_ordem\n        left join `rj-smtr`.`cadastro`.`operadoras` do on o.id_operadora = do.id_operadora_jae\n        \n        left join `rj-smtr`.`cadastro`.`consorcios` dc on o.id_consorcio = dc.id_consorcio_jae\n        \n        \n            where\n                date(o.data) between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n                and o.timestamp_captura > datetime(\"2022-01-01T00:00:00\")\n                and o.timestamp_captura <= datetime(\"2022-01-01T01:00:00\")\n        \n    ),\n    ordem_pagamento_completa as (\n        select *, 0 as priority\n        from ordem_pagamento\n\n        \n    ),\n    ordem_valor_pagamento as (\n        select\n            data_ordem,\n            id_ordem_pagamento_consorcio_operador_dia,\n            id_consorcio,\n            o.consorcio,\n            id_operadora,\n            o.operadora,\n            o.id_ordem_pagamento,\n            o.quantidade_transacao_debito,\n            o.valor_debito,\n            o.quantidade_transacao_especie,\n            o.valor_especie,\n            o.quantidade_transacao_gratuidade,\n            o.valor_gratuidade,\n            o.quantidade_transacao_integracao,\n            o.valor_integracao,\n            o.quantidade_transacao_rateio_credito,\n            o.valor_rateio_credito,\n            o.quantidade_transacao_rateio_debito,\n            o.valor_rateio_debito,\n            o.quantidade_total_transacao,\n            o.valor_total_transacao_bruto,\n            o.valor_desconto_taxa,\n            o.valor_total_transacao_liquido_ordem,\n            p.data_pagamento,\n            p.valor_pago,\n            o.datetime_captura,\n            o.datetime_ultima_atualizacao,\n            row_number() over (\n                partition by data_ordem, id_consorcio, id_operadora order by priority\n            ) as rn\n        from ordem_pagamento_completa o\n        left join pagamento p using (data_ordem, id_consorcio, id_operadora)\n    )\nselect\n    data_ordem,\n    id_ordem_pagamento_consorcio_operador_dia,\n    id_consorcio,\n    consorcio,\n    id_operadora,\n    operadora,\n    id_ordem_pagamento,\n    quantidade_transacao_debito,\n    valor_debito,\n    quantidade_transacao_especie,\n    valor_especie,\n    quantidade_transacao_gratuidade,\n    valor_gratuidade,\n    quantidade_transacao_integracao,\n    valor_integracao,\n    quantidade_transacao_rateio_credito,\n    valor_rateio_credito,\n    quantidade_transacao_rateio_debito,\n    valor_rateio_debito,\n    quantidade_total_transacao,\n    valor_total_transacao_bruto,\n    valor_desconto_taxa,\n    valor_total_transacao_liquido_ordem,\n    case\n        when data_ordem = '2024-06-07' and id_consorcio = '2' and id_operadora = '8'\n        then valor_total_transacao_liquido_ordem - 1403.4532  -- Corrigir valor pago incorretamente ao VLT na ordem do dia 2024-05-31\n        else valor_total_transacao_liquido_ordem\n    end as valor_total_transacao_liquido,\n    data_pagamento,\n    valor_pago,\n    datetime_captura,\n    '' as versao,\n    datetime_ultima_atualizacao\nfrom ordem_valor_pagamento\nwhere rn = 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_operador_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:31.975643Z", "completed_at": "2025-02-20T18:15:31.996327Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:31.997569Z", "completed_at": "2025-02-20T18:15:31.997577Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025353670120239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_planejada", "compiled": true, "compiled_code": "\n\n\n\n    -- 1. Define datas do per\u00edodo planejado\n    with\n        data_efetiva as (\n            select\n                data,\n                tipo_dia,\n                data_versao_shapes,\n                data_versao_trips,\n                data_versao_frequencies\n            from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n            where\n                data between date_sub(\"2022-01-01T01:00:00\", interval 1 day) and date(\"2022-01-01T01:00:00\") -- fmt: off\n        ),\n        -- 2. Puxa dados de distancia quadro no quadro hor\u00e1rio\n        quadro as (\n            select\n                e.data,\n                e.tipo_dia,\n                p.* except (tipo_dia, data_versao, horario_inicio, horario_fim),\n                if(\n                    horario_inicio is not null\n                    and array_length(split(horario_inicio, \":\")) = 3,\n                    datetime_add(\n                        datetime(\n                            e.data,\n                            parse_time(\n                                \"%T\",\n                                concat(\n                                    safe_cast(\n                                        mod(\n                                            safe_cast(\n                                                split(horario_inicio, \":\")[\n                                                    offset(0)\n                                                ] as int64\n                                            ),\n                                            24\n                                        ) as int64\n                                    ),\n                                    \":\",\n                                    safe_cast(\n                                        split(horario_inicio, \":\")[offset(1)] as int64\n                                    ),\n                                    \":\",\n                                    safe_cast(\n                                        split(horario_inicio, \":\")[offset(2)] as int64\n                                    )\n                                )\n                            )\n                        ),\n                        interval div(\n                            safe_cast(split(horario_inicio, \":\")[offset(0)] as int64),\n                            24\n                        ) day\n                    ),\n                    null\n                ) as inicio_periodo,\n                if(\n                    horario_fim is not null\n                    and array_length(split(horario_fim, \":\")) = 3,\n                    datetime_add(\n                        datetime(\n                            e.data,\n                            parse_time(\n                                \"%T\",\n                                concat(\n                                    safe_cast(\n                                        mod(\n                                            safe_cast(\n                                                split(horario_fim, \":\")[\n                                                    offset(0)\n                                                ] as int64\n                                            ),\n                                            24\n                                        ) as int64\n                                    ),\n                                    \":\",\n                                    safe_cast(\n                                        split(horario_fim, \":\")[offset(1)] as int64\n                                    ),\n                                    \":\",\n                                    safe_cast(\n                                        split(horario_fim, \":\")[offset(2)] as int64\n                                    )\n                                )\n                            )\n                        ),\n                        interval div(\n                            safe_cast(split(horario_fim, \":\")[offset(0)] as int64), 24\n                        ) day\n                    ),\n                    null\n                ) as fim_periodo\n            from data_efetiva e\n            inner join\n                (\n                    select *\n                    from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_quadro_horario`\n                    \n                        where\n                            data_versao\n                            in (select data_versao_frequencies from data_efetiva)\n                    \n                ) p\n                on e.data_versao_frequencies = p.data_versao\n                and e.tipo_dia = p.tipo_dia\n        ),\n        -- 3. Trata informa\u00e7\u00e3o de trips: adiciona ao sentido da trip o sentido\n        -- planejado (os shapes/trips circulares s\u00e3o separados em\n        -- ida/volta no sigmob)\n        trips as (\n            select e.data, t.*\n            from\n                (\n                    select *\n                    from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_trips_desaninhada`\n                    \n                        where\n                            data_versao in (select data_versao_trips from data_efetiva)\n                    \n                ) t\n            inner join data_efetiva e on t.data_versao = e.data_versao_trips\n        ),\n        quadro_trips as (\n            select *\n            from\n                (\n                    select distinct\n                        * except (trip_id), trip_id as trip_id_planejado, trip_id\n                    from quadro\n                    where sentido = \"I\" or sentido = \"V\"\n                )\n            union all\n            (\n                select\n                    * except (trip_id),\n                    trip_id as trip_id_planejado,\n                    concat(trip_id, \"_0\") as trip_id,\n                from quadro\n                where sentido = \"C\"\n            )\n            union all\n            (\n                select\n                    * except (trip_id),\n                    trip_id as trip_id_planejado,\n                    concat(trip_id, \"_1\") as trip_id,\n                from quadro\n                where sentido = \"C\"\n            )\n        ),\n        quadro_tratada as (\n            select\n                q.*,\n                t.shape_id as shape_id_planejado,\n                case\n                    when sentido = \"C\"\n                    then shape_id || \"_\" || split(q.trip_id, \"_\")[offset(1)]\n                    else shape_id\n                end as shape_id,  -- TODO: adicionar no sigmob\n            from quadro_trips q\n            left join trips t on t.data = q.data and t.trip_id = q.trip_id_planejado\n        ),\n        -- 4. Trata informa\u00e7\u00f5es de shapes: junta trips e shapes para resgatar o sentido\n        -- planejado (os shapes/trips circulares s\u00e3o separados em\n        -- ida/volta no sigmob)\n        shapes as (\n            select e.data, data_versao as data_shape, shape_id, shape, start_pt, end_pt\n            from data_efetiva e\n            inner join\n                (\n                    select *\n                    from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_shapes_geom`\n                    \n                        where\n                            data_versao in (select data_versao_shapes from data_efetiva)\n                    \n                ) s\n                on s.data_versao = e.data_versao_shapes\n        )\n    -- 5. Junta shapes e trips aos servicos planejados no quadro hor\u00e1rio\n    select\n        p.*,\n        s.data_shape,\n        s.shape,\n        case\n            when p.sentido = \"C\" and split(p.shape_id, \"_\")[offset(1)] = \"0\"\n            then \"I\"\n            when p.sentido = \"C\" and split(p.shape_id, \"_\")[offset(1)] = \"1\"\n            then \"V\"\n            when p.sentido = \"I\" or p.sentido = \"V\"\n            then p.sentido\n        end as sentido_shape,\n        s.start_pt,\n        s.end_pt,\n        safe_cast(null as int64) as id_tipo_trajeto,  -- Adapta\u00e7\u00e3o para formato da SUBSIDIO_V6\n        safe_cast(null as string) as feed_version,  -- Adapta\u00e7\u00e3o para formato da SUBSIDIO_V6\n        current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao  -- Adapta\u00e7\u00e3o para formato da SUBSIDIO_V7\n    from quadro_tratada p\n    inner join shapes s on p.shape_id = s.shape_id and p.data = s.data\n\n", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:32.001381Z", "completed_at": "2025-02-20T18:15:32.056192Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:32.057569Z", "completed_at": "2025-02-20T18:15:32.057578Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.058622121810913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_planejada_planejamento", "compiled": true, "compiled_code": "\n\n\n\n\n\n    \n\n\nwith\n     __dbt__cte__aux_ordem_servico_horario_tratado as (\n\n\nwith\n    ordem_servico as (\n        select\n            * except (horario_inicio, horario_fim),\n            parse_time(\"%H:%M:%S\", lpad(horario_inicio, 8, '0')) as horario_inicio,\n            split(horario_fim, \":\") horario_fim_parts\n        \n        from `rj-smtr`.`gtfs`.`ordem_servico`\n    )\nselect\n    * except (horario_fim_parts),\n    div(cast(horario_fim_parts[0] as integer), 24) as dias_horario_fim,\n    parse_time(\n        \"%H:%M:%S\",\n        concat(\n            lpad(\n                cast(\n                    if(\n                        cast(horario_fim_parts[0] as integer) >= 24,\n                        cast(horario_fim_parts[0] as integer) - 24,\n                        cast(horario_fim_parts[0] as integer)\n                    ) as string\n                ),\n                2,\n                '0'\n            ),\n            \":\",\n            horario_fim_parts[1],\n            \":\",\n            horario_fim_parts[2]\n        )\n    ) as horario_fim,\nfrom ordem_servico\n),  __dbt__cte__aux_trips_dia as (\n\n\n\nwith\n    routes as (\n        select\n            *,\n            case\n                when agency_id in (\"22005\", \"22002\", \"22004\", \"22003\")\n                then \"\u00d4nibus\"\n                when agency_id = \"20001\"\n                then \"BRT\"\n            end as modo\n        \n        from `rj-smtr`.`gtfs`.`routes`\n    ),\n    trips_dia as (\n        select\n            c.data,\n            t.trip_id,\n            r.modo,\n            t.route_id,\n            t.service_id,\n            r.route_short_name as servico,\n            t.direction_id,\n            t.shape_id,\n            c.tipo_dia,\n            c.subtipo_dia,\n            c.tipo_os,\n            t.feed_version,\n            t.feed_start_date,\n            regexp_extract(t.trip_headsign, r'\\[.*?\\]') as evento\n        \n        from `rj-smtr`.`planejamento`.`calendario` c\n        \n        join `rj-smtr`.`gtfs`.`trips` t using (feed_start_date, feed_version)\n        join routes r using (feed_start_date, feed_version, route_id)\n        where t.service_id in unnest(c.service_ids)\n    )\nselect\n    td.* except (evento),\n    osa.evento,\n    case\n        when td.direction_id = '0'\n        then ifnull(osa.extensao_ida, os.extensao_ida)\n        when td.direction_id = '1'\n        then ifnull(osa.extensao_volta, os.extensao_volta)\n    end as extensao,\n    os.distancia_total_planejada,\n    os.feed_start_date is not null as indicador_possui_os,\n    os.horario_inicio,\n    os.horario_fim,\n    os.dias_horario_fim\nfrom trips_dia td\nleft join\n    `rj-smtr`.`gtfs`.`ordem_servico_trajeto_alternativo` osa using (\n        feed_start_date, feed_version, tipo_os, servico, evento\n    )\n\nleft join\n    __dbt__cte__aux_ordem_servico_horario_tratado os using (\n        feed_start_date, feed_version, tipo_os, tipo_dia, servico\n    )\n),  __dbt__cte__aux_frequencies_horario_tratado as (\n\n\nwith\n    frequencies as (\n        select\n            *,\n            split(start_time, \":\") as start_time_parts,\n            split(end_time, \":\") as end_time_parts,\n        \n        from `rj-smtr`.`gtfs`.`frequencies`\n    )\n\nselect\n    * except (start_time_parts, end_time_parts, start_time, end_time),\n    div(cast(start_time_parts[0] as integer), 24) days_to_add_start,\n    div(cast(end_time_parts[0] as integer), 24) days_to_add_end,\n    concat(\n        lpad(\n            cast(\n                if(\n                    cast(start_time_parts[0] as integer) >= 24,\n                    cast(start_time_parts[0] as integer) - 24,\n                    cast(start_time_parts[0] as integer)\n                ) as string\n            ),\n            2,\n            '0'\n        ),\n        \":\",\n        start_time_parts[1],\n        \":\",\n        start_time_parts[2]\n    ) as start_time,\n    concat(\n        lpad(\n            cast(\n                if(\n                    cast(end_time_parts[0] as integer) >= 24,\n                    cast(end_time_parts[0] as integer) - 24,\n                    cast(end_time_parts[0] as integer)\n                ) as string\n            ),\n            2,\n            '0'\n        ),\n        \":\",\n        end_time_parts[1],\n        \":\",\n        end_time_parts[2]\n    ) as end_time\nfrom frequencies\n), trips_dia as (\n        select *\n        from __dbt__cte__aux_trips_dia\n        where\n             feed_start_date >= '2024-11-16'\n            \n    ),\n    frequencies_tratada as (\n        select *\n        from __dbt__cte__aux_frequencies_horario_tratado\n        where\n             feed_start_date >= '2024-11-16'\n            \n    ),\n    trips_frequences_dia as (\n        select\n            td.*,\n            timestamp(\n                concat(\n                    cast(date_add(data, interval f.days_to_add_start day) as string),\n                    ' ',\n                    f.start_time\n                ),\n                \"America/Sao_Paulo\"\n            ) as start_timestamp,\n            timestamp(\n                concat(\n                    cast(date_add(data, interval f.days_to_add_end day) as string),\n                    ' ',\n                    f.end_time\n                ),\n                \"America/Sao_Paulo\"\n            ) as end_timestamp,\n            f.headway_secs\n        from trips_dia td\n        join frequencies_tratada f using (feed_start_date, feed_version, trip_id)\n    ),\n    trips_alternativas as (\n        select\n            data,\n            servico,\n            direction_id,\n            array_agg(\n                struct(\n                    trip_id as trip_id,\n                    shape_id as shape_id,\n                    evento as evento,\n                    extensao as extensao\n                )\n            ) as trajetos_alternativos\n        from trips_dia td\n        where td.trip_id not in (select trip_id from frequencies_tratada)\n        group by 1, 2, 3\n    ),\n    viagens as (\n        select\n            tfd.*,\n            datetime(partida, \"America/Sao_Paulo\") as datetime_partida,\n            ta.trajetos_alternativos\n        from\n            trips_frequences_dia tfd,\n            unnest(\n                generate_timestamp_array(\n                    start_timestamp,\n                    timestamp_sub(end_timestamp, interval 1 second),\n                    interval headway_secs second\n                )\n            ) as partida\n        left join trips_alternativas ta using (data, servico, direction_id)\n    ),\n    viagem_filtrada as (\n        -- filtra viagens fora do horario de inicio e fim e em dias n\u00e3o previstos na OS\n        select *\n        from viagens\n        where\n            (distancia_total_planejada is null or distancia_total_planejada > 0)\n            and (\n                not indicador_possui_os\n                or datetime_partida between datetime(data, horario_inicio) and datetime(\n                    date_add(data, interval dias_horario_fim day), horario_fim\n                )\n            )\n    ),\n    servico_circular as (\n        select feed_start_date, feed_version, shape_id\n        \n        from `rj-smtr`.`planejamento`.`shapes_geom`\n        where\n             feed_start_date >= '2024-11-16'\n            \n            and round(st_y(start_pt), 4) = round(st_y(end_pt), 4)\n            and round(st_x(start_pt), 4) = round(st_x(end_pt), 4)\n    ),\n    viagem_planejada as (\n        select\n            date(datetime_partida) as data,\n            datetime_partida,\n            modo,\n            service_id,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            case\n                when c.shape_id is not null\n                then \"C\"\n                when direction_id = '0'\n                then \"I\"\n                else \"V\"\n            end as sentido,\n            evento,\n            extensao,\n            trajetos_alternativos,\n            data as data_referencia,\n            tipo_dia,\n            subtipo_dia,\n            tipo_os,\n            feed_version,\n            feed_start_date,\n            '' as versao,\n            current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\n        from viagem_filtrada v\n        left join servico_circular c using (shape_id, feed_version, feed_start_date)\n    ),\n    viagem_planejada_id as (\n        select\n            *,\n            concat(\n                servico,\n                \"_\",\n                sentido,\n                \"_\",\n                shape_id,\n                \"_\",\n                format_datetime(\"%Y%m%d%H%M%S\", datetime_partida)\n            ) as id_viagem\n        from viagem_planejada\n    )\nselect data, id_viagem, * except (data, id_viagem, rn)\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id_viagem order by data_referencia desc\n            ) as rn\n        from viagem_planejada_id\n    )\nwhere rn = 1", "relation_name": "`rj-smtr`.`planejamento`.`viagem_planejada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:32.099439Z", "completed_at": "2025-02-20T18:15:32.120364Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:32.121691Z", "completed_at": "2025-02-20T18:15:32.121700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024914026260375977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_segmento_shape", "compiled": true, "compiled_code": "# -*- coding: utf-8 -*-\nimport numpy as np\nimport pyproj\nfrom pyspark.sql.functions import col, explode, lit, udf\nfrom pyspark.sql.types import ArrayType, StringType\nfrom shapely import wkt\n\n# from shapely.geometry import LineString, Point\nfrom shapely.ops import substring, transform\n\n\ndef model(dbt, session):\n    dbt.config(\n        materialized=\"table\",\n    )\n    df = dbt.ref(\"aux_shapes_geom_filtrada\")\n    bq_projection = pyproj.CRS(dbt.config.get(\"projecao_wgs_84\"))\n    shapely_projection = pyproj.CRS(dbt.config.get(\"projecao_sirgas_2000\"))\n\n    def transform_projection(shape, from_shapely=False):\n        if from_shapely:\n            project = pyproj.Transformer.from_crs(\n                shapely_projection, bq_projection, always_xy=True\n            ).transform\n        else:\n            project = pyproj.Transformer.from_crs(\n                bq_projection, shapely_projection, always_xy=True\n            ).transform\n\n        return transform(project, shape)\n\n    def cut(line, distance, buffer_size):\n        line_len = line.length\n        dist_mod = line_len % distance\n        dist_range = list(np.arange(0, line_len, distance))\n        middle_index = (len(dist_range) // 2) + 1\n\n        last_final_dist = 0\n        lines = []\n\n        for i, _ in enumerate(dist_range, start=1):\n            if i == middle_index:\n                cut_distance = dist_mod\n            else:\n                cut_distance = distance\n            final_dist = last_final_dist + cut_distance\n            segment = substring(line, last_final_dist, final_dist)\n            lines.append(\n                [\n                    str(i),\n                    transform_projection(segment, True).wkt,\n                    segment.length,\n                    transform_projection(segment.buffer(distance=buffer_size), True).wkt,\n                ]\n            )\n            last_final_dist = final_dist\n\n        return lines\n\n    def cut_udf(wkt_string, distance, buffer_size):\n        line = transform_projection(wkt.loads(wkt_string))\n        return cut(line, distance, buffer_size=buffer_size)\n\n    cut_udf = udf(cut_udf, ArrayType(ArrayType(StringType())))\n    df_segments = df.withColumn(\n        \"shape_lists\",\n        cut_udf(\n            col(\"wkt_shape\"),\n            lit(dbt.config.get(\"comprimento_shape\")),\n            lit(dbt.config.get(\"buffer_segmento_metros\")),\n        ),\n    )\n\n    df_exploded = (\n        df_segments.select(\n            \"feed_version\",\n            \"feed_start_date\",\n            \"feed_end_date\",\n            \"shape_id\",\n            explode(col(\"shape_lists\")).alias(\"shape_list\"),\n        )\n        .withColumn(\"id_segmento\", col(\"shape_list\").getItem(0))\n        .withColumn(\"wkt_segmento\", col(\"shape_list\").getItem(1))\n        .withColumn(\"comprimento_segmento\", col(\"shape_list\").getItem(2))\n        .withColumn(\"buffer_completo\", col(\"shape_list\").getItem(3))\n        .drop(\"shape_list\")\n    )\n\n    return df_exploded\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args, **kwargs):\n    refs = {\"aux_shapes_geom_filtrada\": \"rj-smtr.planejamento_staging.aux_shapes_geom_filtrada\"}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {'projecao_wgs_84': 'EPSG:4326', 'projecao_sirgas_2000': 'EPSG:31983', 'comprimento_shape': 1000, 'buffer_segmento_metros': 20}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"rj-smtr\"\n    schema = \"planejamento_staging\"\n    identifier = \"aux_segmento_shape\"\n    \n    def __repr__(self):\n        return 'rj-smtr.planejamento_staging.aux_segmento_shape'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "relation_name": "`rj-smtr`.`planejamento_staging`.`aux_segmento_shape`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:32.125957Z", "completed_at": "2025-02-20T18:15:32.136917Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:32.138347Z", "completed_at": "2025-02-20T18:15:32.138357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01494455337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.servicos", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__aux_routes_vigencia_gtfs as (\n\n\nWITH routes_rn AS (\n  SELECT\n    route_id AS id_servico,\n    route_short_name AS servico,\n    route_long_name AS descricao_servico,\n    feed_start_date AS inicio_vigencia,\n    feed_end_date AS fim_vigencia,\n    LAG(feed_end_date) OVER (PARTITION BY route_id ORDER BY feed_start_date) AS feed_end_date_anterior,\n    ROW_NUMBER() OVER (PARTITION BY route_id ORDER BY feed_start_date DESC) AS rn\n  FROM\n    `rj-smtr`.`gtfs`.`routes`\n),\nroutes_agrupada AS (\n  SELECT\n    id_servico,\n    inicio_vigencia,\n    servico,\n    descricao_servico,\n    IFNULL(fim_vigencia, CURRENT_DATE(\"America/Sao_Paulo\")) as fim_vigencia,\n    SUM(\n      CASE\n        WHEN feed_end_date_anterior IS NULL OR feed_end_date_anterior <> DATE_SUB(inicio_vigencia, INTERVAL 1 DAY) THEN 1\n        ELSE 0\n      END\n    ) OVER (PARTITION BY id_servico ORDER BY inicio_vigencia) AS group_id\n  FROM\n    routes_rn\n),\nvigencia AS (\n  SELECT\n    id_servico,\n    MIN(inicio_vigencia) AS inicio_vigencia,\n    MAX(fim_vigencia) AS fim_vigencia\n  FROM\n    routes_agrupada\n  GROUP BY\n    id_servico,\n    group_id\n)\nSELECT\n  id_servico,\n  r.servico,\n  r.descricao_servico,\n  NULL AS latitude,\n  NULL AS longitude,\n  v.inicio_vigencia,\n  CASE\n    WHEN v.fim_vigencia != CURRENT_DATE(\"America/Sao_Paulo\") THEN v.fim_vigencia\n  END AS fim_vigencia,\n  'routes' AS tabela_origem_gtfs,\nFROM\n vigencia v\nJOIN\n(\n  SELECT\n    id_servico,\n    servico,\n    descricao_servico\n  FROM\n    routes_rn\n  WHERE\n    rn = 1\n) r\nUSING(id_servico)\n),  __dbt__cte__aux_stops_vigencia_gtfs as (\n\n\nWITH stops_rn AS (\n  SELECT\n    stop_id AS id_servico,\n    stop_code AS servico,\n    stop_name AS descricao_servico,\n    stop_lat AS latitude,\n    stop_lon AS longitude,\n    feed_start_date AS inicio_vigencia,\n    feed_end_date AS fim_vigencia,\n    LAG(feed_end_date) OVER (PARTITION BY stop_id ORDER BY feed_start_date) AS feed_end_date_anterior,\n    ROW_NUMBER() OVER (PARTITION BY stop_id ORDER BY feed_start_date DESC) AS rn\n  FROM\n    `rj-smtr`.`gtfs`.`stops`\n  WHERE\n    location_type = '1'\n),\nstops_agrupada AS (\n  SELECT\n    id_servico,\n    inicio_vigencia,\n    servico,\n    descricao_servico,\n    IFNULL(fim_vigencia, CURRENT_DATE(\"America/Sao_Paulo\")) AS fim_vigencia,\n    SUM(\n      CASE\n        WHEN feed_end_date_anterior IS NULL OR feed_end_date_anterior <> DATE_SUB(inicio_vigencia, INTERVAL 1 DAY) THEN 1\n        ELSE 0\n      END\n    ) OVER (PARTITION BY id_servico ORDER BY inicio_vigencia) AS group_id\n  FROM\n    stops_rn\n),\nvigencia AS (\n  SELECT\n    id_servico,\n    MIN(inicio_vigencia) AS inicio_vigencia,\n    MAX(fim_vigencia) AS fim_vigencia\n  FROM\n    stops_agrupada\n  GROUP BY\n    id_servico,\n    group_id\n)\nSELECT\n  id_servico,\n  r.servico,\n  r.descricao_servico,\n  r.latitude,\n  r.longitude,\n  v.inicio_vigencia,\n  CASE\n    WHEN v.fim_vigencia != CURRENT_DATE(\"America/Sao_Paulo\") THEN v.fim_vigencia\n  END AS fim_vigencia,\n  'stops' AS tabela_origem_gtfs,\nFROM\n vigencia v\nJOIN\n(\n  SELECT\n    id_servico,\n    servico,\n    descricao_servico,\n    latitude,\n    longitude\n  FROM\n    stops_rn\n  WHERE\n    rn = 1\n) r\nUSING(id_servico)\n),  __dbt__cte__aux_servicos_gtfs as (\n\n\nSELECT\n    id_servico,\n    servico,\n    descricao_servico,\n    latitude,\n    longitude,\n    inicio_vigencia,\n    fim_vigencia,\n    tabela_origem_gtfs,\n    '' as versao\nFROM\n    __dbt__cte__aux_routes_vigencia_gtfs\n\nUNION ALL\n\nSELECT\n    id_servico,\n    servico,\n    descricao_servico,\n    latitude,\n    longitude,\n    inicio_vigencia,\n    fim_vigencia,\n    tabela_origem_gtfs,\n    '' as versao\nFROM\n    __dbt__cte__aux_stops_vigencia_gtfs\n) SELECT\n    g.id_servico AS id_servico_gtfs,\n    j.cd_linha AS id_servico_jae,\n    COALESCE(g.servico, j.nr_linha) AS servico,\n    g.servico AS servico_gtfs,\n    j.nr_linha AS servico_jae,\n    COALESCE(g.descricao_servico, j.nm_linha) AS descricao_servico,\n    g.descricao_servico AS descricao_servico_gtfs,\n    j.nm_linha AS descricao_servico_jae,\n    g.latitude,\n    g.longitude,\n    g.tabela_origem_gtfs,\n    COALESCE(g.inicio_vigencia, DATE(j.datetime_inclusao)) AS data_inicio_vigencia,\n    g.fim_vigencia AS data_fim_vigencia,\n    '' as versao\nFROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` j\nFULL OUTER JOIN\n    __dbt__cte__aux_servicos_gtfs g\nON\n    COALESCE(j.gtfs_route_id, j.gtfs_stop_id) = g.id_servico", "relation_name": "`rj-smtr`.`cadastro`.`servicos`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:32.154487Z", "completed_at": "2025-02-20T18:15:34.249631Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.250945Z", "completed_at": "2025-02-20T18:15:34.250955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.0989935398101807, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.data_versao_efetiva", "compiled": true, "compiled_code": "\n\nwith\nagency as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-03\") THEN DATE(\"2021-08-03\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`agency`\n    )\nON data = DATE(data_versao)\n),\ncalendar as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-09-30\") THEN DATE(\"2021-09-30\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`calendar`\n    )\nON data = DATE(data_versao)\n),\nfrota_determinada as (\nSELECT\n    data,\n    DATE(data_versao) as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-09-30\") THEN DATE(\"2021-09-30\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`frota_determinada`\n    )\nON DATE(data) = DATE(data_versao)\n),\nholidays as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-11-05\") THEN DATE(\"2021-11-05\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`holidays`\n    )\nON data = DATE(data_versao)\n),\nlinhas as (\n    SELECT\n    data,\n    DATE(data_versao) as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-03\") THEN DATE(\"2021-08-03\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`linhas`\n    )\nON data = DATE(data_versao)\n),\nroutes as (\nSELECT\n    data,\n    DATE(data_versao) as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-03\") THEN DATE(\"2021-08-03\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`routes`\n    )\nON data = data_versao\n),\nshapes as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-24\") THEN DATE(\"2021-08-24\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`\n    )\nON data = DATE(data_versao)\n),\nstop_details as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-09-30\") THEN DATE(\"2021-09-30\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_details`\n    )\nON data = DATE(data_versao)\n),\nstop_times as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-03\") THEN DATE(\"2021-08-03\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stop_times`\n    )\nON data = DATE(data_versao)\n),\nstops as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-24\") THEN DATE(\"2021-08-24\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`stops`\n    )\nON data = DATE(data_versao)\n),\ntrips as (\nSELECT\n    data,\n    data_versao as data_versao_original,\n    CASE WHEN data <= DATE(\"2021-08-03\") THEN DATE(\"2021-08-03\") ELSE\n        LAST_VALUE(DATE(data_versao) IGNORE NULLS) OVER (ORDER BY data ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n    END AS data_versao_efetiva\nFROM UNNEST(GENERATE_DATE_ARRAY(DATE('2021-01-01'), CURRENT_DATE())) data\nLEFT JOIN (\n    SELECT DISTINCT data_versao\n    FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`trips`\n    )\nON data = DATE(data_versao)\n),\njoined as (\n    select\n    DATE_ADD(s.data, INTERVAL 1 DAY) data,\n    a.data_versao_efetiva as data_versao_efetiva_agency,\n    c.data_versao_efetiva as data_versao_efetiva_calendar,\n    f.data_versao_efetiva as data_versao_efetiva_frota_determinada,\n    h.data_versao_efetiva as data_versao_efetiva_holidays,\n    l.data_versao_efetiva as data_versao_efetiva_linhas,\n    r.data_versao_efetiva as data_versao_efetiva_routes,\n    s.data_versao_efetiva as data_versao_efetiva_shapes,\n    sd.data_versao_efetiva as data_versao_efetiva_stop_details,\n    st.data_versao_efetiva as data_versao_efetiva_stop_times,\n    sp.data_versao_efetiva as data_versao_efetiva_stops,\n    t.data_versao_efetiva as data_versao_efetiva_trips\n    from agency a\n    join shapes s\n    on s.data = a.data\n    join calendar c\n    on a.data = c.data\n    join frota_determinada f\n    on a.data = f.data\n    join holidays h\n    on a.data = h.data\n    join linhas l\n    on a.data = l.data\n    join routes r\n    on a.data = r.data\n    join stops sp\n    on a.data = sp.data\n    join stop_details sd\n    on a.data = sd.data\n    join stop_times st\n    on a.data = st.data\n    join trips t\n    on a.data = t.data\n)\nselect *\nfrom joined\n\n    \n    where DATE(data) > (\"2023-01-28\")\n", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_sigmob`.`data_versao_efetiva`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.278410Z", "completed_at": "2025-02-20T18:15:34.284593Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.285841Z", "completed_at": "2025-02-20T18:15:34.285848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009854793548583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_consorcio_dia", "compiled": true, "compiled_code": "\n\n-- depends_on: `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_operador_dia`\nSELECT\n    o.data_ordem,\n    o.id_ordem_pagamento_consorcio as id_ordem_pagamento_consorcio_dia,\n    dc.id_consorcio,\n    dc.consorcio,\n    o.id_ordem_pagamento AS id_ordem_pagamento,\n    o.qtd_debito AS quantidade_transacao_debito,\n    o.valor_debito,\n    o.qtd_vendaabordo AS quantidade_transacao_especie,\n    o.valor_vendaabordo AS valor_especie,\n    o.qtd_gratuidade AS quantidade_transacao_gratuidade,\n    o.valor_gratuidade,\n    o.qtd_integracao AS quantidade_transacao_integracao,\n    o.valor_integracao,\n    o.qtd_rateio_credito AS quantidade_transacao_rateio_credito,\n    o.valor_rateio_credito AS valor_rateio_credito,\n    o.qtd_rateio_debito AS quantidade_transacao_rateio_debito,\n    o.valor_rateio_debito AS valor_rateio_debito,\n    (\n      o.qtd_debito\n      + o.qtd_vendaabordo\n      + o.qtd_gratuidade\n      + o.qtd_integracao\n    ) AS quantidade_total_transacao,\n    o.valor_bruto AS valor_total_transacao_bruto,\n    o.valor_taxa AS valor_desconto_taxa,\n    o.valor_liquido AS valor_total_transacao_liquido,\n    '' AS versao\nFROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento_consorcio` o\nLEFT JOIN\n    `rj-smtr`.`cadastro`.`consorcios` dc\nON\n    o.id_consorcio = dc.id_consorcio_jae\n\n    WHERE\n        DATE(o.data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.289626Z", "completed_at": "2025-02-20T18:15:34.294647Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.295891Z", "completed_at": "2025-02-20T18:15:34.295899Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008578062057495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_planejada_sentido_shape__I__V__C.65301f5e21", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido_shape as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido_shape\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.299605Z", "completed_at": "2025-02-20T18:15:34.305930Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.307181Z", "completed_at": "2025-02-20T18:15:34.307189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009952068328857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_planejada_tipo_dia__I__V__C.fabfbe2d14", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_dia as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by tipo_dia\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.310972Z", "completed_at": "2025-02-20T18:15:34.316006Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.317262Z", "completed_at": "2025-02-20T18:15:34.317269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008683204650878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_planejada_variacao_itinerario__DD__DU__SS__RT__RM__DA__SA.19c1ddab9e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        variacao_itinerario as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by variacao_itinerario\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'DD','DU','SS','RT','RM','DA','SA'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.320967Z", "completed_at": "2025-02-20T18:15:34.328571Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.329805Z", "completed_at": "2025-02-20T18:15:34.329812Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011163949966430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_planejada_distancia_total_planejada.d8c80cf89c", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_total_planejada <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.333617Z", "completed_at": "2025-02-20T18:15:34.339468Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.340716Z", "completed_at": "2025-02-20T18:15:34.340723Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009462594985961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_consorcio.3058dfe52a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consorcio\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere consorcio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.344569Z", "completed_at": "2025-02-20T18:15:34.350823Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.353368Z", "completed_at": "2025-02-20T18:15:34.353378Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012113809585571289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_data.908c75b0d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.359556Z", "completed_at": "2025-02-20T18:15:34.364519Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.365859Z", "completed_at": "2025-02-20T18:15:34.365866Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009080648422241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_data_shape.5117fd368b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.370101Z", "completed_at": "2025-02-20T18:15:34.377380Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.378695Z", "completed_at": "2025-02-20T18:15:34.378703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011032581329345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_distancia_planejada.74a4f2d184", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.382602Z", "completed_at": "2025-02-20T18:15:34.388984Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.390288Z", "completed_at": "2025-02-20T18:15:34.390296Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0101470947265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_distancia_total_planejada.fc1b124982", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_total_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_total_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.394256Z", "completed_at": "2025-02-20T18:15:34.399890Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.401191Z", "completed_at": "2025-02-20T18:15:34.401199Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00941014289855957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_fim_periodo.b2cf28f8cc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fim_periodo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere fim_periodo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.405193Z", "completed_at": "2025-02-20T18:15:34.410587Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.411916Z", "completed_at": "2025-02-20T18:15:34.411924Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009228706359863281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_inicio_periodo.c62783ac90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inicio_periodo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere inicio_periodo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.415945Z", "completed_at": "2025-02-20T18:15:34.421139Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.422493Z", "completed_at": "2025-02-20T18:15:34.422500Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009200572967529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_intervalo.1fb7eb9e45", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect intervalo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere intervalo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.427483Z", "completed_at": "2025-02-20T18:15:34.434046Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.435365Z", "completed_at": "2025-02-20T18:15:34.435373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010374069213867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_sentido.40310b764f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.440077Z", "completed_at": "2025-02-20T18:15:34.449753Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.451791Z", "completed_at": "2025-02-20T18:15:34.451803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015491247177124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_sentido_shape.7b97f6ff04", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.457021Z", "completed_at": "2025-02-20T18:15:34.464254Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.465550Z", "completed_at": "2025-02-20T18:15:34.465559Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011347532272338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_servico.a9fd6c7425", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.469881Z", "completed_at": "2025-02-20T18:15:34.475497Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.476832Z", "completed_at": "2025-02-20T18:15:34.476840Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009494543075561523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_shape.5f910173a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.480898Z", "completed_at": "2025-02-20T18:15:34.487391Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.488734Z", "completed_at": "2025-02-20T18:15:34.488742Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010331153869628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_tipo_dia.a605476b6d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_dia\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.492776Z", "completed_at": "2025-02-20T18:15:34.498342Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:34.499685Z", "completed_at": "2025-02-20T18:15:34.499693Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009418010711669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_planejada_variacao_itinerario.ea024350d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect variacao_itinerario\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere variacao_itinerario is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:34.521899Z", "completed_at": "2025-02-20T18:15:36.299146Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.300358Z", "completed_at": "2025-02-20T18:15:36.300367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7809371948242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.segmento_shape", "compiled": true, "compiled_code": "\n\n-- depends_on: `rj-smtr`.`gtfs`.`feed_info`\n\n    \n\n\nwith\n    aux_segmento as (\n        select\n            feed_start_date,\n            feed_end_date,\n            feed_version,\n            shape_id,\n            id_segmento,\n            st_geogfromtext(wkt_segmento) as segmento,\n            wkt_segmento,\n            round(cast(comprimento_segmento as float64), 2) as comprimento_segmento,\n            st_geogfromtext(buffer_completo) as buffer_completo\n        from `rj-smtr`.`planejamento_staging`.`aux_segmento_shape`\n    ),\n    tunel as (\n        select\n            st_union_agg(\n                st_buffer(geometry, 50)\n            ) as buffer_tunel\n        from `datario`.`dados_mestres`.`logradouro`\n        where tipo = \"T\u00fanel\"\n\n    ),\n    intercessao_segmento as (\n        select\n            s1.shape_id,\n            s1.id_segmento,\n            st_union(array_agg(s2.buffer_completo)) as buffer_segmento_posterior\n        from aux_segmento s1\n        join\n            aux_segmento s2\n            on s1.shape_id = s2.shape_id\n            and s1.id_segmento < s2.id_segmento\n            and st_intersects(s1.buffer_completo, s2.buffer_completo)\n        group by 1, 2\n    ),\n    buffer_segmento_recortado as (\n        select\n            s.*,\n            coalesce(\n                st_difference(buffer_completo, i.buffer_segmento_posterior),\n                buffer_completo\n            ) as buffer\n        from aux_segmento s\n        left join intercessao_segmento i using (shape_id, id_segmento)\n    ),\n    indicador_validacao_shape as (\n        select\n            s.*,\n            st_intersects(s.segmento, t.buffer_tunel) as indicador_tunel,\n            st_area(s.buffer) / st_area(s.buffer_completo)\n            < 0.5 as indicador_area_prejudicada,\n            s.comprimento_segmento\n            < 990\n            as indicador_segmento_pequeno,\n            cast(id_segmento as integer) as id_segmento_int\n        from buffer_segmento_recortado s\n        cross join tunel t\n    )\nselect\n    * except (id_segmento_int),\n    (\n        (\n            indicador_tunel\n            and (\n                (id_segmento_int > 1)\n                and (\n                    id_segmento_int\n                    < max(id_segmento_int) over (partition by feed_start_date, shape_id)\n                )\n            )\n        )\n        or indicador_area_prejudicada\n        or indicador_segmento_pequeno\n    ) as indicador_segmento_desconsiderado,\n    '' as versao\nfrom indicador_validacao_shape\n\n\n\n    union all\n\n    select\n        s.feed_start_date,\n        fi.feed_end_date,\n        s.feed_version,\n        s.shape_id,\n        s.id_segmento,\n        s.segmento,\n        s.wkt_segmento,\n        s.comprimento_segmento,\n        s.buffer_completo,\n        s.buffer,\n        s.indicador_tunel,\n        s.indicador_area_prejudicada,\n        s.indicador_segmento_pequeno,\n        s.indicador_segmento_desconsiderado,\n        s.versao\n    from `rj-smtr`.`planejamento`.`segmento_shape` s\n    join `rj-smtr`.`gtfs`.`feed_info` fi using (feed_start_date)\n    \n    where feed_start_date = '2024-04-15'\n\n", "relation_name": "`rj-smtr`.`planejamento`.`segmento_shape`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.304075Z", "completed_at": "2025-02-20T18:15:36.308858Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.310063Z", "completed_at": "2025-02-20T18:15:36.310070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00835275650024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_validador_aux", "compiled": true, "compiled_code": "\n\nSELECT\n    do.modo,\n    g.data,\n    g.hora,\n    g.data_tracking AS datetime_gps,\n    g.timestamp_captura AS datetime_captura,\n    do.id_operadora,\n    do.operadora,\n    g.codigo_linha_veiculo AS id_servico_jae,\n    -- s.servico,\n    l.nr_linha AS servico_jae,\n    l.nm_linha AS descricao_servico_jae,\n    prefixo_veiculo AS id_veiculo,\n    g.numero_serie_equipamento AS id_validador,\n    g.id AS id_transmissao_gps,\n    g.latitude_equipamento AS latitude,\n    g.longitude_equipamento AS longitude,\n    INITCAP(g.sentido_linha) AS sentido,\n    g.estado_equipamento,\n    g.temperatura,\n    g.versao_app\nFROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gps_validador` g\nLEFT JOIN\n    `rj-smtr`.`cadastro`.`operadoras` AS do\nON\n    g.codigo_operadora = do.id_operadora_jae\nLEFT JOIN\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` AS l\nON\n    g.codigo_linha_veiculo = l.cd_linha\n-- LEFT JOIN\n--     `rj-smtr`.`cadastro`.`servicos` AS s\n-- ON\n--     g.codigo_linha_veiculo = s.id_servico_jae", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gps_validador_aux`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.313684Z", "completed_at": "2025-02-20T18:15:36.317718Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.319042Z", "completed_at": "2025-02-20T18:15:36.319049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007645368576049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.view_integracao", "compiled": true, "compiled_code": "WITH servicos AS (\n    SELECT\n        * EXCEPT(rn)\n    FROM\n        (\n            SELECT\n                *,\n                ROW_NUMBER() OVER (PARTITION BY id_servico_jae ORDER BY data_inicio_vigencia) AS rn\n            FROM\n                `rj-smtr`.`cadastro`.`servicos`\n        )\n    WHERE\n        rn = 1\n),\ndados_filtrados AS (\n    SELECT\n        i.data,\n        i.hora,\n        i.id_integracao,\n        i.sequencia_integracao,\n        i.modo,\n        s.descricao_servico,\n        i.consorcio,\n        i.datetime_transacao\n    FROM\n        `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao` i\n    LEFT JOIN\n        servicos s\n    USING(id_servico_jae)\n    WHERE\n        data >= \"2024-02-24\"\n        AND servico NOT IN (\"888888\", \"999999\")\n        AND id_operadora != \"2\"\n)\nSELECT\n    a.data,\n    a.hora,\n    a.id_integracao,\n    a.sequencia_integracao AS perna_origem,\n    a.modo AS modo_origem,\n    CONCAT(a.modo, '(', a.sequencia_integracao, ')') AS modo_origem_perna,\n    a.consorcio AS consorcio_origem,\n    a.descricao_servico AS descricao_servico_origem,\n    CONCAT(a.descricao_servico, '(', a.sequencia_integracao, ')') AS descricao_servico_origem_perna,\n    b.sequencia_integracao AS perna_destino,\n    b.modo AS modo_destino,\n    CONCAT(b.modo, '(', b.sequencia_integracao, ')') AS modo_destino_perna,\n    b.consorcio AS consorcio_destino,\n    b.descricao_servico AS descricao_servico_destino,\n    CONCAT(b.descricao_servico, '(', b.sequencia_integracao, ')') AS descricao_servico_destino_perna,\n    TIMESTAMP_DIFF(b.datetime_transacao, a.datetime_transacao, MINUTE) AS tempo_integracao_minutos\nFROM\n    dados_filtrados a\nJOIN\n    dados_filtrados b\nON\n    a.id_integracao = b.id_integracao\n    AND a.sequencia_integracao = b.sequencia_integracao - 1", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_jae`.`view_integracao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.322693Z", "completed_at": "2025-02-20T18:15:36.363046Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.364262Z", "completed_at": "2025-02-20T18:15:36.364271Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043889760971069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_brt", "compiled": true, "compiled_code": "\n/*\nDescri\u00e7\u00e3o:\nJun\u00e7\u00e3o dos passos de tratamento, junta as informa\u00e7\u00f5es extras que definimos a partir dos registros\ncapturados.\nPara descri\u00e7\u00e3o detalhada de como cada coluna \u00e9 calculada, consulte a documenta\u00e7\u00e3o de cada uma das tabelas\nutilizadas abaixo.\n1. registros_filtrada: filtragem e tratamento b\u00e1sico dos dados brutos capturados.\n2. aux_registros_velocidade: estimativa da velocidade de ve\u00edculo a cada ponto registrado e identifica\u00e7\u00e3o\ndo estado de movimento ('parado', 'andando')\n3. aux_registros_parada: identifica ve\u00edculos parados em terminais ou garagens conhecidas\n4. aux_registros_flag_trajeto_correto: calcula intersec\u00e7\u00f5es das posi\u00e7\u00f5es registradas para cada ve\u00edculo\ncom o tra\u00e7ado da linha informada.\n5. As jun\u00e7\u00f5es (joins) s\u00e3o feitas sobre o id_ve\u00edculo e a timestamp_gps.\n*/\nWITH\n     __dbt__cte__brt_aux_registros_velocidade as (\n\n/*\nDescri\u00e7\u00e3o:\nEstimativa das velocidades dos ve\u00edculos nos \u00faltimos 10 minutos contados a partir da timestamp_gps atual.\nEssa metodologia serve para determinar quais carros est\u00e3o em movimento e quais est\u00e3o parados.\n1. Calculamos a velocidade do ve\u00edculo no \u00faltimo trecho de 10 minutos de opera\u00e7\u00e3o.\nA implementa\u00e7\u00e3o utiliza a fun\u00e7\u00e3o 'first_value' com uma janela (cl\u00e1usula 'over') de at\u00e9 10 minutos anteriores \u00e0\ntimestamp_gps atual e calcula a dist\u00e2ncia do ponto mais antigo (o first_value na janela) ao ponto atual (posicao_veiculo_geo).\nDividimos essa dist\u00e2ncia pela diferen\u00e7a de tempo entre a timestamp_gps atual e a timestamp_gps do ponto mais\nantigo da janela (o qual recuperamos novamente com o uso de first_value).\nEsta diferen\u00e7a de tempo (datetime_diff) \u00e9 calculada em segundos, portanto multiplicamos o resultado da divis\u00e3o por um fator\n3.6 para que a velocidade esteja em quil\u00f4metros por hora. O resultado final \u00e9 arrendondado sem casas decimais.\nPor fim, cobrimos esse c\u00e1lculo com a fun\u00e7\u00e3o 'if_null' e retornamos zero para a velocidade em casos onde a divis\u00e3o retornaria\num valor nulo.\n2. Ap\u00f3s o calculo da velocidade, definimos a coluna 'status_movimento'. Ve\u00edculos abaixo da 'velocidade_limiar_parado', s\u00e3o\nconsiderados como 'parado'. Caso contr\u00e1rio, s\u00e3o considerados 'andando'\n*/\nwith\n    t_velocidade as (\n    select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        servico,\n        ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, servico\n                order by timestamp_gps)\n        ) distancia,\n        IFNULL(\n            SAFE_DIVIDE(\n                ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, servico\n                order by timestamp_gps)\n                ),\n                DATETIME_DIFF(\n                timestamp_gps,\n                lag(timestamp_gps) over (\n                partition by id_veiculo, servico\n                order by timestamp_gps),\n                SECOND\n                )),\n            0\n        ) * 3.6 velocidade\n    FROM  `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`\n    WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n    \n    ),\n    medias as (\n        select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        servico,\n        distancia,\n        velocidade, # velocidade do pontual\n        AVG(velocidade) OVER (\n            PARTITION BY id_veiculo, servico\n            ORDER BY unix_seconds(timestamp(timestamp_gps))\n            RANGE BETWEEN 600 PRECEDING AND CURRENT ROW\n        ) velocidade_media # velocidade com m\u00e9dia m\u00f3vel\n    from t_velocidade\n    )\nSELECT\n    timestamp_gps,\n    data,\n    id_veiculo,\n    servico,\n    distancia,\n    ROUND(\n        CASE WHEN velocidade_media > 60\n            THEN 60\n            ELSE velocidade_media\n        END,\n        1) as velocidade,\n    -- 2. Determina\u00e7\u00e3o do estado de movimento do ve\u00edculo.\n    case\n        when velocidade_media < 3 then false\n        else true\n    end flag_em_movimento,\n    -- STRUCT( AS versao_maestro,  AS versao_maestro_bq) versao\nFROM medias\n),  __dbt__cte__brt_aux_registros_parada as (\n\n/*\nDescri\u00e7\u00e3o:\nIdentifica ve\u00edculos parados em terminais ou garagens conhecidas.\n1. Selecionamos os terminais conhecidos e uma geometria do tipo pol\u00edgono (Polygon) que cont\u00e9m buracos nas\nlocaliza\u00e7\u00f5es das garagens.\n2. Calculamos as dist\u00e2ncias do ve\u00edculos em rela\u00e7\u00e3o aos terminais conhecidos. Definimos aqui a coluna 'nrow',\nque identifica qual o terminal que est\u00e1 mais pr\u00f3ximo do ponto informado. No passo final, recuperamos apenas\nos dados com nrow = 1 (menor dist\u00e2ncia em rela\u00e7\u00e3o \u00e0 posi\u00e7\u00e3o do ve\u00edculo)\n3. Definimos uma distancia_limiar_parada. Caso o ve\u00edculo esteja a uma dist\u00e2ncia menor que este valor de uma\nparada, ser\u00e1 considerado como parado no terminal com menor distancia.\n4. Caso o veiculo n\u00e3o esteja intersectando o pol\u00edgono das garagens, ele ser\u00e1 considerado como parado dentro\nde uma garagem (o pol\u00edgono \u00e9 vazado nas garagens, a n\u00e3o intersec\u00e7\u00e3o implica em estar dentro de um dos 'buracos').\n*/\nWITH\n  terminais as (\n    -- 1. Selecionamos terminais, criando uma geometria de ponto para cada.\n    select\n      ST_GEOGPOINT(longitude, latitude) ponto_parada, nome_estacao nome_parada, 'terminal' tipo_parada\n    from rj-smtr.br_rj_riodejaneiro_transporte.estacoes_e_terminais_brt\n  ),\n  garagem_polygon AS (\n    -- 1. Selecionamos o pol\u00edgono das garagens.\n    SELECT  ST_GEOGFROMTEXT(WKT,make_valid => true) AS poly\n    FROM rj-smtr.br_rj_riodejaneiro_geo.garagens_polygon\n  ),\n  distancia AS (\n    --2. Calculamos as dist\u00e2ncias e definimos nrow\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      data,\n      servico,\n      posicao_veiculo_geo,\n      nome_parada,\n      tipo_parada,\n      ROUND(ST_DISTANCE(posicao_veiculo_geo, ponto_parada), 1) distancia_parada,\n      ROW_NUMBER() OVER (PARTITION BY timestamp_gps, id_veiculo, servico ORDER BY ST_DISTANCE(posicao_veiculo_geo, ponto_parada)) nrow\n    FROM terminais p\n    JOIN (\n      SELECT *\n      FROM\n        `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`\n      WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n      \n    ) r\n    on 1=1\n  )\nSELECT\n  data,\n  id_veiculo,\n  timestamp_gps,\n  servico,\n  /*\n  3. e 4. Identificamos o status do ve\u00edculo como 'terminal', 'garagem' (para os ve\u00edculos parados) ou\n  'nao_identificado' (para os ve\u00edculos mais distantes de uma parada que o limiar definido)\n  */\n  case\n    when distancia_parada < 250 then tipo_parada\n    when not ST_INTERSECTS(posicao_veiculo_geo, (SELECT  poly FROM garagem_polygon)) then 'garagem'\n    else null\n  end tipo_parada,\nFROM distancia\nWHERE nrow = 1\n),  __dbt__cte__brt_aux_registros_flag_trajeto_correto as (\n\n/*\nDescri\u00e7\u00e3o:\nCalcula se o ve\u00edculo est\u00e1 dentro do trajeto correto dado o tra\u00e7ado (shape) cadastrado no SIGMOB em rela\u00e7\u00e3o \u00e0 linha que est\u00e1 sendo\ntransmitida.\n1. Calcula as intersec\u00e7\u00f5es definindo um 'buffer', utilizado por st_dwithin para identificar se o ponto est\u00e1 \u00e0 uma\ndist\u00e2ncia menor ou igual ao tamanho do buffer em rela\u00e7\u00e3o ao tra\u00e7ado definido no SIGMOB.\n2. Calcula um hist\u00f3rico de intersec\u00e7\u00f5es nos ultimos 10 minutos de registros de cada carro. Definimos que o carro \u00e9\nconsiderado fora do trajeto definido se a cada 10 minutos, ele n\u00e3o esteve dentro do tra\u00e7ado planejado pelo menos uma\nvez.\n3. Identifica se a linha informada no registro capturado existe nas defini\u00e7\u00f5es presentes no SIGMOB.\n4. Definimos em outra tabela uma 'data_versao_efetiva', esse passo serve tanto para definir qual vers\u00e3o do SIGMOB utilizaremos em\ncaso de falha na captura, quanto para definir qual vers\u00e3o ser\u00e1 utilizada para o c\u00e1lculo retroativo do hist\u00f3rico de registros que temos.\n5. Como n\u00e3o conseguimos identificar o itiner\u00e1rio que o carro est\u00e1 realizando, no passo counts, os resultados de\nintersec\u00e7\u00f5es s\u00e3o dobrados, devido ao fato de cada linha apresentar dois itiner\u00e1rios poss\u00edveis (ida/volta). Portanto,\nao final, realizamos uma agrega\u00e7\u00e3o LOGICAL_OR que \u00e9 true caso o carro esteja dentro do tra\u00e7ado de algum dos itiner\u00e1rios\nposs\u00edveis para a linha informada.\n*/\nWITH\n  registros AS (\n    SELECT id_veiculo, servico as linha, latitude, longitude, data, posicao_veiculo_geo, timestamp_gps\n    FROM\n      `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada` r\n    WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n  ),\n  intersec AS (\n    SELECT\n      r.*,\n      s.data_versao,\n      s.linha_gtfs,\n      s.route_id,\n      -- 1. Buffer e intersec\u00e7\u00f5es\n      CASE\n        WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN TRUE\n        ELSE FALSE\n      END AS flag_trajeto_correto,\n      -- 2. Hist\u00f3rico de intersec\u00e7\u00f5es nos \u00faltimos 10 minutos a partir da timestamp_gps atual\n      CASE\n        WHEN\n          COUNT(CASE WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN 1 END)\n          OVER (PARTITION BY id_veiculo\n                ORDER BY UNIX_SECONDS(TIMESTAMP(timestamp_gps))\n                RANGE BETWEEN 600 PRECEDING AND CURRENT ROW) >= 1\n          THEN True\n        ELSE False\n      END AS flag_trajeto_correto_hist,\n      -- 3. Identifica\u00e7\u00e3o de cadastro da linha no SIGMOB\n      CASE WHEN s.linha_gtfs IS NULL THEN False ELSE True END AS flag_linha_existe_sigmob,\n    -- 4. Join com data_versao_efetiva para defini\u00e7\u00e3o de quais shapes ser\u00e3o considerados no c\u00e1lculo das flags\n    FROM registros r\n    LEFT JOIN (\n      SELECT *\n      FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`\n      WHERE id_modal_smtr in ('20', 'B')\n      AND data_versao = \"2022-06-10\"\n    ) s\n    ON\n      r.linha = s.linha_gtfs\n  )\n    -- 5. Agrega\u00e7\u00e3o com LOGICAL_OR para evitar duplica\u00e7\u00e3o de registros\n    SELECT\n      id_veiculo,\n      linha as servico,\n      linha_gtfs,\n      route_id,\n      data,\n      timestamp_gps,\n      LOGICAL_OR(flag_trajeto_correto) AS flag_trajeto_correto,\n      LOGICAL_OR(flag_trajeto_correto_hist) AS flag_trajeto_correto_hist,\n      LOGICAL_OR(flag_linha_existe_sigmob) AS flag_linha_existe_sigmob,\n      -- STRUCT( AS versao_maestro,\n      --        AS versao_maestro_bq,\n      --       data_versao AS data_versao_sigmob\n      --       ) versao\n    FROM\n      intersec i\n    GROUP BY\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      data_versao,\n      timestamp_gps\n), registros as (\n    -- 1. registros_filtrada\n    SELECT\n        id_veiculo,\n        timestamp_gps,\n        timestamp_captura,\n        velocidade,\n        servico,\n        latitude,\n        longitude,\n    FROM `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`\n    WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n      AND DATETIME_DIFF(timestamp_captura, timestamp_gps, MINUTE) BETWEEN 0 AND 1),\n    velocidades AS (\n    -- 2. velocidades\n    SELECT\n        id_veiculo, timestamp_gps, servico, velocidade, distancia, flag_em_movimento\n    FROM __dbt__cte__brt_aux_registros_velocidade\n    ),\n    paradas as (\n    -- 3. paradas\n    SELECT\n        id_veiculo, timestamp_gps, servico, tipo_parada,\n    FROM __dbt__cte__brt_aux_registros_parada\n    ),\n    flags AS (\n    -- 4. flag_trajeto_correto\n    SELECT\n        id_veiculo,\n        timestamp_gps,\n        servico,\n        route_id,\n        flag_linha_existe_sigmob,\n        flag_trajeto_correto,\n        flag_trajeto_correto_hist\n    FROM __dbt__cte__brt_aux_registros_flag_trajeto_correto\n    )\n-- 5. Jun\u00e7\u00e3o final\nSELECT\n    \"BRT\" modo,\n    r.timestamp_gps,\n    date(r.timestamp_gps) data,\n    extract(time from r.timestamp_gps) hora,\n    r.id_veiculo,\n    replace(r.servico, \" \", \"\") as servico,\n    r.latitude,\n    r.longitude,\n    CASE\n        WHEN\n        flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n        THEN true\n    ELSE false\n    END flag_em_operacao,\n    v.flag_em_movimento,\n    p.tipo_parada,\n    flag_linha_existe_sigmob,\n    flag_trajeto_correto,\n    flag_trajeto_correto_hist,\n    CASE\n        WHEN flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n        THEN 'Em opera\u00e7\u00e3o'\n        WHEN flag_em_movimento is true and flag_trajeto_correto_hist is false\n        THEN 'Operando fora trajeto'\n        WHEN flag_em_movimento is false\n        THEN\n            CASE\n                WHEN tipo_parada is not null\n                THEN concat(\"Parado \", tipo_parada)\n            ELSE\n                CASE\n                    WHEN flag_trajeto_correto_hist is true\n                    THEN 'Parado trajeto correto'\n                ELSE 'Parado fora trajeto'\n                END\n            END\n    END status,\n    r.velocidade velocidade_instantanea,\n    v.velocidade velocidade_estimada_10_min,\n    v.distancia,\n    \"\" as versao\nFROM\n    registros r\n\nJOIN\n    flags f\nON\n    r.id_veiculo = f.id_veiculo\n    AND r.timestamp_gps = f.timestamp_gps\n    AND r.servico = f.servico\n\nJOIN\n    velocidades v\nON\n    r.id_veiculo = v.id_veiculo\n    AND  r.timestamp_gps = v.timestamp_gps\n    AND  r.servico = v.servico\n\nJOIN\n    paradas p\nON\n    r.id_veiculo = p.id_veiculo\n    AND  r.timestamp_gps = p.timestamp_gps\n    AND r.servico = p.servico\nWHERE\n  date(r.timestamp_gps) between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n  AND r.timestamp_gps > \"2022-01-01T00:00:00\" and r.timestamp_gps <=\"2022-01-01T01:00:00\"\n  AND DATETIME_DIFF(r.timestamp_captura, r.timestamp_gps, MINUTE) BETWEEN 0 AND 1", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_brt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.368118Z", "completed_at": "2025-02-20T18:15:36.395175Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.396636Z", "completed_at": "2025-02-20T18:15:36.396646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030951499938964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_brt_15_minutos", "compiled": true, "compiled_code": "\n/*\nDescri\u00e7\u00e3o:\nJun\u00e7\u00e3o dos passos de tratamento, junta as informa\u00e7\u00f5es extras que definimos a partir dos registros\ncapturados.\nPara descri\u00e7\u00e3o detalhada de como cada coluna \u00e9 calculada, consulte a documenta\u00e7\u00e3o de cada uma das tabelas\nutilizadas abaixo.\n1. registros_filtrada: filtragem e tratamento b\u00e1sico dos dados brutos capturados.\n2. aux_registros_velocidade: estimativa da velocidade de ve\u00edculo a cada ponto registrado e identifica\u00e7\u00e3o\ndo estado de movimento ('parado', 'andando')\n3. aux_registros_parada: identifica ve\u00edculos parados em terminais ou garagens conhecidas\n4. aux_registros_flag_trajeto_correto: calcula intersec\u00e7\u00f5es das posi\u00e7\u00f5es registradas para cada ve\u00edculo\ncom o tra\u00e7ado da linha informada.\n5. As jun\u00e7\u00f5es (joins) s\u00e3o feitas sobre o id_ve\u00edculo e a timestamp_gps.\n*/\nWITH\n     __dbt__cte__brt_aux_registros_velocidade as (\n\n/*\nDescri\u00e7\u00e3o:\nEstimativa das velocidades dos ve\u00edculos nos \u00faltimos 10 minutos contados a partir da timestamp_gps atual.\nEssa metodologia serve para determinar quais carros est\u00e3o em movimento e quais est\u00e3o parados.\n1. Calculamos a velocidade do ve\u00edculo no \u00faltimo trecho de 10 minutos de opera\u00e7\u00e3o.\nA implementa\u00e7\u00e3o utiliza a fun\u00e7\u00e3o 'first_value' com uma janela (cl\u00e1usula 'over') de at\u00e9 10 minutos anteriores \u00e0\ntimestamp_gps atual e calcula a dist\u00e2ncia do ponto mais antigo (o first_value na janela) ao ponto atual (posicao_veiculo_geo).\nDividimos essa dist\u00e2ncia pela diferen\u00e7a de tempo entre a timestamp_gps atual e a timestamp_gps do ponto mais\nantigo da janela (o qual recuperamos novamente com o uso de first_value).\nEsta diferen\u00e7a de tempo (datetime_diff) \u00e9 calculada em segundos, portanto multiplicamos o resultado da divis\u00e3o por um fator\n3.6 para que a velocidade esteja em quil\u00f4metros por hora. O resultado final \u00e9 arrendondado sem casas decimais.\nPor fim, cobrimos esse c\u00e1lculo com a fun\u00e7\u00e3o 'if_null' e retornamos zero para a velocidade em casos onde a divis\u00e3o retornaria\num valor nulo.\n2. Ap\u00f3s o calculo da velocidade, definimos a coluna 'status_movimento'. Ve\u00edculos abaixo da 'velocidade_limiar_parado', s\u00e3o\nconsiderados como 'parado'. Caso contr\u00e1rio, s\u00e3o considerados 'andando'\n*/\nwith\n    t_velocidade as (\n    select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        servico,\n        ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, servico\n                order by timestamp_gps)\n        ) distancia,\n        IFNULL(\n            SAFE_DIVIDE(\n                ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, servico\n                order by timestamp_gps)\n                ),\n                DATETIME_DIFF(\n                timestamp_gps,\n                lag(timestamp_gps) over (\n                partition by id_veiculo, servico\n                order by timestamp_gps),\n                SECOND\n                )),\n            0\n        ) * 3.6 velocidade\n    FROM  `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`\n    WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n    \n    ),\n    medias as (\n        select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        servico,\n        distancia,\n        velocidade, # velocidade do pontual\n        AVG(velocidade) OVER (\n            PARTITION BY id_veiculo, servico\n            ORDER BY unix_seconds(timestamp(timestamp_gps))\n            RANGE BETWEEN 600 PRECEDING AND CURRENT ROW\n        ) velocidade_media # velocidade com m\u00e9dia m\u00f3vel\n    from t_velocidade\n    )\nSELECT\n    timestamp_gps,\n    data,\n    id_veiculo,\n    servico,\n    distancia,\n    ROUND(\n        CASE WHEN velocidade_media > 60\n            THEN 60\n            ELSE velocidade_media\n        END,\n        1) as velocidade,\n    -- 2. Determina\u00e7\u00e3o do estado de movimento do ve\u00edculo.\n    case\n        when velocidade_media < 3 then false\n        else true\n    end flag_em_movimento,\n    -- STRUCT( AS versao_maestro,  AS versao_maestro_bq) versao\nFROM medias\n),  __dbt__cte__brt_aux_registros_parada as (\n\n/*\nDescri\u00e7\u00e3o:\nIdentifica ve\u00edculos parados em terminais ou garagens conhecidas.\n1. Selecionamos os terminais conhecidos e uma geometria do tipo pol\u00edgono (Polygon) que cont\u00e9m buracos nas\nlocaliza\u00e7\u00f5es das garagens.\n2. Calculamos as dist\u00e2ncias do ve\u00edculos em rela\u00e7\u00e3o aos terminais conhecidos. Definimos aqui a coluna 'nrow',\nque identifica qual o terminal que est\u00e1 mais pr\u00f3ximo do ponto informado. No passo final, recuperamos apenas\nos dados com nrow = 1 (menor dist\u00e2ncia em rela\u00e7\u00e3o \u00e0 posi\u00e7\u00e3o do ve\u00edculo)\n3. Definimos uma distancia_limiar_parada. Caso o ve\u00edculo esteja a uma dist\u00e2ncia menor que este valor de uma\nparada, ser\u00e1 considerado como parado no terminal com menor distancia.\n4. Caso o veiculo n\u00e3o esteja intersectando o pol\u00edgono das garagens, ele ser\u00e1 considerado como parado dentro\nde uma garagem (o pol\u00edgono \u00e9 vazado nas garagens, a n\u00e3o intersec\u00e7\u00e3o implica em estar dentro de um dos 'buracos').\n*/\nWITH\n  terminais as (\n    -- 1. Selecionamos terminais, criando uma geometria de ponto para cada.\n    select\n      ST_GEOGPOINT(longitude, latitude) ponto_parada, nome_estacao nome_parada, 'terminal' tipo_parada\n    from rj-smtr.br_rj_riodejaneiro_transporte.estacoes_e_terminais_brt\n  ),\n  garagem_polygon AS (\n    -- 1. Selecionamos o pol\u00edgono das garagens.\n    SELECT  ST_GEOGFROMTEXT(WKT,make_valid => true) AS poly\n    FROM rj-smtr.br_rj_riodejaneiro_geo.garagens_polygon\n  ),\n  distancia AS (\n    --2. Calculamos as dist\u00e2ncias e definimos nrow\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      data,\n      servico,\n      posicao_veiculo_geo,\n      nome_parada,\n      tipo_parada,\n      ROUND(ST_DISTANCE(posicao_veiculo_geo, ponto_parada), 1) distancia_parada,\n      ROW_NUMBER() OVER (PARTITION BY timestamp_gps, id_veiculo, servico ORDER BY ST_DISTANCE(posicao_veiculo_geo, ponto_parada)) nrow\n    FROM terminais p\n    JOIN (\n      SELECT *\n      FROM\n        `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`\n      WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n      \n    ) r\n    on 1=1\n  )\nSELECT\n  data,\n  id_veiculo,\n  timestamp_gps,\n  servico,\n  /*\n  3. e 4. Identificamos o status do ve\u00edculo como 'terminal', 'garagem' (para os ve\u00edculos parados) ou\n  'nao_identificado' (para os ve\u00edculos mais distantes de uma parada que o limiar definido)\n  */\n  case\n    when distancia_parada < 250 then tipo_parada\n    when not ST_INTERSECTS(posicao_veiculo_geo, (SELECT  poly FROM garagem_polygon)) then 'garagem'\n    else null\n  end tipo_parada,\nFROM distancia\nWHERE nrow = 1\n),  __dbt__cte__brt_aux_registros_flag_trajeto_correto as (\n\n/*\nDescri\u00e7\u00e3o:\nCalcula se o ve\u00edculo est\u00e1 dentro do trajeto correto dado o tra\u00e7ado (shape) cadastrado no SIGMOB em rela\u00e7\u00e3o \u00e0 linha que est\u00e1 sendo\ntransmitida.\n1. Calcula as intersec\u00e7\u00f5es definindo um 'buffer', utilizado por st_dwithin para identificar se o ponto est\u00e1 \u00e0 uma\ndist\u00e2ncia menor ou igual ao tamanho do buffer em rela\u00e7\u00e3o ao tra\u00e7ado definido no SIGMOB.\n2. Calcula um hist\u00f3rico de intersec\u00e7\u00f5es nos ultimos 10 minutos de registros de cada carro. Definimos que o carro \u00e9\nconsiderado fora do trajeto definido se a cada 10 minutos, ele n\u00e3o esteve dentro do tra\u00e7ado planejado pelo menos uma\nvez.\n3. Identifica se a linha informada no registro capturado existe nas defini\u00e7\u00f5es presentes no SIGMOB.\n4. Definimos em outra tabela uma 'data_versao_efetiva', esse passo serve tanto para definir qual vers\u00e3o do SIGMOB utilizaremos em\ncaso de falha na captura, quanto para definir qual vers\u00e3o ser\u00e1 utilizada para o c\u00e1lculo retroativo do hist\u00f3rico de registros que temos.\n5. Como n\u00e3o conseguimos identificar o itiner\u00e1rio que o carro est\u00e1 realizando, no passo counts, os resultados de\nintersec\u00e7\u00f5es s\u00e3o dobrados, devido ao fato de cada linha apresentar dois itiner\u00e1rios poss\u00edveis (ida/volta). Portanto,\nao final, realizamos uma agrega\u00e7\u00e3o LOGICAL_OR que \u00e9 true caso o carro esteja dentro do tra\u00e7ado de algum dos itiner\u00e1rios\nposs\u00edveis para a linha informada.\n*/\nWITH\n  registros AS (\n    SELECT id_veiculo, servico as linha, latitude, longitude, data, posicao_veiculo_geo, timestamp_gps\n    FROM\n      `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada` r\n    WHERE\n    data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n  ),\n  intersec AS (\n    SELECT\n      r.*,\n      s.data_versao,\n      s.linha_gtfs,\n      s.route_id,\n      -- 1. Buffer e intersec\u00e7\u00f5es\n      CASE\n        WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN TRUE\n        ELSE FALSE\n      END AS flag_trajeto_correto,\n      -- 2. Hist\u00f3rico de intersec\u00e7\u00f5es nos \u00faltimos 10 minutos a partir da timestamp_gps atual\n      CASE\n        WHEN\n          COUNT(CASE WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN 1 END)\n          OVER (PARTITION BY id_veiculo\n                ORDER BY UNIX_SECONDS(TIMESTAMP(timestamp_gps))\n                RANGE BETWEEN 600 PRECEDING AND CURRENT ROW) >= 1\n          THEN True\n        ELSE False\n      END AS flag_trajeto_correto_hist,\n      -- 3. Identifica\u00e7\u00e3o de cadastro da linha no SIGMOB\n      CASE WHEN s.linha_gtfs IS NULL THEN False ELSE True END AS flag_linha_existe_sigmob,\n    -- 4. Join com data_versao_efetiva para defini\u00e7\u00e3o de quais shapes ser\u00e3o considerados no c\u00e1lculo das flags\n    FROM registros r\n    LEFT JOIN (\n      SELECT *\n      FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`\n      WHERE id_modal_smtr in ('20', 'B')\n      AND data_versao = \"2022-06-10\"\n    ) s\n    ON\n      r.linha = s.linha_gtfs\n  )\n    -- 5. Agrega\u00e7\u00e3o com LOGICAL_OR para evitar duplica\u00e7\u00e3o de registros\n    SELECT\n      id_veiculo,\n      linha as servico,\n      linha_gtfs,\n      route_id,\n      data,\n      timestamp_gps,\n      LOGICAL_OR(flag_trajeto_correto) AS flag_trajeto_correto,\n      LOGICAL_OR(flag_trajeto_correto_hist) AS flag_trajeto_correto_hist,\n      LOGICAL_OR(flag_linha_existe_sigmob) AS flag_linha_existe_sigmob,\n      -- STRUCT( AS versao_maestro,\n      --        AS versao_maestro_bq,\n      --       data_versao AS data_versao_sigmob\n      --       ) versao\n    FROM\n      intersec i\n    GROUP BY\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      data_versao,\n      timestamp_gps\n), registros as (\n    -- 1. registros_filtrada\n    SELECT\n        id_veiculo,\n        timestamp_gps,\n        timestamp_captura,\n        velocidade,\n        servico,\n        latitude,\n        longitude,\n    FROM `rj-smtr`.`br_rj_riodejaneiro_brt_gps`.`brt_aux_registros_filtrada`\n    ),\n    velocidades AS (\n    -- 2. velocidades\n    SELECT\n        id_veiculo, timestamp_gps, servico, velocidade, distancia, flag_em_movimento\n    FROM __dbt__cte__brt_aux_registros_velocidade\n    ),\n    paradas as (\n    -- 3. paradas\n    SELECT\n        id_veiculo, timestamp_gps, servico, tipo_parada,\n    FROM __dbt__cte__brt_aux_registros_parada\n    ),\n    flags AS (\n    -- 4. flag_trajeto_correto\n    SELECT\n        id_veiculo,\n        timestamp_gps,\n        servico,\n        route_id,\n        flag_linha_existe_sigmob,\n        flag_trajeto_correto,\n        flag_trajeto_correto_hist\n    FROM __dbt__cte__brt_aux_registros_flag_trajeto_correto\n    )\n-- 5. Jun\u00e7\u00e3o final\nSELECT\n    \"BRT\" modo,\n    r.timestamp_gps,\n    date(r.timestamp_gps) data,\n    extract(time from r.timestamp_gps) hora,\n    r.id_veiculo,\n    replace(r.servico, \" \", \"\") as servico,\n    r.latitude,\n    r.longitude,\n    CASE\n        WHEN\n        flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n        THEN true\n    ELSE false\n    END flag_em_operacao,\n    v.flag_em_movimento,\n    p.tipo_parada,\n    flag_linha_existe_sigmob,\n    flag_trajeto_correto,\n    flag_trajeto_correto_hist,\n    CASE\n        WHEN flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n        THEN 'Em opera\u00e7\u00e3o'\n        WHEN flag_em_movimento is true and flag_trajeto_correto_hist is false\n        THEN 'Operando fora trajeto'\n        WHEN flag_em_movimento is false\n        THEN\n            CASE\n                WHEN tipo_parada is not null\n                THEN concat(\"Parado \", tipo_parada)\n            ELSE\n                CASE\n                    WHEN flag_trajeto_correto_hist is true\n                    THEN 'Parado trajeto correto'\n                ELSE 'Parado fora trajeto'\n                END\n            END\n    END status,\n    r.velocidade velocidade_instantanea,\n    v.velocidade velocidade_estimada_10_min,\n    v.distancia,\n    \"\" as versao\nFROM\n    registros r\n\nJOIN\n    flags f\nON\n    r.id_veiculo = f.id_veiculo\n    AND r.timestamp_gps = f.timestamp_gps\n    AND r.servico = f.servico\n\nJOIN\n    velocidades v\nON\n    r.id_veiculo = v.id_veiculo\n    AND  r.timestamp_gps = v.timestamp_gps\n    AND  r.servico = v.servico\n\nJOIN\n    paradas p\nON\n    r.id_veiculo = p.id_veiculo\n    AND  r.timestamp_gps = p.timestamp_gps\n    AND r.servico = p.servico\n", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_brt_15_minutos`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.400772Z", "completed_at": "2025-02-20T18:15:36.428348Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.430134Z", "completed_at": "2025-02-20T18:15:36.430144Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031975746154785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_sppo", "compiled": true, "compiled_code": "\n/*\nDescri\u00e7\u00e3o:\nJun\u00e7\u00e3o dos passos de tratamento, junta as informa\u00e7\u00f5es extras que definimos a partir dos registros\ncapturados.\nPara descri\u00e7\u00e3o detalhada de como cada coluna \u00e9 calculada, consulte a documenta\u00e7\u00e3o de cada uma das tabelas\nutilizadas abaixo.\n1. registros_filtrada: filtragem e tratamento b\u00e1sico dos dados brutos capturados.\n2. aux_registros_velocidade: estimativa da velocidade de ve\u00edculo a cada ponto registrado e identifica\u00e7\u00e3o\ndo estado de movimento ('parado', 'andando')\n3. aux_registros_parada: identifica ve\u00edculos parados em terminais ou garagens conhecidas\n4. aux_registros_flag_trajeto_correto: calcula intersec\u00e7\u00f5es das posi\u00e7\u00f5es registradas para cada ve\u00edculo\ncom o tra\u00e7ado da linha informada.\n5. As jun\u00e7\u00f5es (joins) s\u00e3o feitas sobre o id_ve\u00edculo e a timestamp_gps.\n*/\nWITH\n   __dbt__cte__sppo_aux_registros_velocidade as (\n\n/*\nDescri\u00e7\u00e3o:\nEstimativa das velocidades dos ve\u00edculos nos \u00faltimos 10 minutos contados a partir da timestamp_gps atual.\nEssa metodologia serve para determinar quais carros est\u00e3o em movimento e quais est\u00e3o parados.\n1. Calculamos a velocidade do ve\u00edculo no \u00faltimo trecho de 10 minutos de opera\u00e7\u00e3o.\nA implementa\u00e7\u00e3o utiliza a fun\u00e7\u00e3o 'first_value' com uma janela (cl\u00e1usula 'over') de at\u00e9 10 minutos anteriores \u00e0\ntimestamp_gps atual e calcula a dist\u00e2ncia do ponto mais antigo (o first_value na janela) ao ponto atual (posicao_veiculo_geo).\nDividimos essa dist\u00e2ncia pela diferen\u00e7a de tempo entre a timestamp_gps atual e a timestamp_gps do ponto mais\nantigo da janela (o qual recuperamos novamente com o uso de first_value).\nEsta diferen\u00e7a de tempo (datetime_diff) \u00e9 calculada em segundos, portanto multiplicamos o resultado da divis\u00e3o por um fator\n3.6 para que a velocidade esteja em quil\u00f4metros por hora. O resultado final \u00e9 arrendondado sem casas decimais.\nPor fim, cobrimos esse c\u00e1lculo com a fun\u00e7\u00e3o 'if_null' e retornamos zero para a velocidade em casos onde a divis\u00e3o retornaria\num valor nulo.\n2. Ap\u00f3s o calculo da velocidade, definimos a coluna 'status_movimento'. Ve\u00edculos abaixo da 'velocidade_limiar_parado', s\u00e3o\nconsiderados como 'parado'. Caso contr\u00e1rio, s\u00e3o considerados 'andando'\n*/\nwith\n    t_velocidade as (\n    select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        linha,\n        ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps)\n        ) distancia,\n        IFNULL(\n            SAFE_DIVIDE(\n                ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps)\n                ),\n                DATETIME_DIFF(\n                timestamp_gps,\n                lag(timestamp_gps) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps),\n                SECOND\n                )),\n            0\n        ) * 3.6 velocidade\n    FROM  `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n    WHERE\n        data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n    medias as (\n        select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        linha,\n        distancia,\n        velocidade, # velocidade do pontual\n        AVG(velocidade) OVER (\n            PARTITION BY id_veiculo, linha\n            ORDER BY unix_seconds(timestamp(timestamp_gps))\n            RANGE BETWEEN 600 PRECEDING AND CURRENT ROW\n        ) velocidade_media # velocidade com m\u00e9dia m\u00f3vel\n    from t_velocidade\n    )\nSELECT\n    timestamp_gps,\n    data,\n    id_veiculo,\n    linha,\n    distancia,\n    ROUND(\n        CASE WHEN velocidade_media > 60\n            THEN 60\n            ELSE velocidade_media\n        END,\n        1) as velocidade,\n    -- 2. Determina\u00e7\u00e3o do estado de movimento do ve\u00edculo.\n    case\n        when velocidade_media < 3 then false\n        else true\n    end flag_em_movimento,\nFROM medias\n),  __dbt__cte__sppo_aux_registros_parada as (\n\n\n/*\nDescri\u00e7\u00e3o:\nIdentifica ve\u00edculos parados em terminais ou garagens conhecidas.\n1. Selecionamos os terminais conhecidos e uma geometria do tipo pol\u00edgono (Polygon) que cont\u00e9m buracos nas\nlocaliza\u00e7\u00f5es das garagens.\n2. Calculamos as dist\u00e2ncias do ve\u00edculos em rela\u00e7\u00e3o aos terminais conhecidos. Definimos aqui a coluna 'nrow',\nque identifica qual o terminal que est\u00e1 mais pr\u00f3ximo do ponto informado. No passo final, recuperamos apenas\nos dados com nrow = 1 (menor dist\u00e2ncia em rela\u00e7\u00e3o \u00e0 posi\u00e7\u00e3o do ve\u00edculo)\n3. Definimos uma distancia_limiar_parada. Caso o ve\u00edculo esteja a uma dist\u00e2ncia menor que este valor de uma\nparada, ser\u00e1 considerado como parado no terminal com menor distancia.\n4. Caso o veiculo n\u00e3o esteja intersectando o pol\u00edgono das garagens, ele ser\u00e1 considerado como parado dentro\nde uma garagem (o pol\u00edgono \u00e9 vazado nas garagens, a n\u00e3o intersec\u00e7\u00e3o implica em estar dentro de um dos 'buracos').\n*/\nWITH\n  terminais as (\n    -- 1. Selecionamos terminais, criando uma geometria de ponto para cada.\n    select\n      ST_GEOGPOINT(longitude, latitude) ponto_parada, nome_terminal nome_parada, 'terminal' tipo_parada\n    from rj-smtr.br_rj_riodejaneiro_transporte.terminais_onibus_coordenadas\n  ),\n  garagem_polygon AS (\n    -- 1. Selecionamos o pol\u00edgono das garagens.\n    SELECT  ST_GEOGFROMTEXT(WKT,make_valid => true) AS poly\n    FROM rj-smtr.br_rj_riodejaneiro_geo.garagens_polygon\n  ),\n  distancia AS (\n    --2. Calculamos as dist\u00e2ncias e definimos nrow\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      data,\n      linha,\n      posicao_veiculo_geo,\n      nome_parada,\n      tipo_parada,\n      ROUND(ST_DISTANCE(posicao_veiculo_geo, ponto_parada), 1) distancia_parada,\n      ROW_NUMBER() OVER (PARTITION BY timestamp_gps, id_veiculo, linha ORDER BY ST_DISTANCE(posicao_veiculo_geo, ponto_parada)) nrow\n    FROM terminais p\n    JOIN (\n      SELECT\n        id_veiculo,\n        timestamp_gps,\n        data,\n        linha,\n        posicao_veiculo_geo\n      FROM\n        `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n      \n      WHERE\n        data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n      \n  ) r\n    on 1=1\n  )\nSELECT\n  data,\n  id_veiculo,\n  timestamp_gps,\n  linha,\n  /*\n  3. e 4. Identificamos o status do ve\u00edculo como 'terminal', 'garagem' (para os ve\u00edculos parados) ou\n  null (para os ve\u00edculos mais distantes de uma parada que o limiar definido)\n  */\n  case\n    when distancia_parada < 250 then tipo_parada\n    when not ST_INTERSECTS(posicao_veiculo_geo, (SELECT  poly FROM garagem_polygon)) then 'garagem'\n    else null\n  end tipo_parada,\nFROM distancia\nWHERE nrow = 1\n),  __dbt__cte__sppo_aux_registros_flag_trajeto_correto as (\n\n\n/*\nDescri\u00e7\u00e3o:\nCalcula se o ve\u00edculo est\u00e1 dentro do trajeto correto dado o tra\u00e7ado (shape) cadastrado no SIGMOB em rela\u00e7\u00e3o \u00e0 linha que est\u00e1 sendo\ntransmitida.\n1. Calcula as intersec\u00e7\u00f5es definindo um 'buffer', utilizado por st_dwithin para identificar se o ponto est\u00e1 \u00e0 uma\ndist\u00e2ncia menor ou igual ao tamanho do buffer em rela\u00e7\u00e3o ao tra\u00e7ado definido no SIGMOB.\n2. Calcula um hist\u00f3rico de intersec\u00e7\u00f5es nos ultimos 10 minutos de registros de cada carro. Definimos que o carro \u00e9\nconsiderado fora do trajeto definido se a cada 10 minutos, ele n\u00e3o esteve dentro do tra\u00e7ado planejado pelo menos uma\nvez.\n3. Identifica se a linha informada no registro capturado existe nas defini\u00e7\u00f5es presentes no SIGMOB.\n4. Definimos em outra tabela uma 'data_versao_efetiva', esse passo serve tanto para definir qual vers\u00e3o do SIGMOB utilizaremos em\ncaso de falha na captura, quanto para definir qual vers\u00e3o ser\u00e1 utilizada para o c\u00e1lculo retroativo do hist\u00f3rico de registros que temos.\n5. Como n\u00e3o conseguimos identificar o itiner\u00e1rio que o carro est\u00e1 realizando, no passo counts, os resultados de\nintersec\u00e7\u00f5es s\u00e3o dobrados, devido ao fato de cada linha apresentar dois itiner\u00e1rios poss\u00edveis (ida/volta). Portanto,\nao final, realizamos uma agrega\u00e7\u00e3o LOGICAL_OR que \u00e9 true caso o carro esteja dentro do tra\u00e7ado de algum dos itiner\u00e1rios\nposs\u00edveis para a linha informada.\n*/\nWITH\n  registros AS (\n    SELECT\n      id_veiculo,\n      linha,\n      latitude,\n      longitude,\n      data,\n      posicao_veiculo_geo,\n      timestamp_gps\n    FROM\n      `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada` r\n    WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n  intersec AS (\n    SELECT\n      r.*,\n      s.data_versao,\n      s.linha_gtfs,\n      s.route_id,\n      -- 1. Buffer e intersec\u00e7\u00f5es\n      CASE\n        WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN TRUE\n        ELSE FALSE\n      END AS flag_trajeto_correto,\n      -- 2. Hist\u00f3rico de intersec\u00e7\u00f5es nos \u00faltimos 10 minutos a partir da timestamp_gps atual\n      CASE\n        WHEN\n          COUNT(CASE WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN 1 END)\n          OVER (PARTITION BY id_veiculo\n                ORDER BY UNIX_SECONDS(TIMESTAMP(timestamp_gps))\n                RANGE BETWEEN 600 PRECEDING AND CURRENT ROW) >= 1\n          THEN True\n        ELSE False\n      END AS flag_trajeto_correto_hist,\n      -- 3. Identifica\u00e7\u00e3o de cadastro da linha no SIGMOB\n      CASE WHEN s.linha_gtfs IS NULL THEN False ELSE True END AS flag_linha_existe_sigmob,\n    -- 4. Join com data_versao_efetiva para defini\u00e7\u00e3o de quais shapes ser\u00e3o considerados no c\u00e1lculo das flags\n    FROM registros r\n    LEFT JOIN (\n      SELECT *\n      FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`\n      WHERE id_modal_smtr in ('22', '23', 'O')\n      AND data_versao = \"2022-06-10\"\n    ) s\n    ON\n      r.linha = s.linha_gtfs\n  )\n    -- 5. Agrega\u00e7\u00e3o com LOGICAL_OR para evitar duplica\u00e7\u00e3o de registros\n    SELECT\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      timestamp_gps,\n      LOGICAL_OR(flag_trajeto_correto) AS flag_trajeto_correto,\n      LOGICAL_OR(flag_trajeto_correto_hist) AS flag_trajeto_correto_hist,\n      LOGICAL_OR(flag_linha_existe_sigmob) AS flag_linha_existe_sigmob,\n    FROM intersec i\n    GROUP BY\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      data_versao,\n      timestamp_gps\n), registros as (\n  -- 1. registros_filtrada\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      timestamp_captura,\n      velocidade,\n      linha,\n      latitude,\n      longitude,\n    FROM `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n    WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n  velocidades AS (\n    -- 2. velocidades\n    SELECT\n      id_veiculo, timestamp_gps, linha, velocidade, distancia, flag_em_movimento\n    FROM\n      __dbt__cte__sppo_aux_registros_velocidade\n  ),\n  paradas as (\n    -- 3. paradas\n    SELECT\n      id_veiculo, timestamp_gps, linha, tipo_parada,\n    FROM __dbt__cte__sppo_aux_registros_parada\n  ),\n  flags AS (\n    -- 4. flag_trajeto_correto\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      linha,\n      route_id,\n      flag_linha_existe_sigmob,\n      flag_trajeto_correto,\n      flag_trajeto_correto_hist\n    FROM\n      __dbt__cte__sppo_aux_registros_flag_trajeto_correto\n  )\n-- 5. Jun\u00e7\u00e3o final\nSELECT\n  \"SPPO\" modo,\n  r.timestamp_gps,\n  date(r.timestamp_gps) data,\n  extract(time from r.timestamp_gps) hora,\n  r.id_veiculo,\n  r.linha as servico,\n  r.latitude,\n  r.longitude,\n  CASE\n    WHEN\n      flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n      THEN true\n  ELSE false\n  END flag_em_operacao,\n  v.flag_em_movimento,\n  p.tipo_parada,\n  flag_linha_existe_sigmob,\n  flag_trajeto_correto,\n  flag_trajeto_correto_hist,\n  CASE\n    WHEN flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n    THEN 'Em opera\u00e7\u00e3o'\n    WHEN flag_em_movimento is true and flag_trajeto_correto_hist is false\n    THEN 'Operando fora trajeto'\n    WHEN flag_em_movimento is false\n    THEN\n        CASE\n            WHEN tipo_parada is not null\n            THEN concat(\"Parado \", tipo_parada)\n        ELSE\n            CASE\n                WHEN flag_trajeto_correto_hist is true\n                THEN 'Parado trajeto correto'\n            ELSE 'Parado fora trajeto'\n            END\n        END\n    END status,\n  r.velocidade velocidade_instantanea,\n  v.velocidade velocidade_estimada_10_min,\n  v.distancia,\n  \"\" as versao\nFROM\n  registros r\n\nJOIN\n  flags f\nON\n  r.id_veiculo = f.id_veiculo\n  AND r.timestamp_gps = f.timestamp_gps\n  AND r.linha = f.linha\n\nJOIN\n  velocidades v\nON\n  r.id_veiculo = v.id_veiculo\n  AND  r.timestamp_gps = v.timestamp_gps\n  AND  r.linha = v.linha\n\nJOIN\n  paradas p\nON\n  r.id_veiculo = p.id_veiculo\n  AND  r.timestamp_gps = p.timestamp_gps\n  AND r.linha = p.linha\nWHERE\n  date(r.timestamp_gps) between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n  AND r.timestamp_gps > \"2022-01-01T00:00:00\" and r.timestamp_gps <=\"2022-01-01T01:00:00\"", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.434059Z", "completed_at": "2025-02-20T18:15:36.466122Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.467484Z", "completed_at": "2025-02-20T18:15:36.467493Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035910606384277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_sppo_15_minutos", "compiled": true, "compiled_code": "\n/*\nDescri\u00e7\u00e3o:\nJun\u00e7\u00e3o dos passos de tratamento, junta as informa\u00e7\u00f5es extras que definimos a partir dos registros\ncapturados.\nPara descri\u00e7\u00e3o detalhada de como cada coluna \u00e9 calculada, consulte a documenta\u00e7\u00e3o de cada uma das tabelas\nutilizadas abaixo.\n1. registros_filtrada: filtragem e tratamento b\u00e1sico dos dados brutos capturados.\n2. aux_registros_velocidade: estimativa da velocidade de ve\u00edculo a cada ponto registrado e identifica\u00e7\u00e3o\ndo estado de movimento ('parado', 'andando')\n3. aux_registros_parada: identifica ve\u00edculos parados em terminais ou garagens conhecidas\n4. aux_registros_flag_trajeto_correto: calcula intersec\u00e7\u00f5es das posi\u00e7\u00f5es registradas para cada ve\u00edculo\ncom o tra\u00e7ado da linha informada.\n5. As jun\u00e7\u00f5es (joins) s\u00e3o feitas sobre o id_ve\u00edculo e a timestamp_gps.\n*/\nWITH\n   __dbt__cte__sppo_aux_registros_velocidade as (\n\n/*\nDescri\u00e7\u00e3o:\nEstimativa das velocidades dos ve\u00edculos nos \u00faltimos 10 minutos contados a partir da timestamp_gps atual.\nEssa metodologia serve para determinar quais carros est\u00e3o em movimento e quais est\u00e3o parados.\n1. Calculamos a velocidade do ve\u00edculo no \u00faltimo trecho de 10 minutos de opera\u00e7\u00e3o.\nA implementa\u00e7\u00e3o utiliza a fun\u00e7\u00e3o 'first_value' com uma janela (cl\u00e1usula 'over') de at\u00e9 10 minutos anteriores \u00e0\ntimestamp_gps atual e calcula a dist\u00e2ncia do ponto mais antigo (o first_value na janela) ao ponto atual (posicao_veiculo_geo).\nDividimos essa dist\u00e2ncia pela diferen\u00e7a de tempo entre a timestamp_gps atual e a timestamp_gps do ponto mais\nantigo da janela (o qual recuperamos novamente com o uso de first_value).\nEsta diferen\u00e7a de tempo (datetime_diff) \u00e9 calculada em segundos, portanto multiplicamos o resultado da divis\u00e3o por um fator\n3.6 para que a velocidade esteja em quil\u00f4metros por hora. O resultado final \u00e9 arrendondado sem casas decimais.\nPor fim, cobrimos esse c\u00e1lculo com a fun\u00e7\u00e3o 'if_null' e retornamos zero para a velocidade em casos onde a divis\u00e3o retornaria\num valor nulo.\n2. Ap\u00f3s o calculo da velocidade, definimos a coluna 'status_movimento'. Ve\u00edculos abaixo da 'velocidade_limiar_parado', s\u00e3o\nconsiderados como 'parado'. Caso contr\u00e1rio, s\u00e3o considerados 'andando'\n*/\nwith\n    t_velocidade as (\n    select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        linha,\n        ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps)\n        ) distancia,\n        IFNULL(\n            SAFE_DIVIDE(\n                ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps)\n                ),\n                DATETIME_DIFF(\n                timestamp_gps,\n                lag(timestamp_gps) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps),\n                SECOND\n                )),\n            0\n        ) * 3.6 velocidade\n    FROM  `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n    WHERE\n        data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n    medias as (\n        select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        linha,\n        distancia,\n        velocidade, # velocidade do pontual\n        AVG(velocidade) OVER (\n            PARTITION BY id_veiculo, linha\n            ORDER BY unix_seconds(timestamp(timestamp_gps))\n            RANGE BETWEEN 600 PRECEDING AND CURRENT ROW\n        ) velocidade_media # velocidade com m\u00e9dia m\u00f3vel\n    from t_velocidade\n    )\nSELECT\n    timestamp_gps,\n    data,\n    id_veiculo,\n    linha,\n    distancia,\n    ROUND(\n        CASE WHEN velocidade_media > 60\n            THEN 60\n            ELSE velocidade_media\n        END,\n        1) as velocidade,\n    -- 2. Determina\u00e7\u00e3o do estado de movimento do ve\u00edculo.\n    case\n        when velocidade_media < 3 then false\n        else true\n    end flag_em_movimento,\nFROM medias\n),  __dbt__cte__sppo_aux_registros_parada as (\n\n\n/*\nDescri\u00e7\u00e3o:\nIdentifica ve\u00edculos parados em terminais ou garagens conhecidas.\n1. Selecionamos os terminais conhecidos e uma geometria do tipo pol\u00edgono (Polygon) que cont\u00e9m buracos nas\nlocaliza\u00e7\u00f5es das garagens.\n2. Calculamos as dist\u00e2ncias do ve\u00edculos em rela\u00e7\u00e3o aos terminais conhecidos. Definimos aqui a coluna 'nrow',\nque identifica qual o terminal que est\u00e1 mais pr\u00f3ximo do ponto informado. No passo final, recuperamos apenas\nos dados com nrow = 1 (menor dist\u00e2ncia em rela\u00e7\u00e3o \u00e0 posi\u00e7\u00e3o do ve\u00edculo)\n3. Definimos uma distancia_limiar_parada. Caso o ve\u00edculo esteja a uma dist\u00e2ncia menor que este valor de uma\nparada, ser\u00e1 considerado como parado no terminal com menor distancia.\n4. Caso o veiculo n\u00e3o esteja intersectando o pol\u00edgono das garagens, ele ser\u00e1 considerado como parado dentro\nde uma garagem (o pol\u00edgono \u00e9 vazado nas garagens, a n\u00e3o intersec\u00e7\u00e3o implica em estar dentro de um dos 'buracos').\n*/\nWITH\n  terminais as (\n    -- 1. Selecionamos terminais, criando uma geometria de ponto para cada.\n    select\n      ST_GEOGPOINT(longitude, latitude) ponto_parada, nome_terminal nome_parada, 'terminal' tipo_parada\n    from rj-smtr.br_rj_riodejaneiro_transporte.terminais_onibus_coordenadas\n  ),\n  garagem_polygon AS (\n    -- 1. Selecionamos o pol\u00edgono das garagens.\n    SELECT  ST_GEOGFROMTEXT(WKT,make_valid => true) AS poly\n    FROM rj-smtr.br_rj_riodejaneiro_geo.garagens_polygon\n  ),\n  distancia AS (\n    --2. Calculamos as dist\u00e2ncias e definimos nrow\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      data,\n      linha,\n      posicao_veiculo_geo,\n      nome_parada,\n      tipo_parada,\n      ROUND(ST_DISTANCE(posicao_veiculo_geo, ponto_parada), 1) distancia_parada,\n      ROW_NUMBER() OVER (PARTITION BY timestamp_gps, id_veiculo, linha ORDER BY ST_DISTANCE(posicao_veiculo_geo, ponto_parada)) nrow\n    FROM terminais p\n    JOIN (\n      SELECT\n        id_veiculo,\n        timestamp_gps,\n        data,\n        linha,\n        posicao_veiculo_geo\n      FROM\n        `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n      \n      WHERE\n        data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n      \n  ) r\n    on 1=1\n  )\nSELECT\n  data,\n  id_veiculo,\n  timestamp_gps,\n  linha,\n  /*\n  3. e 4. Identificamos o status do ve\u00edculo como 'terminal', 'garagem' (para os ve\u00edculos parados) ou\n  null (para os ve\u00edculos mais distantes de uma parada que o limiar definido)\n  */\n  case\n    when distancia_parada < 250 then tipo_parada\n    when not ST_INTERSECTS(posicao_veiculo_geo, (SELECT  poly FROM garagem_polygon)) then 'garagem'\n    else null\n  end tipo_parada,\nFROM distancia\nWHERE nrow = 1\n),  __dbt__cte__sppo_aux_registros_flag_trajeto_correto as (\n\n\n/*\nDescri\u00e7\u00e3o:\nCalcula se o ve\u00edculo est\u00e1 dentro do trajeto correto dado o tra\u00e7ado (shape) cadastrado no SIGMOB em rela\u00e7\u00e3o \u00e0 linha que est\u00e1 sendo\ntransmitida.\n1. Calcula as intersec\u00e7\u00f5es definindo um 'buffer', utilizado por st_dwithin para identificar se o ponto est\u00e1 \u00e0 uma\ndist\u00e2ncia menor ou igual ao tamanho do buffer em rela\u00e7\u00e3o ao tra\u00e7ado definido no SIGMOB.\n2. Calcula um hist\u00f3rico de intersec\u00e7\u00f5es nos ultimos 10 minutos de registros de cada carro. Definimos que o carro \u00e9\nconsiderado fora do trajeto definido se a cada 10 minutos, ele n\u00e3o esteve dentro do tra\u00e7ado planejado pelo menos uma\nvez.\n3. Identifica se a linha informada no registro capturado existe nas defini\u00e7\u00f5es presentes no SIGMOB.\n4. Definimos em outra tabela uma 'data_versao_efetiva', esse passo serve tanto para definir qual vers\u00e3o do SIGMOB utilizaremos em\ncaso de falha na captura, quanto para definir qual vers\u00e3o ser\u00e1 utilizada para o c\u00e1lculo retroativo do hist\u00f3rico de registros que temos.\n5. Como n\u00e3o conseguimos identificar o itiner\u00e1rio que o carro est\u00e1 realizando, no passo counts, os resultados de\nintersec\u00e7\u00f5es s\u00e3o dobrados, devido ao fato de cada linha apresentar dois itiner\u00e1rios poss\u00edveis (ida/volta). Portanto,\nao final, realizamos uma agrega\u00e7\u00e3o LOGICAL_OR que \u00e9 true caso o carro esteja dentro do tra\u00e7ado de algum dos itiner\u00e1rios\nposs\u00edveis para a linha informada.\n*/\nWITH\n  registros AS (\n    SELECT\n      id_veiculo,\n      linha,\n      latitude,\n      longitude,\n      data,\n      posicao_veiculo_geo,\n      timestamp_gps\n    FROM\n      `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada` r\n    WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n  intersec AS (\n    SELECT\n      r.*,\n      s.data_versao,\n      s.linha_gtfs,\n      s.route_id,\n      -- 1. Buffer e intersec\u00e7\u00f5es\n      CASE\n        WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN TRUE\n        ELSE FALSE\n      END AS flag_trajeto_correto,\n      -- 2. Hist\u00f3rico de intersec\u00e7\u00f5es nos \u00faltimos 10 minutos a partir da timestamp_gps atual\n      CASE\n        WHEN\n          COUNT(CASE WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN 1 END)\n          OVER (PARTITION BY id_veiculo\n                ORDER BY UNIX_SECONDS(TIMESTAMP(timestamp_gps))\n                RANGE BETWEEN 600 PRECEDING AND CURRENT ROW) >= 1\n          THEN True\n        ELSE False\n      END AS flag_trajeto_correto_hist,\n      -- 3. Identifica\u00e7\u00e3o de cadastro da linha no SIGMOB\n      CASE WHEN s.linha_gtfs IS NULL THEN False ELSE True END AS flag_linha_existe_sigmob,\n    -- 4. Join com data_versao_efetiva para defini\u00e7\u00e3o de quais shapes ser\u00e3o considerados no c\u00e1lculo das flags\n    FROM registros r\n    LEFT JOIN (\n      SELECT *\n      FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`\n      WHERE id_modal_smtr in ('22', '23', 'O')\n      AND data_versao = \"2022-06-10\"\n    ) s\n    ON\n      r.linha = s.linha_gtfs\n  )\n    -- 5. Agrega\u00e7\u00e3o com LOGICAL_OR para evitar duplica\u00e7\u00e3o de registros\n    SELECT\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      timestamp_gps,\n      LOGICAL_OR(flag_trajeto_correto) AS flag_trajeto_correto,\n      LOGICAL_OR(flag_trajeto_correto_hist) AS flag_trajeto_correto_hist,\n      LOGICAL_OR(flag_linha_existe_sigmob) AS flag_linha_existe_sigmob,\n    FROM intersec i\n    GROUP BY\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      data_versao,\n      timestamp_gps\n), registros as (\n  -- 1. registros_filtrada\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      timestamp_captura,\n      velocidade,\n      linha,\n      latitude,\n      longitude,\n    FROM `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n    WHERE\n      data = DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > DATETIME_SUB(\"2022-01-01T01:00:00\", INTERVAL 75 MINUTE)\n      AND timestamp_gps <= \"2022-01-01T01:00:00\"\n  ),\n  velocidades AS (\n    -- 2. velocidades\n    SELECT\n      id_veiculo, timestamp_gps, linha, velocidade, distancia, flag_em_movimento\n    FROM\n      __dbt__cte__sppo_aux_registros_velocidade\n  ),\n  paradas as (\n    -- 3. paradas\n    SELECT\n      id_veiculo, timestamp_gps, linha, tipo_parada,\n    FROM __dbt__cte__sppo_aux_registros_parada\n  ),\n  flags AS (\n    -- 4. flag_trajeto_correto\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      linha,\n      route_id,\n      flag_linha_existe_sigmob,\n      flag_trajeto_correto,\n      flag_trajeto_correto_hist\n    FROM\n      __dbt__cte__sppo_aux_registros_flag_trajeto_correto\n  )\n-- 5. Jun\u00e7\u00e3o final\nSELECT\n  \"SPPO\" modo,\n  r.timestamp_gps,\n  date(r.timestamp_gps) data,\n  extract(time from r.timestamp_gps) hora,\n  r.id_veiculo,\n  r.linha as servico,\n  r.latitude,\n  r.longitude,\n  CASE\n    WHEN\n      flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n      THEN true\n  ELSE false\n  END flag_em_operacao,\n  v.flag_em_movimento,\n  p.tipo_parada,\n  flag_linha_existe_sigmob,\n  flag_trajeto_correto,\n  flag_trajeto_correto_hist,\n  CASE\n    WHEN flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n    THEN 'Em opera\u00e7\u00e3o'\n    WHEN flag_em_movimento is true and flag_trajeto_correto_hist is false\n    THEN 'Operando fora trajeto'\n    WHEN flag_em_movimento is false\n    THEN\n        CASE\n            WHEN tipo_parada is not null\n            THEN concat(\"Parado \", tipo_parada)\n        ELSE\n            CASE\n                WHEN flag_trajeto_correto_hist is true\n                THEN 'Parado trajeto correto'\n            ELSE 'Parado fora trajeto'\n            END\n        END\n    END status,\n  r.velocidade velocidade_instantanea,\n  v.velocidade velocidade_estimada_10_min,\n  v.distancia,\n  \"\" as versao\nFROM\n  registros r\n\nJOIN\n  flags f\nON\n  r.id_veiculo = f.id_veiculo\n  AND r.timestamp_gps = f.timestamp_gps\n  AND r.linha = f.linha\n\nJOIN\n  velocidades v\nON\n  r.id_veiculo = v.id_veiculo\n  AND  r.timestamp_gps = v.timestamp_gps\n  AND  r.linha = v.linha\n\nJOIN\n  paradas p\nON\n  r.id_veiculo = p.id_veiculo\n  AND  r.timestamp_gps = p.timestamp_gps\n  AND r.linha = p.linha\nWHERE\n  DATE(r.timestamp_gps) = DATE(\"2022-01-01T01:00:00\")\n  AND r.timestamp_gps > DATETIME_SUB(\"2022-01-01T01:00:00\", INTERVAL 75 MINUTE)\n  AND r.timestamp_gps <= \"2022-01-01T01:00:00\"", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo_15_minutos`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.473062Z", "completed_at": "2025-02-20T18:15:36.504558Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.505917Z", "completed_at": "2025-02-20T18:15:36.505927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03645586967468262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_sppo_zirix", "compiled": true, "compiled_code": "\n/*\nDescri\u00e7\u00e3o:\nJun\u00e7\u00e3o dos passos de tratamento, junta as informa\u00e7\u00f5es extras que definimos a partir dos registros\ncapturados.\nPara descri\u00e7\u00e3o detalhada de como cada coluna \u00e9 calculada, consulte a documenta\u00e7\u00e3o de cada uma das tabelas\nutilizadas abaixo.\n1. registros_filtrada: filtragem e tratamento b\u00e1sico dos dados brutos capturados.\n2. aux_registros_velocidade: estimativa da velocidade de ve\u00edculo a cada ponto registrado e identifica\u00e7\u00e3o\ndo estado de movimento ('parado', 'andando')\n3. aux_registros_parada: identifica ve\u00edculos parados em terminais ou garagens conhecidas\n4. aux_registros_flag_trajeto_correto: calcula intersec\u00e7\u00f5es das posi\u00e7\u00f5es registradas para cada ve\u00edculo\ncom o tra\u00e7ado da linha informada.\n5. As jun\u00e7\u00f5es (joins) s\u00e3o feitas sobre o id_ve\u00edculo e a timestamp_gps.\n*/\nWITH\n   __dbt__cte__sppo_aux_registros_velocidade_zirix as (\n\n/*\nDescri\u00e7\u00e3o:\nEstimativa das velocidades dos ve\u00edculos nos \u00faltimos 10 minutos contados a partir da timestamp_gps atual.\nEssa metodologia serve para determinar quais carros est\u00e3o em movimento e quais est\u00e3o parados.\n1. Calculamos a velocidade do ve\u00edculo no \u00faltimo trecho de 10 minutos de opera\u00e7\u00e3o.\nA implementa\u00e7\u00e3o utiliza a fun\u00e7\u00e3o 'first_value' com uma janela (cl\u00e1usula 'over') de at\u00e9 10 minutos anteriores \u00e0\ntimestamp_gps atual e calcula a dist\u00e2ncia do ponto mais antigo (o first_value na janela) ao ponto atual (posicao_veiculo_geo).\nDividimos essa dist\u00e2ncia pela diferen\u00e7a de tempo entre a timestamp_gps atual e a timestamp_gps do ponto mais\nantigo da janela (o qual recuperamos novamente com o uso de first_value).\nEsta diferen\u00e7a de tempo (datetime_diff) \u00e9 calculada em segundos, portanto multiplicamos o resultado da divis\u00e3o por um fator\n3.6 para que a velocidade esteja em quil\u00f4metros por hora. O resultado final \u00e9 arrendondado sem casas decimais.\nPor fim, cobrimos esse c\u00e1lculo com a fun\u00e7\u00e3o 'if_null' e retornamos zero para a velocidade em casos onde a divis\u00e3o retornaria\num valor nulo.\n2. Ap\u00f3s o calculo da velocidade, definimos a coluna 'status_movimento'. Ve\u00edculos abaixo da 'velocidade_limiar_parado', s\u00e3o\nconsiderados como 'parado'. Caso contr\u00e1rio, s\u00e3o considerados 'andando'\n*/\nwith\n    t_velocidade as (\n    select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        linha,\n        ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps)\n        ) distancia,\n        IFNULL(\n            SAFE_DIVIDE(\n                ST_DISTANCE(\n                posicao_veiculo_geo,\n                lag(posicao_veiculo_geo) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps)\n                ),\n                DATETIME_DIFF(\n                timestamp_gps,\n                lag(timestamp_gps) over (\n                partition by id_veiculo, linha\n                order by timestamp_gps),\n                SECOND\n                )),\n            0\n        ) * 3.6 velocidade\n    FROM  `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registro_filtrada`\n    WHERE\n        data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n    medias as (\n        select\n        data,\n        id_veiculo,\n        timestamp_gps,\n        linha,\n        distancia,\n        velocidade, # velocidade do pontual\n        AVG(velocidade) OVER (\n            PARTITION BY id_veiculo, linha\n            ORDER BY unix_seconds(timestamp(timestamp_gps))\n            RANGE BETWEEN 600 PRECEDING AND CURRENT ROW\n        ) velocidade_media # velocidade com m\u00e9dia m\u00f3vel\n    from t_velocidade\n    )\nSELECT\n    timestamp_gps,\n    data,\n    id_veiculo,\n    linha,\n    distancia,\n    ROUND(\n        CASE WHEN velocidade_media > 60\n            THEN 60\n            ELSE velocidade_media\n        END,\n        1) as velocidade,\n    -- 2. Determina\u00e7\u00e3o do estado de movimento do ve\u00edculo.\n    case\n        when velocidade_media < 3 then false\n        else true\n    end flag_em_movimento,\nFROM medias\n),  __dbt__cte__sppo_aux_registros_parada_zirix as (\n\n\n/*\nDescri\u00e7\u00e3o:\nIdentifica ve\u00edculos parados em terminais ou garagens conhecidas.\n1. Selecionamos os terminais conhecidos e uma geometria do tipo pol\u00edgono (Polygon) que cont\u00e9m buracos nas\nlocaliza\u00e7\u00f5es das garagens.\n2. Calculamos as dist\u00e2ncias do ve\u00edculos em rela\u00e7\u00e3o aos terminais conhecidos. Definimos aqui a coluna 'nrow',\nque identifica qual o terminal que est\u00e1 mais pr\u00f3ximo do ponto informado. No passo final, recuperamos apenas\nos dados com nrow = 1 (menor dist\u00e2ncia em rela\u00e7\u00e3o \u00e0 posi\u00e7\u00e3o do ve\u00edculo)\n3. Definimos uma distancia_limiar_parada. Caso o ve\u00edculo esteja a uma dist\u00e2ncia menor que este valor de uma\nparada, ser\u00e1 considerado como parado no terminal com menor distancia.\n4. Caso o veiculo n\u00e3o esteja intersectando o pol\u00edgono das garagens, ele ser\u00e1 considerado como parado dentro\nde uma garagem (o pol\u00edgono \u00e9 vazado nas garagens, a n\u00e3o intersec\u00e7\u00e3o implica em estar dentro de um dos 'buracos').\n*/\nWITH\n  terminais as (\n    -- 1. Selecionamos terminais, criando uma geometria de ponto para cada.\n    select\n      ST_GEOGPOINT(longitude, latitude) ponto_parada, nome_terminal nome_parada, 'terminal' tipo_parada\n    from rj-smtr.br_rj_riodejaneiro_transporte.terminais_onibus_coordenadas\n  ),\n  garagem_polygon AS (\n    -- 1. Selecionamos o pol\u00edgono das garagens.\n    SELECT  ST_GEOGFROMTEXT(WKT,make_valid => true) AS poly\n    FROM rj-smtr.br_rj_riodejaneiro_geo.garagens_polygon\n  ),\n  distancia AS (\n    --2. Calculamos as dist\u00e2ncias e definimos nrow\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      data,\n      linha,\n      posicao_veiculo_geo,\n      nome_parada,\n      tipo_parada,\n      ROUND(ST_DISTANCE(posicao_veiculo_geo, ponto_parada), 1) distancia_parada,\n      ROW_NUMBER() OVER (PARTITION BY timestamp_gps, id_veiculo, linha ORDER BY ST_DISTANCE(posicao_veiculo_geo, ponto_parada)) nrow\n    FROM terminais p\n    JOIN (\n      SELECT\n        id_veiculo,\n        timestamp_gps,\n        data,\n        linha,\n        posicao_veiculo_geo\n      FROM\n        `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registro_filtrada`\n      \n      WHERE\n        data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"\n      \n  ) r\n    on 1=1\n  )\nSELECT\n  data,\n  id_veiculo,\n  timestamp_gps,\n  linha,\n  /*\n  3. e 4. Identificamos o status do ve\u00edculo como 'terminal', 'garagem' (para os ve\u00edculos parados) ou\n  null (para os ve\u00edculos mais distantes de uma parada que o limiar definido)\n  */\n  case\n    when distancia_parada < 250 then tipo_parada\n    when not ST_INTERSECTS(posicao_veiculo_geo, (SELECT  poly FROM garagem_polygon)) then 'garagem'\n    else null\n  end tipo_parada,\nFROM distancia\nWHERE nrow = 1\n),  __dbt__cte__sppo_aux_registros_flag_trajeto_correto_zirix as (\n\n\n/*\nDescri\u00e7\u00e3o:\nCalcula se o ve\u00edculo est\u00e1 dentro do trajeto correto dado o tra\u00e7ado (shape) cadastrado no SIGMOB em rela\u00e7\u00e3o \u00e0 linha que est\u00e1 sendo\ntransmitida.\n1. Calcula as intersec\u00e7\u00f5es definindo um 'buffer', utilizado por st_dwithin para identificar se o ponto est\u00e1 \u00e0 uma\ndist\u00e2ncia menor ou igual ao tamanho do buffer em rela\u00e7\u00e3o ao tra\u00e7ado definido no SIGMOB.\n2. Calcula um hist\u00f3rico de intersec\u00e7\u00f5es nos ultimos 10 minutos de registros de cada carro. Definimos que o carro \u00e9\nconsiderado fora do trajeto definido se a cada 10 minutos, ele n\u00e3o esteve dentro do tra\u00e7ado planejado pelo menos uma\nvez.\n3. Identifica se a linha informada no registro capturado existe nas defini\u00e7\u00f5es presentes no SIGMOB.\n4. Definimos em outra tabela uma 'data_versao_efetiva', esse passo serve tanto para definir qual vers\u00e3o do SIGMOB utilizaremos em\ncaso de falha na captura, quanto para definir qual vers\u00e3o ser\u00e1 utilizada para o c\u00e1lculo retroativo do hist\u00f3rico de registros que temos.\n5. Como n\u00e3o conseguimos identificar o itiner\u00e1rio que o carro est\u00e1 realizando, no passo counts, os resultados de\nintersec\u00e7\u00f5es s\u00e3o dobrados, devido ao fato de cada linha apresentar dois itiner\u00e1rios poss\u00edveis (ida/volta). Portanto,\nao final, realizamos uma agrega\u00e7\u00e3o LOGICAL_OR que \u00e9 true caso o carro esteja dentro do tra\u00e7ado de algum dos itiner\u00e1rios\nposs\u00edveis para a linha informada.\n*/\nWITH\n  registros AS (\n    SELECT\n      id_veiculo,\n      linha,\n      latitude,\n      longitude,\n      data,\n      posicao_veiculo_geo,\n      timestamp_gps\n    FROM\n      `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registro_filtrada` r\n    WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n    AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n  intersec AS (\n    SELECT\n      r.*,\n      s.data_versao,\n      s.linha_gtfs,\n      s.route_id,\n      -- 1. Buffer e intersec\u00e7\u00f5es\n      CASE\n        WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN TRUE\n        ELSE FALSE\n      END AS flag_trajeto_correto,\n      -- 2. Hist\u00f3rico de intersec\u00e7\u00f5es nos \u00faltimos 10 minutos a partir da timestamp_gps atual\n      CASE\n        WHEN\n          COUNT(CASE WHEN st_dwithin(shape, posicao_veiculo_geo, 500) THEN 1 END)\n          OVER (PARTITION BY id_veiculo\n                ORDER BY UNIX_SECONDS(TIMESTAMP(timestamp_gps))\n                RANGE BETWEEN 600 PRECEDING AND CURRENT ROW) >= 1\n          THEN True\n        ELSE False\n      END AS flag_trajeto_correto_hist,\n      -- 3. Identifica\u00e7\u00e3o de cadastro da linha no SIGMOB\n      CASE WHEN s.linha_gtfs IS NULL THEN False ELSE True END AS flag_linha_existe_sigmob,\n    -- 4. Join com data_versao_efetiva para defini\u00e7\u00e3o de quais shapes ser\u00e3o considerados no c\u00e1lculo das flags\n    FROM registros r\n    LEFT JOIN (\n      SELECT *\n      FROM `rj-smtr`.`br_rj_riodejaneiro_sigmob`.`shapes_geom`\n      WHERE id_modal_smtr in ('22', '23', 'O')\n      AND data_versao = \"2022-06-10\"\n    ) s\n    ON\n      r.linha = s.linha_gtfs\n  )\n    -- 5. Agrega\u00e7\u00e3o com LOGICAL_OR para evitar duplica\u00e7\u00e3o de registros\n    SELECT\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      timestamp_gps,\n      LOGICAL_OR(flag_trajeto_correto) AS flag_trajeto_correto,\n      LOGICAL_OR(flag_trajeto_correto_hist) AS flag_trajeto_correto_hist,\n      LOGICAL_OR(flag_linha_existe_sigmob) AS flag_linha_existe_sigmob,\n    FROM intersec i\n    GROUP BY\n      id_veiculo,\n      linha,\n      linha_gtfs,\n      route_id,\n      data,\n      data_versao,\n      timestamp_gps\n), registros as (\n  -- 1. registros_filtrada\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      timestamp_captura,\n      velocidade,\n      linha,\n      latitude,\n      longitude,\n    FROM `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`sppo_aux_registro_filtrada`\n    WHERE\n      data between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n      AND timestamp_gps > \"2022-01-01T00:00:00\" and timestamp_gps <=\"2022-01-01T01:00:00\"),\n  velocidades AS (\n    -- 2. velocidades\n    SELECT\n      id_veiculo, timestamp_gps, linha, velocidade, distancia, flag_em_movimento\n    FROM\n      __dbt__cte__sppo_aux_registros_velocidade_zirix\n  ),\n  paradas as (\n    -- 3. paradas\n    SELECT\n      id_veiculo, timestamp_gps, linha, tipo_parada,\n    FROM __dbt__cte__sppo_aux_registros_parada_zirix\n  ),\n  flags AS (\n    -- 4. flag_trajeto_correto\n    SELECT\n      id_veiculo,\n      timestamp_gps,\n      linha,\n      route_id,\n      flag_linha_existe_sigmob,\n      flag_trajeto_correto,\n      flag_trajeto_correto_hist\n    FROM\n      __dbt__cte__sppo_aux_registros_flag_trajeto_correto_zirix\n  )\n-- 5. Jun\u00e7\u00e3o final\nSELECT\n  \"SPPO\" modo,\n  r.timestamp_gps,\n  date(r.timestamp_gps) data,\n  extract(time from r.timestamp_gps) hora,\n  r.id_veiculo,\n  r.linha as servico,\n  r.latitude,\n  r.longitude,\n  CASE\n    WHEN\n      flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n      THEN true\n  ELSE false\n  END flag_em_operacao,\n  v.flag_em_movimento,\n  p.tipo_parada,\n  flag_linha_existe_sigmob,\n  flag_trajeto_correto,\n  flag_trajeto_correto_hist,\n  CASE\n    WHEN flag_em_movimento IS true AND flag_trajeto_correto_hist is true\n    THEN 'Em opera\u00e7\u00e3o'\n    WHEN flag_em_movimento is true and flag_trajeto_correto_hist is false\n    THEN 'Operando fora trajeto'\n    WHEN flag_em_movimento is false\n    THEN\n        CASE\n            WHEN tipo_parada is not null\n            THEN concat(\"Parado \", tipo_parada)\n        ELSE\n            CASE\n                WHEN flag_trajeto_correto_hist is true\n                THEN 'Parado trajeto correto'\n            ELSE 'Parado fora trajeto'\n            END\n        END\n    END status,\n  r.velocidade velocidade_instantanea,\n  v.velocidade velocidade_estimada_10_min,\n  v.distancia,\n  \"\" as versao\nFROM\n  registros r\n\nJOIN\n  flags f\nON\n  r.id_veiculo = f.id_veiculo\n  AND r.timestamp_gps = f.timestamp_gps\n  AND r.linha = f.linha\n\nJOIN\n  velocidades v\nON\n  r.id_veiculo = v.id_veiculo\n  AND  r.timestamp_gps = v.timestamp_gps\n  AND  r.linha = v.linha\n\nJOIN\n  paradas p\nON\n  r.id_veiculo = p.id_veiculo\n  AND  r.timestamp_gps = p.timestamp_gps\n  AND r.linha = p.linha\nWHERE\n  date(r.timestamp_gps) between DATE(\"2022-01-01T00:00:00\") and DATE(\"2022-01-01T01:00:00\")\n  AND r.timestamp_gps > \"2022-01-01T00:00:00\" and r.timestamp_gps <=\"2022-01-01T01:00:00\"", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`gps_sppo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.509967Z", "completed_at": "2025-02-20T18:15:36.517209Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.518533Z", "completed_at": "2025-02-20T18:15:36.518542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011113643646240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_dia", "compiled": true, "compiled_code": "\n\n-- depends_on: `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_dia`\nSELECT\n    o.data_ordem,\n    o.data_pagamento,\n    o.id_ordem_pagamento AS id_ordem_pagamento,\n    o.qtd_debito AS quantidade_transacao_debito,\n    o.valor_debito,\n    o.qtd_vendaabordo AS quantidade_transacao_especie,\n    o.valor_vendaabordo AS valor_especie,\n    o.qtd_gratuidade AS quantidade_transacao_gratuidade,\n    o.valor_gratuidade,\n    o.qtd_integracao AS quantidade_transacao_integracao,\n    o.valor_integracao,\n    o.qtd_rateio_credito AS quantidade_transacao_rateio_credito,\n    o.valor_rateio_credito AS valor_rateio_credito,\n    o.qtd_rateio_debito AS quantidade_transacao_rateio_debito,\n    o.valor_rateio_debito AS valor_rateio_debito,\n    (\n      o.qtd_debito\n      + o.qtd_vendaabordo\n      + o.qtd_gratuidade\n      + o.qtd_integracao\n    ) AS quantidade_total_transacao,\n    o.valor_bruto AS valor_total_transacao_bruto,\n    o.valor_taxa AS valor_desconto_taxa,\n    o.valor_liquido AS valor_total_transacao_liquido,\n    '' AS versao\nFROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`ordem_pagamento` o\n\n    WHERE\n        DATE(o.data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.522682Z", "completed_at": "2025-02-20T18:15:36.583859Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.585260Z", "completed_at": "2025-02-20T18:15:36.585270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06507110595703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_servico_trips_shapes_gtfs", "compiled": true, "compiled_code": "\n\nWITH\n   __dbt__cte__trips_filtrada_aux_gtfs as (\n-- depends_on: `rj-smtr`.`gtfs`.`ordem_servico_trajeto_alternativo`\n/*\nIdentifica\u00e7\u00e3o de um trip de refer\u00eancia para cada servi\u00e7o e sentido regular\nIdentifica\u00e7\u00e3o de todas as trips de refer\u00eancia para os trajetos alternativos\n*/\n\n\n\n\n\nWITH\n  -- 1. Busca os shapes em formato geogr\u00e1fico\n  shapes AS (\n    SELECT\n      *\n    FROM\n      `rj-smtr`.`gtfs`.`shapes_geom`\n    ),\n  -- 2. Busca as trips\n  trips_all AS (\n    SELECT\n      *,\n      CASE\n        WHEN indicador_trajeto_alternativo = TRUE THEN CONCAT(feed_version, trip_short_name, tipo_dia, direction_id, shape_id)\n        ELSE CONCAT(feed_version, trip_short_name, tipo_dia, direction_id)\n      END AS trip_partition\n    FROM\n    (\n      SELECT\n        service_id,\n        trip_id,\n        trip_headsign,\n        trip_short_name,\n        direction_id,\n        shape_id,\n        feed_version,\n        shape_distance,\n        start_pt,\n        end_pt,\n        CASE\n          WHEN service_id LIKE \"%U_%\" THEN \"Dia \u00datil\"\n          WHEN service_id LIKE \"%S_%\" THEN \"Sabado\"\n          WHEN service_id LIKE \"%D_%\" THEN \"Domingo\"\n        ELSE\n        service_id\n      END\n        AS tipo_dia,\n        CASE WHEN (\n          \n          trip_headsign LIKE \"%[revers\u00edvel]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_feira]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_obra]%\" OR\n          \n          trip_headsign LIKE \"%[desvio] [feira]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_obras]%\" OR\n          \n          trip_headsign LIKE \"%[rock_in_rio]%\" OR\n          \n          trip_headsign LIKE \"%[madonna 3]%\" OR\n          \n          trip_headsign LIKE \"%[madonna 1]%\" OR\n          \n          trip_headsign LIKE \"%[excepcionalidade]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_maracan\u00e3]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_t\u00fanel]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_janu\u00e1rio]%\" OR\n          \n          trip_headsign LIKE \"%[desvio_lazer]%\" OR\n          \n          trip_headsign LIKE \"%[excepcionalidade_1]%\" OR\n          \n          trip_headsign LIKE \"%[excepcionalidade_2]%\" OR\n          \n          trip_headsign LIKE \"%[excepcionalidade] 1%\" OR\n          \n          trip_headsign LIKE \"%[excepcionalidade] 2%\" OR\n          \n          trip_headsign LIKE \"%[madonna]%\" OR\n          \n          trip_headsign LIKE \"%[madonna 2]%\" OR\n          \n          trip_headsign LIKE \"%[reveillon]%\" OR\n          \n          service_id = \"EXCEP\") THEN TRUE\n        ELSE FALSE\n      END\n        AS indicador_trajeto_alternativo,\n      FROM\n        `rj-smtr`.`gtfs`.`trips`\n      LEFT JOIN\n        shapes\n      USING\n        (feed_start_date,\n        feed_version,\n        shape_id)\n      WHERE\n        \n        service_id NOT LIKE \"%_DESAT_%\"  -- Desconsidera service_ids desativados\n    )\n  )\n-- 3. Busca as trips de refer\u00eancia para cada servi\u00e7o, sentido, e tipo_dia\nSELECT\n    * EXCEPT(rn)\nFROM\n(\n    SELECT\n    * EXCEPT(shape_distance),\n    ROW_NUMBER() OVER (PARTITION BY trip_partition ORDER BY feed_version, trip_short_name, tipo_dia, direction_id, shape_distance DESC) AS rn\n    FROM\n    trips_all\n)\nWHERE\n    rn = 1\n),  __dbt__cte__ordem_servico_sentido_atualizado_aux_gtfs as (\n/*\n  ordem_servico_gtfs com sentidos despivotados, ajustes nos hor\u00e1rios e com atualiza\u00e7\u00e3o dos sentidos circulares\n*/\n\n\nWITH\n  -- 1. Identifica o sentido de cada servi\u00e7o\n  servico_trips_sentido AS (\n    SELECT\n      DISTINCT *\n    FROM\n      (\n        SELECT\n          feed_version,\n          trip_short_name AS servico,\n          CASE\n            WHEN ROUND(ST_Y(start_pt),4) = ROUND(ST_Y(end_pt),4) AND ROUND(ST_X(start_pt),4) = ROUND(ST_X(end_pt),4) THEN \"C\"\n            WHEN direction_id = \"0\" THEN \"I\"\n            WHEN direction_id = \"1\" THEN \"V\"\n        END\n          AS sentido\n        FROM\n          __dbt__cte__trips_filtrada_aux_gtfs\n        WHERE\n          indicador_trajeto_alternativo IS FALSE\n      )\n    WHERE\n      sentido = \"C\"\n  ),\n  -- 2. Busca principais informa\u00e7\u00f5es na Ordem de Servi\u00e7o (OS)\n  ordem_servico AS (\n    SELECT\n      * EXCEPT(horario_inicio, horario_fim),\n      horario_inicio AS inicio_periodo,\n      horario_fim  AS fim_periodo,\n    FROM\n      `rj-smtr`.`gtfs`.`ordem_servico`\n    \n  ),\n  -- 3. Despivota ordem de servi\u00e7o por sentido\n  ordem_servico_sentido AS (\n    SELECT\n      *\n    FROM\n      ordem_servico\n    UNPIVOT\n    (\n      (\n        distancia_planejada,\n        partidas\n      ) FOR sentido IN (\n        (\n          extensao_ida,\n          partidas_ida\n        ) AS \"I\",\n        (\n          extensao_volta,\n          partidas_volta\n        ) AS \"V\"\n      )\n    )\n  )\n  -- 4. Atualiza sentido dos servi\u00e7os circulares na ordem de servi\u00e7o\nSELECT\n    o.* EXCEPT(sentido),\n    COALESCE(s.sentido, o.sentido) AS sentido\nFROM\n    ordem_servico_sentido AS o\nLEFT JOIN\n    servico_trips_sentido AS s\nUSING\n    (feed_version, servico)\nWHERE\n    distancia_planejada != 0\n    AND\n      (\n        (\n          feed_start_date < '2024-08-16'\n          AND\n            (\n              distancia_total_planejada != 0\n              AND (partidas != 0 OR partidas IS NULL)\n            )\n        )\n      OR\n        feed_start_date >= '2024-08-16'\n      )\n),  __dbt__cte__ordem_servico_trajeto_alternativo_sentido_atualizado_aux_gtfs as (\n/*\n  ordem_servico_trajeto_alternativo_gtfs com sentidos despivotados e com atualiza\u00e7\u00e3o dos sentidos circulares\n*/\n\n\n\n-- 1. Busca anexo de trajetos alternativos\nWITH\n  ordem_servico_trajeto_alternativo AS (\n    SELECT\n      *\n    FROM\n      `rj-smtr`.`gtfs`.`ordem_servico_trajeto_alternativo`\n    \n  ),\n  -- 2. Despivota anexo de trajetos alternativos\n  ordem_servico_trajeto_alternativo_sentido AS (\n    SELECT\n      *\n    FROM\n      ordem_servico_trajeto_alternativo\n    UNPIVOT\n    (\n      (\n        distancia_planejada\n      ) FOR sentido IN (\n        (\n          extensao_ida\n        ) AS \"I\",\n        (\n          extensao_volta\n        ) AS \"V\"\n      )\n    )\n  )\n-- 3. Atualiza sentido dos servi\u00e7os circulares no anexo de trajetos alternativos\nSELECT\n    * EXCEPT(sentido),\n    CASE\n        WHEN \"C\" IN UNNEST(sentido_array) THEN \"C\"\n        ELSE o.sentido\n    END AS sentido,\nFROM\n    ordem_servico_trajeto_alternativo_sentido AS o\nLEFT JOIN\n(\n    SELECT\n        feed_start_date,\n        servico,\n        ARRAY_AGG(DISTINCT sentido) AS sentido_array,\n    FROM\n        __dbt__cte__ordem_servico_sentido_atualizado_aux_gtfs\n    GROUP BY\n        1,\n        2\n) AS s\nUSING\n    (feed_start_date, servico)\nWHERE\n    distancia_planejada != 0\n), -- 1. Busca os shapes em formato geogr\u00e1fico\n  shapes AS (\n    SELECT\n      *\n    FROM\n      `rj-smtr`.`gtfs`.`shapes_geom`\n    WHERE\n      feed_start_date = '2024-05-03'\n    ),\n  -- 2. Trata a OS, inclui trip_ids e ajusta nomes das colunas\n  ordem_servico_tratada AS (\n  SELECT\n    *\n  FROM\n    (\n      (\n      SELECT\n        o.feed_version,\n        o.feed_start_date,\n        o.feed_end_date,\n        o.tipo_os,\n        o.tipo_dia,\n        servico,\n        vista,\n        consorcio,\n        sentido,\n        distancia_planejada,\n        distancia_total_planejada,\n        inicio_periodo,\n        fim_periodo,\n        trip_id,\n        shape_id,\n        indicador_trajeto_alternativo\n      FROM\n        __dbt__cte__ordem_servico_sentido_atualizado_aux_gtfs AS o\n      LEFT JOIN\n        __dbt__cte__trips_filtrada_aux_gtfs AS t\n      ON\n        t.feed_version = o.feed_version\n        AND o.servico = t.trip_short_name\n        AND\n          ((o.tipo_dia = t.tipo_dia AND o.tipo_os NOT IN (\"CNU\", \"Enem\"))\n          OR (o.tipo_dia = \"Ponto Facultativo\" AND t.tipo_dia = \"Dia \u00datil\" AND o.tipo_os != \"CNU\")\n          OR (o.feed_start_date = \"2024-08-16\" AND o.tipo_os = \"CNU\" AND o.tipo_dia = \"Domingo\" AND t.tipo_dia = \"Sabado\") -- Domingo CNU\n          OR (o.feed_start_date IN (\"2024-09-29\", \"2024-11-06\") AND o.tipo_os = \"Enem\" AND o.tipo_dia = \"Domingo\" AND t.tipo_dia = \"Sabado\")) -- Domingo Enem\n        AND\n          ((o.sentido IN (\"I\", \"C\") AND t.direction_id = \"0\")\n          OR (o.sentido = \"V\" AND t.direction_id = \"1\"))\n      WHERE\n        indicador_trajeto_alternativo IS FALSE\n      )\n    UNION ALL\n      (\n      SELECT\n        o.feed_version,\n        o.feed_start_date,\n        o.feed_end_date,\n        o.tipo_os,\n        o.tipo_dia,\n        servico,\n        o.vista || \" \" || ot.evento AS vista,\n        o.consorcio,\n        sentido,\n        ot.distancia_planejada,\n        distancia_total_planejada,\n        COALESCE(ot.inicio_periodo, o.inicio_periodo) AS inicio_periodo,\n        COALESCE(ot.fim_periodo, o.fim_periodo) AS fim_periodo,\n        trip_id,\n        shape_id,\n        indicador_trajeto_alternativo\n      FROM\n        __dbt__cte__ordem_servico_trajeto_alternativo_sentido_atualizado_aux_gtfs AS ot\n      LEFT JOIN\n        __dbt__cte__ordem_servico_sentido_atualizado_aux_gtfs AS o\n      USING\n        (feed_version,\n          tipo_os,\n          servico,\n          sentido)\n      LEFT JOIN\n        __dbt__cte__trips_filtrada_aux_gtfs AS t\n      ON\n        t.feed_version = o.feed_version\n        AND o.servico = t.trip_short_name\n        AND\n          (o.tipo_dia = t.tipo_dia\n          OR (o.tipo_dia = \"Ponto Facultativo\" AND t.tipo_dia = \"Dia \u00datil\")\n          OR (t.tipo_dia = \"EXCEP\")) -- Inclui trips do service_id/tipo_dia \"EXCEP\"\n        AND\n          ((o.sentido IN (\"I\", \"C\") AND t.direction_id = \"0\")\n          OR (o.sentido = \"V\" AND t.direction_id = \"1\"))\n        AND t.trip_headsign LIKE CONCAT(\"%\", ot.evento, \"%\")\n      WHERE\n        indicador_trajeto_alternativo IS TRUE\n        AND trip_id IS NOT NULL -- Remove servi\u00e7os de tipo_dia sem planejamento\n      )\n    )\n  ),\n  -- 3. Inclui trip_ids de ida e volta para trajetos circulares, ajusta shape_id para trajetos circulares e inclui id_tipo_trajeto\n  ordem_servico_trips AS (\n    SELECT\n      * EXCEPT(shape_id, indicador_trajeto_alternativo),\n      shape_id AS shape_id_planejado,\n      CASE\n        WHEN sentido = \"C\" THEN shape_id || \"_\" || SPLIT(trip_id, \"_\")[OFFSET(1)]\n      ELSE\n      shape_id\n    END\n      AS shape_id,\n      CASE\n        WHEN indicador_trajeto_alternativo IS FALSE THEN 0 -- Trajeto regular\n        WHEN indicador_trajeto_alternativo IS TRUE THEN 1 -- Trajeto alternativo\n    END\n      AS id_tipo_trajeto,\n    FROM\n    (\n      (\n        SELECT\n          DISTINCT * EXCEPT(trip_id),\n          trip_id AS trip_id_planejado,\n          trip_id\n        FROM\n          ordem_servico_tratada\n        WHERE\n          sentido = \"I\"\n          OR sentido = \"V\"\n      )\n      UNION ALL\n      (\n        SELECT\n          * EXCEPT(trip_id),\n          trip_id AS trip_id_planejado,\n          CONCAT(trip_id, \"_0\") AS trip_id,\n        FROM\n          ordem_servico_tratada\n        WHERE\n          sentido = \"C\"\n      )\n      UNION ALL\n      (\n        SELECT\n          * EXCEPT(trip_id),\n          trip_id AS trip_id_planejado,\n          CONCAT(trip_id, \"_1\") AS trip_id,\n        FROM\n          ordem_servico_tratada\n        WHERE\n          sentido = \"C\"\n      )\n    )\n  )\nSELECT\n  feed_version,\n  feed_start_date,\n  o.feed_end_date,\n  tipo_os,\n  tipo_dia,\n  servico,\n  vista,\n  o.consorcio,\n  sentido,\n  CASE\n    WHEN feed_start_date >= '2024-08-16' THEN fh.partidas\n    ELSE NULL\n  END AS partidas_total_planejada,\n  distancia_planejada,\n  CASE\n    WHEN feed_start_date >= '2024-08-16' THEN fh.quilometragem\n    ELSE distancia_total_planejada\n  END AS distancia_total_planejada,\n  inicio_periodo,\n  fim_periodo,\n  CASE\n    WHEN feed_start_date >= '2024-08-16' THEN fh.faixa_horaria_inicio\n    ELSE \"00:00:00\"\n  END AS faixa_horaria_inicio,\n  CASE\n    WHEN feed_start_date >= '2024-08-16' THEN fh.faixa_horaria_fim\n    ELSE \"23:59:59\"\n  END AS faixa_horaria_fim,\n  trip_id_planejado,\n  trip_id,\n  shape_id,\n  shape_id_planejado,\n  shape,\n  CASE\n    WHEN sentido = \"C\" AND SPLIT(shape_id, \"_\")[OFFSET(1)] = \"0\" THEN \"I\"\n    WHEN sentido = \"C\" AND SPLIT(shape_id, \"_\")[OFFSET(1)] = \"1\" THEN \"V\"\n    WHEN sentido = \"I\" OR sentido = \"V\" THEN sentido\nEND\n  AS sentido_shape,\n  s.start_pt,\n  s.end_pt,\n  id_tipo_trajeto,\nFROM\n  ordem_servico_trips AS o\nLEFT JOIN\n  shapes AS s\nUSING\n  (feed_version,\n    feed_start_date,\n    shape_id)\nLEFT JOIN\n  `rj-smtr`.`planejamento`.`ordem_servico_faixa_horaria` AS fh\n  -- rj-smtr-dev.gtfs.ordem_servico_faixa_horaria AS fh\nUSING\n  (feed_version, feed_start_date, tipo_os, tipo_dia, servico)\nWHERE\nfeed_start_date = '2024-05-03' AND\n(\n    (\n    feed_start_date >= '2024-08-16'\n    AND\n      (\n        fh.quilometragem != 0\n        AND (fh.partidas != 0 OR fh.partidas IS NULL)\n      )\n    )\n    OR\n      feed_start_date < '2024-08-16'\n  )", "relation_name": "`rj-smtr`.`gtfs`.`ordem_servico_trips_shapes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.589278Z", "completed_at": "2025-02-20T18:15:36.596898Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.598230Z", "completed_at": "2025-02-20T18:15:36.598238Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01137995719909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_validador", "compiled": true, "compiled_code": "\n\nSELECT\n    modo,\n    EXTRACT(DATE FROM datetime_gps) AS data,\n    EXTRACT(HOUR FROM datetime_gps) AS hora,\n    datetime_gps,\n    datetime_captura,\n    id_operadora,\n    operadora,\n    id_servico_jae,\n    -- s.servico,\n    servico_jae,\n    descricao_servico_jae,\n    CASE\n      WHEN modo = \"VLT\" THEN SUBSTRING(id_veiculo, 1, 3)\n      WHEN modo = \"BRT\" THEN NULL\n      ELSE id_veiculo\n    END AS id_veiculo,\n    id_validador,\n    id_transmissao_gps,\n    latitude,\n    longitude,\n    sentido,\n    estado_equipamento,\n    temperatura,\n    versao_app,\n    '' as versao\nFROM\n(\n    SELECT\n        *,\n        ROW_NUMBER() OVER(PARTITION BY id_transmissao_gps ORDER BY datetime_captura DESC) AS rn\n    FROM\n        `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gps_validador_aux`\n\n    \n      WHERE\n          DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n          AND datetime_captura > DATETIME(\"2022-01-01T00:00:00\") AND datetime_captura <= DATETIME(\"2022-01-01T01:00:00\")\n    \n)\nWHERE\n    rn = 1\n    AND modo != \"Van\"", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.602406Z", "completed_at": "2025-02-20T18:15:36.608771Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.610084Z", "completed_at": "2025-02-20T18:15:36.610092Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010153055191040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_validador_van", "compiled": true, "compiled_code": "\n\nSELECT\n    modo,\n    EXTRACT(DATE FROM datetime_gps) AS data,\n    EXTRACT(HOUR FROM datetime_gps) AS hora,\n    datetime_gps,\n    datetime_captura,\n    id_operadora,\n    operadora,\n    id_servico_jae,\n    -- s.servico,\n    servico_jae,\n    descricao_servico_jae,\n    id_veiculo,\n    id_validador,\n    id_transmissao_gps,\n    latitude,\n    longitude,\n    sentido,\n    estado_equipamento,\n    temperatura,\n    versao_app,\n    '' as versao\nFROM\n(\n    SELECT\n        *,\n        ROW_NUMBER() OVER(PARTITION BY id_transmissao_gps ORDER BY datetime_captura DESC) AS rn\n    FROM\n        `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gps_validador_aux`\n    \n        WHERE\n            DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n            AND datetime_captura > DATETIME(\"2022-01-01T00:00:00\") AND datetime_captura <= DATETIME(\"2022-01-01T01:00:00\")\n    \n)\nWHERE\n    rn = 1\n    AND modo = \"Van\"", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador_van`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.613902Z", "completed_at": "2025-02-20T18:15:36.617823Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:36.619102Z", "completed_at": "2025-02-20T18:15:36.619109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007563591003417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_brt_datario", "compiled": true, "compiled_code": "\n\nselect\n    modo,\n    timestamp_gps,\n    data,\n    hora,\n    id_veiculo,\n    servico,\n    latitude,\n    longitude,\n    flag_em_movimento,\n    tipo_parada,\n    flag_linha_existe_sigmob,\n    velocidade_instantanea,\n    velocidade_estimada_10_min,\n    distancia,\n    versao\nfrom `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_brt`", "relation_name": "`rj-smtr`.`datario`.`gps_brt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:36.622873Z", "completed_at": "2025-02-20T18:15:38.450785Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:38.452122Z", "completed_at": "2025-02-20T18:15:38.452131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8316569328308105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_registros_status_trajeto", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n\n    \n    \n\n\n\n    \n\n\n\n\n-- 1. Seleciona sinais de GPS registrados no per\u00edodo\nwith gps as (\n    select\n        g.* except(longitude, latitude, servico),\n        \n        servico,\n        \n        substr(id_veiculo, 2, 3) as id_empresa,\n        ST_GEOGPOINT(longitude, latitude) posicao_veiculo_geo,\n        \n    from\n        -- `rj-smtr.br_rj_riodejaneiro_veiculos.gps_sppo` g\n        `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` g\n    where (\n        data between date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day) and date(\"2022-01-01T01:00:00\")\n    )\n    -- Limita range de busca do gps de D-2 \u00e0s 00h at\u00e9 D-1 \u00e0s 3h\n    and (\n        timestamp_gps between datetime_sub(datetime_trunc(\"2022-01-01T01:00:00\", day), interval 1 day)\n        and datetime_add(datetime_trunc(\"2022-01-01T01:00:00\", day), interval 3 hour)\n    )\n    and status != \"Parado garagem\"\n    \n),\n-- 2. Classifica a posi\u00e7\u00e3o do ve\u00edculo em todos os shapes poss\u00edveis de\n--    servi\u00e7os de uma mesma empresa\nstatus_viagem as (\n    select\n        \n        g.data,\n        \n        g.id_veiculo,\n        g.id_empresa,\n        g.timestamp_gps,\n        timestamp_trunc(g.timestamp_gps, minute) as timestamp_minuto_gps,\n        g.posicao_veiculo_geo,\n        TRIM(g.servico, \" \") as servico_informado,\n        s.servico as servico_realizado,\n        s.shape_id,\n        s.sentido_shape,\n        s.shape_id_planejado,\n        s.trip_id,\n        s.trip_id_planejado,\n        s.sentido,\n        s.start_pt,\n        s.end_pt,\n        s.distancia_planejada,\n        ifnull(g.distancia,0) as distancia,\n        case\n            when ST_DWITHIN(g.posicao_veiculo_geo, start_pt, 500)\n            then 'start'\n            when ST_DWITHIN(g.posicao_veiculo_geo, end_pt, 500)\n            then 'end'\n            when ST_DWITHIN(g.posicao_veiculo_geo, shape, 500)\n            then 'middle'\n        else 'out'\n        end status_viagem\n    from\n        gps g\n    inner join (\n        select\n            *\n        from\n            `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        where\n            \n            data between date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day) and date(\"2022-01-01T01:00:00\")\n            \n    ) s\n    on\n        \n        g.data = s.data\n        \n        and g.servico = s.servico\n)\nselect\n    *,\n    '' as versao_modelo\nfrom\n    status_viagem\n\n", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:38.455900Z", "completed_at": "2025-02-20T18:15:42.804142Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.805556Z", "completed_at": "2025-02-20T18:15:42.805565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.352094888687134, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sppo_veiculo_dia", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`veiculo_staging`.`licenciamento_stu`\n-- depends_on: `rj-smtr`.`veiculo`.`infracao`\n-- depends_on: `rj-smtr`.`veiculo_staging`.`infracao`\n\n\n\n    \n    \n\n\nwith\n     __dbt__cte__sppo_licenciamento as (\n\n\nSELECT\n  *\nFROM\n  `rj-smtr`.`veiculo`.`licenciamento`\nWHERE\n  tipo_veiculo NOT LIKE \"%ROD%\"\n  and modo = 'ONIBUS'\n),  __dbt__cte__sppo_infracao as (\n\n\nSELECT\n  *\nFROM\n  `rj-smtr`.`veiculo`.`infracao`\nWHERE\n  modo = 'ONIBUS'\n  AND placa IS NOT NULL\n), licenciamento as (\n        select\n            date(\"2022-01-01T01:00:00\") as data,\n            id_veiculo,\n            placa,\n            tipo_veiculo,\n            tecnologia,\n            indicador_ar_condicionado,\n            true as indicador_licenciado,\n            case\n                when\n                    ano_ultima_vistoria_atualizado >= cast(\n                        extract(\n                            year\n                            from\n                                date_sub(\n                                    date(\"2022-01-01T01:00:00\"),\n                                    interval 1 year\n                                )\n                        ) as int64\n                    )\n                then true  -- \u00daltima vistoria realizada dentro do per\u00edodo v\u00e1lido\n                when\n                    data_ultima_vistoria is null\n                    and date_diff(\n                        date(\"2022-01-01T01:00:00\"), data_inicio_vinculo, day\n                    )\n                    <= 15\n                then true  -- Caso o ve\u00edculo seja novo, existe a toler\u00e2ncia de 15 dias para a primeira vistoria\n                when\n                    ano_fabricacao in (2023, 2024)\n                    and cast(extract(year from date(\"2022-01-01T01:00:00\")) as int64)\n                    = 2024\n                then true  -- Caso o ve\u00edculo tiver ano de fabrica\u00e7\u00e3o 2023 ou 2024, ser\u00e1 considerado como vistoriado apenas em 2024 (regra de transi\u00e7\u00e3o)\n                else false\n            end as indicador_vistoriado,\n            data_inicio_vinculo\n        from __dbt__cte__sppo_licenciamento\n        where data = date(\"2023-02-01\")\n    ),\n    gps as (\n        select distinct data, id_veiculo\n        from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo`\n           -- `rj-smtr.br_rj_riodejaneiro_veiculos.gps_sppo`\n        where data = date(\"2022-01-01T01:00:00\")\n    ),\n    autuacoes as (\n        select distinct data_infracao as data, placa, id_infracao\n        from __dbt__cte__sppo_infracao\n        -- `rj-smtr.veiculo.sppo_infracao`\n        where\n            data = date(\"2023-02-10\")\n            and data_infracao = date(\"2022-01-01T01:00:00\")\n    ),\n    registros_agente_verao as (\n        select distinct\n            data, id_veiculo, true as indicador_registro_agente_verao_ar_condicionado\n        from `rj-smtr`.`veiculo`.`sppo_registro_agente_verao`\n        -- `rj-smtr.veiculo.sppo_registro_agente_verao`\n        where data = date(\"2022-01-01T01:00:00\")\n    ),\n    autuacao_ar_condicionado as (\n        select data, placa, true as indicador_autuacao_ar_condicionado\n        from autuacoes\n        where id_infracao = \"023.II\"\n    ),\n    autuacao_seguranca as (\n        select data, placa, true as indicador_autuacao_seguranca\n        from autuacoes\n        where\n            id_infracao in (\n                \"016.VI\",\n                \"023.VII\",\n                \"024.II\",\n                \"024.III\",\n                \"024.IV\",\n                \"024.V\",\n                \"024.VI\",\n                \"024.VII\",\n                \"024.VIII\",\n                \"024.IX\",\n                \"024.XII\",\n                \"024.XIV\",\n                \"024.XV\",\n                \"025.II\",\n                \"025.XII\",\n                \"025.XIII\",\n                \"025.XIV\",\n                \"026.X\"\n            )\n    ),\n    autuacao_equipamento as (\n        select data, placa, true as indicador_autuacao_equipamento\n        from autuacoes\n        where\n            id_infracao in (\n                \"023.IV\",\n                \"023.V\",\n                \"023.VI\",\n                \"023.VIII\",\n                \"024.XIII\",\n                \"024.XI\",\n                \"024.XVIII\",\n                \"024.XXI\",\n                \"025.III\",\n                \"025.IV\",\n                \"025.V\",\n                \"025.VI\",\n                \"025.VII\",\n                \"025.VIII\",\n                \"025.IX\",\n                \"025.X\",\n                \"025.XI\"\n            )\n    ),\n    autuacao_limpeza as (\n        select data, placa, true as indicador_autuacao_limpeza\n        from autuacoes\n        where id_infracao in (\"023.IX\", \"024.X\")\n    ),\n    autuacoes_agg as (\n        select distinct *\n        from autuacao_ar_condicionado\n        full join autuacao_seguranca using (data, placa)\n        full join autuacao_equipamento using (data, placa)\n        full join autuacao_limpeza using (data, placa)\n    ),\n    gps_licenciamento_autuacao as (\n        select\n            data,\n            id_veiculo,\n            \n                struct(\n                    coalesce(l.indicador_licenciado, false) as indicador_licenciado,\n                    coalesce(\n                        l.indicador_ar_condicionado, false\n                    ) as indicador_ar_condicionado,\n                    coalesce(\n                        a.indicador_autuacao_ar_condicionado, false\n                    ) as indicador_autuacao_ar_condicionado,\n                    coalesce(\n                        a.indicador_autuacao_seguranca, false\n                    ) as indicador_autuacao_seguranca,\n                    coalesce(\n                        a.indicador_autuacao_limpeza, false\n                    ) as indicador_autuacao_limpeza,\n                    coalesce(\n                        a.indicador_autuacao_equipamento, false\n                    ) as indicador_autuacao_equipamento,\n                    coalesce(\n                        r.indicador_registro_agente_verao_ar_condicionado, false\n                    ) as indicador_registro_agente_verao_ar_condicionado\n                )\n             as indicadores,\n            l.placa,\n            tecnologia\n        from gps g\n        left join licenciamento as l using (data, id_veiculo)\n        left join autuacoes_agg as a using (data, placa)\n        left join registros_agente_verao as r using (data, id_veiculo)\n    )\n\n    select\n        gla.* except (indicadores, tecnologia, placa),\n        to_json(indicadores) as indicadores,\n        status,\n        \n            safe_cast(null as string) as tecnologia,\n            safe_cast(null as string) as placa,\n            safe_cast(null as date) as data_licenciamento,\n            safe_cast(null as date) as data_infracao,\n        \n        current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao,\n        \"\" as versao\n    from gps_licenciamento_autuacao as gla\n    left join\n        `rj-smtr`.`dashboard_subsidio_sppo`.`subsidio_parametros` as p\n        -- `rj-smtr.dashboard_subsidio_sppo.subsidio_parametros` AS p\n        on gla.indicadores.indicador_licenciado = p.indicador_licenciado\n        and gla.indicadores.indicador_ar_condicionado = p.indicador_ar_condicionado\n        and gla.indicadores.indicador_autuacao_ar_condicionado\n        = p.indicador_autuacao_ar_condicionado\n        and gla.indicadores.indicador_autuacao_seguranca\n        = p.indicador_autuacao_seguranca\n        and gla.indicadores.indicador_autuacao_limpeza = p.indicador_autuacao_limpeza\n        and gla.indicadores.indicador_autuacao_equipamento\n        = p.indicador_autuacao_equipamento\n        and gla.indicadores.indicador_registro_agente_verao_ar_condicionado\n        = p.indicador_registro_agente_verao_ar_condicionado\n        and (data between p.data_inicio and p.data_fim)\n", "relation_name": "`rj-smtr`.`veiculo`.`sppo_veiculo_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.809604Z", "completed_at": "2025-02-20T18:15:42.817887Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.819151Z", "completed_at": "2025-02-20T18:15:42.819159Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011977672576904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.check_gps_treatment__gps_sppo.c8535c70ff", "compiled": true, "compiled_code": "WITH\n            data_hora AS (\n                SELECT\n                    EXTRACT(date\n                    FROM\n                    timestamp_array) AS DATA,\n                    EXTRACT(hour\n                    FROM\n                    timestamp_array) AS hora,\n                FROM\n                    UNNEST(GENERATE_TIMESTAMP_ARRAY(\"2022-01-01T00:00:00\", \"2022-01-01T01:00:00\", INTERVAL 1 hour)) AS timestamp_array ),\n            gps_raw AS (\n                SELECT\n                    EXTRACT(date\n                    FROM\n                    timestamp_gps) AS DATA,\n                    EXTRACT(hour\n                    FROM\n                    timestamp_gps) AS hora,\n                    COUNT(*) AS q_gps_raw\n                FROM\n                    -- `rj-smtr.br_rj_riodejaneiro_onibus_gps.sppo_registros`\n                    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_registros`\n                WHERE\n                    DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n                    AND DATE(\"2022-01-01T01:00:00\")\n                GROUP BY\n                    1,\n                    2 ),\n            gps_filtrada AS (\n                SELECT\n                    EXTRACT(date\n                            FROM\n                            timestamp_gps) AS DATA,\n                    EXTRACT(hour\n                    FROM\n                    timestamp_gps) AS hora,\n                    COUNT(*) AS q_gps_filtrada\n                FROM\n                    -- `rj-smtr.br_rj_riodejaneiro_onibus_gps.sppo_aux_registros_filtrada`\n                    `rj-smtr`.`br_rj_riodejaneiro_onibus_gps`.`sppo_aux_registros_filtrada`\n                WHERE\n                    DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n                    AND DATE(\"2022-01-01T01:00:00\")\n                GROUP BY\n                    1,\n                    2 ),\n            gps_sppo AS (\n                SELECT\n                    DATA,\n                    EXTRACT(hour\n                    FROM\n                    timestamp_gps) AS hora,\n                    COUNT(*) AS q_gps_treated\n                FROM\n                    -- `rj-smtr.br_rj_riodejaneiro_veiculos.gps_sppo`\n                    `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo`\n                WHERE\n                    DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n                    AND DATE(\"2022-01-01T01:00:00\")\n                GROUP BY\n                    1,\n                    2),\n            gps_join AS (\n                SELECT\n                    *,\n                    SAFE_DIVIDE(q_gps_filtrada, q_gps_raw) as indice_tratamento_raw,\n                    SAFE_DIVIDE(q_gps_treated, q_gps_filtrada) as indice_tratamento_filtrada,\n                    CASE\n                        WHEN    q_gps_raw = 0 OR q_gps_filtrada = 0 OR q_gps_treated = 0                -- Hip\u00f3tese de perda de dados no tratamento\n                                OR q_gps_raw IS NULL OR q_gps_filtrada IS NULL OR q_gps_treated IS NULL -- Hip\u00f3tese de perda de dados no tratamento\n                                OR (q_gps_raw <= q_gps_filtrada) OR (q_gps_filtrada < q_gps_treated)   -- Hip\u00f3tese de duplica\u00e7\u00e3o de dados\n                                OR (COALESCE(SAFE_DIVIDE(q_gps_filtrada, q_gps_raw), 0) < 0.96)         -- Hip\u00f3tese de perda de dados no tratamento (superior a 3%)\n                                OR (COALESCE(SAFE_DIVIDE(q_gps_treated, q_gps_filtrada), 0) < 0.96)     -- Hip\u00f3tese de perda de dados no tratamento (superior a 3%)\n                                THEN FALSE\n                    ELSE\n                    TRUE\n                END\n                    AS status\n                FROM\n                    data_hora\n                LEFT JOIN\n                    gps_raw\n                USING\n                    (DATA,\n                    hora)\n                LEFT JOIN\n                    gps_filtrada\n                USING\n                    (DATA,\n                    hora)\n                LEFT JOIN\n                    gps_sppo\n                USING\n                    (DATA,\n                    hora))\n            SELECT\n                *\n            FROM\n                gps_join\n            WHERE\n                status IS FALSE", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.823050Z", "completed_at": "2025-02-20T18:15:42.828110Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.829420Z", "completed_at": "2025-02-20T18:15:42.829428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008887767791748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__gps_sppo.d22d769df2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        timestamp_gps, id_veiculo, latitude, longitude\n    from (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by timestamp_gps, id_veiculo, latitude, longitude\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.833290Z", "completed_at": "2025-02-20T18:15:42.838684Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.839986Z", "completed_at": "2025-02-20T18:15:42.839993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009134531021118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__id_veiculo__gps_sppo.241c966f9e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.843915Z", "completed_at": "2025-02-20T18:15:42.849640Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.851012Z", "completed_at": "2025-02-20T18:15:42.851021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009561300277709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__latitude__gps_sppo.00a38d2008", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect latitude\nfrom (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere latitude is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.854867Z", "completed_at": "2025-02-20T18:15:42.861420Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.862795Z", "completed_at": "2025-02-20T18:15:42.862803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010344505310058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__longitude__gps_sppo.7066e941dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect longitude\nfrom (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere longitude is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.866718Z", "completed_at": "2025-02-20T18:15:42.871883Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.873222Z", "completed_at": "2025-02-20T18:15:42.873230Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008990049362182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__servico__gps_sppo.4af8f8ab65", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.877123Z", "completed_at": "2025-02-20T18:15:42.882484Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.883811Z", "completed_at": "2025-02-20T18:15:42.883818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009163379669189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__status__gps_sppo.f424184be3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere status is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.887893Z", "completed_at": "2025-02-20T18:15:42.894397Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.895832Z", "completed_at": "2025-02-20T18:15:42.895842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010539531707763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__timestamp_gps__gps_sppo.35a3db83a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp_gps\nfrom (select * from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere timestamp_gps is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.900070Z", "completed_at": "2025-02-20T18:15:42.904765Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.906134Z", "completed_at": "2025-02-20T18:15:42.906142Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008706808090209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_onibus_datario", "compiled": true, "compiled_code": "\nselect\n    modo,\n    timestamp_gps,\n    data,\n    hora,\n    id_veiculo,\n    servico,\n    latitude,\n    longitude,\n    flag_em_movimento,\n    tipo_parada,\n    flag_linha_existe_sigmob,\n    velocidade_instantanea,\n    velocidade_estimada_10_min,\n    distancia,\n    'conecta' as fonte_gps,\n    versao\nfrom `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo`\n\nunion all\n\nselect\n    modo,\n    timestamp_gps,\n    data,\n    hora,\n    id_veiculo,\n    servico,\n    latitude,\n    longitude,\n    flag_em_movimento,\n    tipo_parada,\n    flag_linha_existe_sigmob,\n    velocidade_instantanea,\n    velocidade_estimada_10_min,\n    distancia,\n    'zirix' as fonte_gps,\n    versao\nfrom `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`gps_sppo`", "relation_name": "`rj-smtr`.`datario`.`gps_onibus`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.910304Z", "completed_at": "2025-02-20T18:15:42.921455Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.922972Z", "completed_at": "2025-02-20T18:15:42.922981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015298843383789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_viagem", "compiled": true, "compiled_code": "\n\nwith\n    viagem as (\n        select\n            data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            modo,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            fonte_gps\n        from `rj-smtr`.`monitoramento`.`viagem_informada`\n        \n        \n            where\n                data between date('2022-01-01T00:00:00') and date(\n                    '2022-01-01T01:00:00'\n                )\n        \n    ),\n    gps_conecta as (\n        select data, timestamp_gps, servico, id_veiculo, latitude, longitude\n        \n        from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo`\n        where\n            \n                data between date_sub(\n                    date('2022-01-01T00:00:00'), interval 1 day\n                ) and date_add(date('2022-01-01T01:00:00'), interval 1 day)\n            \n\n    ),\n    gps_zirix as (\n        select data, timestamp_gps, servico, id_veiculo, latitude, longitude\n        \n        from `rj-smtr`.`br_rj_riodejaneiro_onibus_gps_zirix`.`gps_sppo`\n        where\n            \n                data between date_sub(\n                    date('2022-01-01T00:00:00'), interval 1 day\n                ) and date_add(date('2022-01-01T01:00:00'), interval 1 day)\n            \n    ),\n    gps_brt as (\n        select data, timestamp_gps, servico, id_veiculo, latitude, longitude\n        \n        from `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_brt`\n        where\n            \n                data between date_sub(\n                    date('2022-01-01T00:00:00'), interval 1 day\n                ) and date_add(date('2022-01-01T01:00:00'), interval 1 day)\n            \n    ),\n    gps_union as (\n        select *, 'conecta' as fornecedor\n        from gps_conecta\n\n        union all\n\n        select *, 'zirix' as fornecedor\n        from gps_zirix\n\n        union all\n\n        select *, 'brt' as fornecedor\n        from gps_brt\n    )\nselect\n    v.data,\n    g.timestamp_gps,\n    v.modo,\n    g.id_veiculo,\n    v.servico as servico_viagem,\n    g.servico as servico_gps,\n    v.sentido,\n    g.latitude,\n    g.longitude,\n    st_geogpoint(g.longitude, g.latitude) as geo_point_gps,\n    v.id_viagem,\n    v.datetime_partida,\n    v.datetime_chegada,\n    v.trip_id,\n    v.route_id,\n    v.shape_id,\n    v.fonte_gps,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom gps_union g\njoin\n    viagem v\n    on g.timestamp_gps between v.datetime_partida and v.datetime_chegada\n    and g.id_veiculo = v.id_veiculo\n    and g.fornecedor = v.fonte_gps\n", "relation_name": "`rj-smtr`.`monitoramento_staging`.`gps_viagem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.927076Z", "completed_at": "2025-02-20T18:15:42.934127Z"}, {"name": "execute", "started_at": "2025-02-20T18:15:42.935487Z", "completed_at": "2025-02-20T18:15:42.935495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010918378829956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_dia_invalida", "compiled": true, "compiled_code": "\n\nWITH ordem_pagamento_consorcio_dia AS (\n  SELECT\n    data_ordem,\n    id_ordem_pagamento,\n    SUM(quantidade_total_transacao) AS quantidade_total_transacao,\n    SUM(valor_total_transacao_liquido) AS valor_total_transacao_liquido\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n  GROUP BY\n    1,\n    2\n),\nordem_pagamento_dia AS (\n  SELECT\n    data_ordem,\n    id_ordem_pagamento,\n    quantidade_total_transacao,\n    valor_total_transacao_liquido\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\nindicadores AS (\nSELECT\n  d.data_ordem,\n  d.id_ordem_pagamento,\n  d.quantidade_total_transacao,\n  cd.quantidade_total_transacao AS quantidade_total_transacao_agregacao,\n  d.valor_total_transacao_liquido,\n  cd.valor_total_transacao_liquido AS valor_total_transacao_liquido_agregacao,\n  ROUND(cd.valor_total_transacao_liquido, 2) != ROUND(d.valor_total_transacao_liquido, 2) OR cd.quantidade_total_transacao != d.quantidade_total_transacao AS indicador_agregacao_invalida\nFROM\n  ordem_pagamento_dia d\nLEFT JOIN\n  ordem_pagamento_consorcio_dia cd\nUSING(data_ordem, id_ordem_pagamento)\n)\nSELECT\n  *,\n  '' AS versao\nFROM\n  indicadores\nWHERE\n  indicador_agregacao_invalida = TRUE", "relation_name": "`rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_dia_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:15:42.939646Z", "completed_at": "2025-02-20T18:16:27.709943Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.715473Z", "completed_at": "2025-02-20T18:16:27.715508Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 44.78220272064209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.transacao", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`cadastro`.`operadoras_contato`\n-- depends_on: `rj-smtr`.`cadastro`.`servico_operadora`\n-- depends_on: `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`\n\n\n\n\n\n\n\n\n    \n        \n\n        \n\n        \n\n    \n\n\nwith\n    transacao as (\n        select *\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`transacao`\n         where \n  DATE(data) BETWEEN DATE(\"2022-01-01T00:00:00\") AND DATE(\"2022-01-01T01:00:00\")\n  AND timestamp_captura BETWEEN DATETIME(\"2022-01-01T00:00:00\") AND DATETIME(\"2022-01-01T01:00:00\")\n \n    ),\n    tipo_transacao as (\n        select chave as id_tipo_transacao, valor as tipo_transacao,\n        from `rj-smtr.br_rj_riodejaneiro_bilhetagem.dicionario`\n        where id_tabela = \"transacao\" and coluna = \"id_tipo_transacao\"\n    ),\n    gratuidade as (\n        select\n            cast(id_cliente as string) as id_cliente,\n            tipo_gratuidade,\n            data_inicio_validade,\n            data_fim_validade\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`gratuidade_aux`\n    -- `rj-smtr.br_rj_riodejaneiro_bilhetagem_staging.gratuidade_aux`\n    -- TODO: FILTRAR PARTI\u00c7\u00d5ES DE FORMA EFICIENTE\n    ),\n    tipo_pagamento as (\n        select chave as id_tipo_pagamento, valor as tipo_pagamento\n        from `rj-smtr.br_rj_riodejaneiro_bilhetagem.dicionario`\n        where id_tabela = \"transacao\" and coluna = \"id_tipo_pagamento\"\n    ),\n    integracao as (\n        select id_transacao, valor_rateio, datetime_processamento_integracao\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao`\n        -- `rj-smtr.br_rj_riodejaneiro_bilhetagem.integracao`\n        \n            where\n                 data = \"2000-01-01\"\n                \n        \n        qualify\n            row_number() over (\n                partition by id_transacao\n                order by datetime_processamento_integracao desc\n            )\n            = 1\n    ),\n    transacao_ordem as (\n        select *\n        from `rj-smtr`.`bilhetagem_staging`.`aux_transacao_id_ordem_pagamento`\n        \n            where\n                 data = \"2000-01-01\"\n                \n        \n    ),\n    new_data as (\n        select\n            extract(date from data_transacao) as data,\n            extract(hour from data_transacao) as hora,\n            data_transacao as datetime_transacao,\n            data_processamento as datetime_processamento,\n            t.timestamp_captura as datetime_captura,\n            m.modo,\n            dc.id_consorcio,\n            dc.consorcio,\n            do.id_operadora,\n            do.operadora,\n            t.cd_linha as id_servico_jae,\n            -- s.servico,\n            l.nr_linha as servico_jae,\n            l.nm_linha as descricao_servico_jae,\n            sentido,\n            case\n                when m.modo = \"VLT\"\n                then substring(t.veiculo_id, 1, 3)\n                when m.modo = \"BRT\"\n                then null\n                else t.veiculo_id\n            end as id_veiculo,\n            t.numero_serie_validador as id_validador,\n            coalesce(t.id_cliente, t.pan_hash) as id_cliente,\n            id as id_transacao,\n            tp.tipo_pagamento,\n            tt.tipo_transacao,\n            g.tipo_gratuidade,\n            tipo_integracao as id_tipo_integracao,\n            null as id_integracao,\n            latitude_trx as latitude,\n            longitude_trx as longitude,\n            st_geogpoint(longitude_trx, latitude_trx) as geo_point_transacao,\n            null as stop_id,\n            null as stop_lat,\n            null as stop_lon,\n            valor_transacao\n        from transacao as t\n        left join\n            `rj-smtr`.`cadastro`.`modos` m\n            -- `rj-smtr.cadastro.modos` m\n            on t.id_tipo_modal = m.id_modo\n            and m.fonte = \"jae\"\n        left join\n            `rj-smtr`.`cadastro`.`operadoras` do\n            -- `rj-smtr.cadastro.operadoras` do\n            on t.cd_operadora = do.id_operadora_jae\n        left join\n            `rj-smtr`.`cadastro`.`consorcios` dc\n            -- `rj-smtr.cadastro.consorcios` dc\n            on t.cd_consorcio = dc.id_consorcio_jae\n        left join `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha` l on t.cd_linha = l.cd_linha\n        -- LEFT JOIN\n        -- `rj-smtr`.`cadastro`.`servicos` AS s\n        -- ON\n        -- t.cd_linha = s.id_servico_jae\n        left join tipo_transacao tt on tt.id_tipo_transacao = t.tipo_transacao\n        left join tipo_pagamento tp on t.id_tipo_midia = tp.id_tipo_pagamento\n        left join\n            gratuidade g\n            on t.tipo_transacao = \"21\"\n            and t.id_cliente = g.id_cliente\n            and t.data_transacao >= g.data_inicio_validade\n            and (t.data_transacao < g.data_fim_validade or g.data_fim_validade is null)\n        left join\n            `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_sem_ressarcimento` lsr\n            on t.cd_linha = lsr.id_linha\n        where lsr.id_linha is null and date(data_transacao) >= \"2023-07-17\"\n    ),\n    \n        transacao_atual as (\n            select *\n            from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`\n            where\n                 data = \"2000-01-01\"\n                \n        ),\n    \n    complete_partitions as (\n        select\n            data,\n            hora,\n            datetime_transacao,\n            datetime_processamento,\n            datetime_captura,\n            modo,\n            id_consorcio,\n            consorcio,\n            id_operadora,\n            operadora,\n            id_servico_jae,\n            servico_jae,\n            descricao_servico_jae,\n            sentido,\n            id_veiculo,\n            id_validador,\n            id_cliente,\n            id_transacao,\n            tipo_pagamento,\n            tipo_transacao,\n            tipo_gratuidade,\n            id_tipo_integracao,\n            id_integracao,\n            latitude,\n            longitude,\n            geo_point_transacao,\n            stop_id,\n            stop_lat,\n            stop_lon,\n            valor_transacao,\n            0 as priority\n        from new_data\n\n        \n            union all\n\n            select\n                data,\n                hora,\n                datetime_transacao,\n                datetime_processamento,\n                datetime_captura,\n                modo,\n                id_consorcio,\n                consorcio,\n                id_operadora,\n                operadora,\n                id_servico_jae,\n                servico_jae,\n                descricao_servico_jae,\n                sentido,\n                id_veiculo,\n                id_validador,\n                id_cliente,\n                id_transacao,\n                tipo_pagamento,\n                tipo_transacao,\n                tipo_gratuidade,\n                id_tipo_integracao,\n                id_integracao,\n                latitude,\n                longitude,\n                geo_point_transacao,\n                stop_id,\n                stop_lat,\n                stop_lon,\n                valor_transacao,\n                1 as priority\n            from transacao_atual\n        \n    ),\n    transacao_deduplicada as (\n        select * except (rn)\n        from\n            (\n                select\n                    *,\n                    row_number() over (\n                        partition by id_transacao\n                        order by datetime_captura desc, priority\n                    ) as rn\n                from complete_partitions\n            )\n        where rn = 1\n    ),\n    transacao_final as (\n        select\n            t.data,\n            t.hora,\n            t.datetime_transacao,\n            t.datetime_processamento,\n            t.datetime_captura,\n            t.modo,\n            t.id_consorcio,\n            t.consorcio,\n            t.id_operadora,\n            t.operadora,\n            t.id_servico_jae,\n            t.servico_jae,\n            t.descricao_servico_jae,\n            t.sentido,\n            t.id_veiculo,\n            t.id_validador,\n            t.id_cliente,\n            sha256(t.id_cliente) as hash_cliente,\n            t.id_transacao,\n            t.tipo_pagamento,\n            t.tipo_transacao,\n            case\n                when t.tipo_transacao = \"Integra\u00e7\u00e3o\" or i.id_transacao is not null\n                then \"Integra\u00e7\u00e3o\"\n                when t.tipo_transacao in (\"D\u00e9bito\", \"Botoeira\")\n                then \"Integral\"\n                else t.tipo_transacao\n            end as tipo_transacao_smtr,\n            t.tipo_gratuidade,\n            t.id_tipo_integracao,\n            t.id_integracao,\n            t.latitude,\n            t.longitude,\n            t.geo_point_transacao,\n            t.stop_id,\n            t.stop_lat,\n            t.stop_lon,\n            t.valor_transacao,\n            case\n                when\n                    i.id_transacao is not null\n                    or o.id_transacao is not null\n                    or date(t.datetime_processamento)\n                    < (select max(data_ordem) from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_dia`)\n                then coalesce(i.valor_rateio, t.valor_transacao) * 0.96\n            end as valor_pagamento,\n            o.data_ordem,\n            o.id_ordem_pagamento_servico_operador_dia,\n            o.id_ordem_pagamento_consorcio_operador_dia,\n            o.id_ordem_pagamento_consorcio_dia,\n            o.id_ordem_pagamento\n        from transacao_deduplicada t\n        left join integracao i using (id_transacao)\n        left join transacao_ordem o using (id_transacao)\n    )\n    \nselect\n    f.*,\n    '' as versao,\n    \n        case\n            when\n                a.id_transacao is null\n                or sha256(\n                    concat(\n                        \n                            ifnull(cast(f.data as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.hora as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.datetime_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.datetime_processamento as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.datetime_captura as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.modo as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_consorcio as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.consorcio as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_operadora as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.operadora as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_servico_jae as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.servico_jae as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.descricao_servico_jae as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.sentido as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_veiculo as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_validador as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_cliente as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            \n                                ifnull(to_base64(f.hash_cliente), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.tipo_pagamento as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.tipo_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.tipo_transacao_smtr as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.tipo_gratuidade as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_tipo_integracao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_integracao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.latitude as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.longitude as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            \n                                ifnull(st_astext(f.geo_point_transacao), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.stop_id as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.stop_lat as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.stop_lon as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.valor_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.valor_pagamento as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.data_ordem as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_ordem_pagamento_servico_operador_dia as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_ordem_pagamento_consorcio_operador_dia as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_ordem_pagamento_consorcio_dia as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(f.id_ordem_pagamento as string), 'n/a')\n                            \n\n                            \n\n                        \n                    )\n                ) != sha256(\n                    concat(\n                        \n                            ifnull(cast(a.data as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.hora as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.datetime_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.datetime_processamento as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.datetime_captura as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.modo as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_consorcio as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.consorcio as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_operadora as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.operadora as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_servico_jae as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.servico_jae as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.descricao_servico_jae as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.sentido as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_veiculo as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_validador as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_cliente as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            \n                                ifnull(to_base64(f.hash_cliente), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.tipo_pagamento as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.tipo_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.tipo_transacao_smtr as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.tipo_gratuidade as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_tipo_integracao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_integracao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.latitude as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.longitude as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            \n                                ifnull(st_astext(a.geo_point_transacao), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.stop_id as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.stop_lat as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.stop_lon as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.valor_transacao as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.valor_pagamento as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.data_ordem as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_ordem_pagamento_servico_operador_dia as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_ordem_pagamento_consorcio_operador_dia as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_ordem_pagamento_consorcio_dia as string), 'n/a')\n                            \n\n                            , \n\n                        \n                            ifnull(cast(a.id_ordem_pagamento as string), 'n/a')\n                            \n\n                            \n\n                        \n                    )\n                )\n            then current_datetime(\"America/Sao_Paulo\")\n            else a.datetime_ultima_atualizacao\n        end\n     as datetime_ultima_atualizacao\nfrom transacao_final f\n left join transacao_atual a using (id_transacao) ", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.753762Z", "completed_at": "2025-02-20T18:16:27.764580Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.767098Z", "completed_at": "2025-02-20T18:16:27.767113Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0170438289642334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__ordem_servico_trips_shapes_gtfs.513cbf47e5", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        feed_start_date as col_1,\n        tipo_os as col_2,\n        tipo_dia as col_3,\n        servico as col_4,\n        faixa_horaria_inicio as col_5,\n        \n        count(distinct feed_start_date) as expression\n    from\n        (select * from `rj-smtr`.`gtfs`.`ordem_servico_trips_shapes` where 1=1)\n    where\n        feed_start_date = '2024-05-03'\n    \n    \n    group by\n        1,\n        2,\n        3,\n        4,\n        5\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        feed_start_date as col_1,\n        tipo_os as col_2,\n        tipo_dia as col_3,\n        servico as col_4,\n        faixa_horaria_inicio as col_5,\n        \n        count(distinct feed_start_date) as expression\n    from\n        `rj-smtr`.`planejamento`.`ordem_servico_faixa_horaria`\n    where\n        feed_start_date = '2024-05-03' AND (quilometragem != 0 AND (partidas != 0 OR partidas IS NULL))\n    \n    \n    group by\n        1,\n        2,\n        3,\n        4,\n        5\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            coalesce(a.col_2, b.col_2) as col_2,\n            coalesce(a.col_3, b.col_3) as col_3,\n            coalesce(a.col_4, b.col_4) as col_4,\n            coalesce(a.col_5, b.col_5) as col_5,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 and\n            a.col_2 = b.col_2 and\n            a.col_3 = b.col_3 and\n            a.col_4 = b.col_4 and\n            a.col_5 = b.col_5 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.772950Z", "completed_at": "2025-02-20T18:16:27.782419Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.784140Z", "completed_at": "2025-02-20T18:16:27.784165Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013813495635986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_row_count_to_be_between__ordem_servico_trips_shapes_gtfs.c64086f7c9", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        feed_start_date as col_1,\n        tipo_dia as col_2,\n        tipo_os as col_3,\n        servico as col_4,\n        faixa_horaria_inicio as col_5,\n        shape_id as col_6,\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 2\n)\n as expression\n\n\n    from (select * from `rj-smtr`.`gtfs`.`ordem_servico_trips_shapes` where 1=1)\n    where\n        feed_start_date = '2024-05-03'\n    \n    \n    group by\n    feed_start_date,\n    tipo_dia,\n    tipo_os,\n    servico,\n    faixa_horaria_inicio,\n    shape_id\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.789623Z", "completed_at": "2025-02-20T18:16:27.797876Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.799196Z", "completed_at": "2025-02-20T18:16:27.799204Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013344049453735352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__ordem_servico_trips_shapes_gtfs.031e95e270", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        feed_start_date, tipo_dia, tipo_os, servico, sentido, faixa_horaria_inicio, shape_id\n    from (select * from `rj-smtr`.`gtfs`.`ordem_servico_trips_shapes` where feed_start_date = '2024-05-03')\n    group by feed_start_date, tipo_dia, tipo_os, servico, sentido, faixa_horaria_inicio, shape_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.803000Z", "completed_at": "2025-02-20T18:16:27.807740Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.810284Z", "completed_at": "2025-02-20T18:16:27.810291Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00964808464050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_agregado_brt", "compiled": true, "compiled_code": "\n\nWITH gps_agregado AS (\n    SELECT\n        data,\n        servico_jae AS servico,\n        id_validador,\n        latitude,\n        longitude,\n        estado_equipamento,\n        primeiro_datetime_gps,\n        ultimo_datetime_gps,\n        TIMESTAMP_DIFF(\n            ultimo_datetime_gps,\n            primeiro_datetime_gps,\n            MINUTE\n        ) + 1 AS qtde_min_entre_a_prim_e_ultima_transmissao,\n        COUNT(*) OVER (PARTITION BY servico_jae, id_validador) AS qtde_registros_gps,\n        COUNT(DISTINCT FORMAT_TIMESTAMP(\"%F %H:%M\", datetime_gps)) OVER (PARTITION BY servico_jae, id_validador) AS qtde_min_distintos_houve_transmissao,\n        SUM(\n            CASE\n                WHEN latitude != 0 AND longitude != 0 AND latitude IS NOT NULL AND longitude IS NOT NULL THEN 1\n                ELSE 0 END\n        ) OVER (PARTITION BY servico_jae, id_validador) AS qtde_registros_gps_georreferenciados,\n        ROW_NUMBER() OVER (PARTITION BY servico_jae, id_validador ORDER BY datetime_gps) AS rn\n    FROM\n        (\n            SELECT\n                *,\n                MIN(datetime_gps) OVER (PARTITION BY servico_jae, id_validador) AS primeiro_datetime_gps,\n                MAX(datetime_gps) OVER (PARTITION BY servico_jae, id_validador) AS ultimo_datetime_gps,\n                ROW_NUMBER() OVER (PARTITION BY id_transmissao_gps ORDER BY datetime_captura DESC) AS rn\n            FROM\n                `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`\n            WHERE\n                data = current_date(\"America/Sao_Paulo\")\n                AND modo = \"BRT\"\n        )\n    WHERE\n        rn = 1\n)\nSELECT\n    servico,\n    id_validador,\n    latitude,\n    longitude,\n    data,\n    estado_equipamento,\n    primeiro_datetime_gps,\n    ultimo_datetime_gps,\n    qtde_min_entre_a_prim_e_ultima_transmissao,\n    qtde_min_distintos_houve_transmissao,\n    qtde_registros_gps,\n    qtde_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_registros_gps_georreferenciados, qtde_registros_gps), 0) AS percentual_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_min_distintos_houve_transmissao, qtde_min_entre_a_prim_e_ultima_transmissao), 0) AS percentual_transmissao_a_cada_min\nFROM\n    gps_agregado\nWHERE\n    rn = 1", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_implantacao_jae`.`gps_agregado_brt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.814012Z", "completed_at": "2025-02-20T18:16:27.818817Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.820982Z", "completed_at": "2025-02-20T18:16:27.820993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009690046310424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_agregado_onibus", "compiled": true, "compiled_code": "\n\nWITH gps_agregado AS (\n    SELECT\n        data,\n        operadora,\n        id_validador,\n        latitude,\n        longitude,\n        estado_equipamento,\n        primeiro_datetime_gps,\n        ultimo_datetime_gps,\n        TIMESTAMP_DIFF(\n            ultimo_datetime_gps,\n            primeiro_datetime_gps,\n            MINUTE\n        ) + 1 AS qtde_min_entre_a_prim_e_ultima_transmissao,\n        COUNT(*) OVER (PARTITION BY operadora, id_validador) AS qtde_registros_gps,\n        COUNT(DISTINCT FORMAT_TIMESTAMP(\"%F %H:%M\", datetime_gps)) OVER (PARTITION BY operadora, id_validador) AS qtde_min_distintos_houve_transmissao,\n        SUM(\n            CASE\n                WHEN latitude != 0 AND longitude != 0 AND latitude IS NOT NULL AND longitude IS NOT NULL THEN 1\n                ELSE 0 END\n        ) OVER (PARTITION BY operadora, id_validador) AS qtde_registros_gps_georreferenciados,\n        ROW_NUMBER() OVER (PARTITION BY operadora, id_validador ORDER BY datetime_gps) AS rn\n    FROM\n        (\n            SELECT\n                *,\n                MIN(datetime_gps) OVER (PARTITION BY operadora, id_validador) AS primeiro_datetime_gps,\n                MAX(datetime_gps) OVER (PARTITION BY operadora, id_validador) AS ultimo_datetime_gps,\n                ROW_NUMBER() OVER (PARTITION BY id_transmissao_gps ORDER BY datetime_captura DESC) AS rn\n            FROM\n                `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`\n            WHERE\n                data = current_date(\"America/Sao_Paulo\")\n                AND modo = \"\u00d4nibus\"\n        )\n    WHERE\n        rn = 1\n)\nSELECT\n    operadora,\n    id_validador,\n    latitude,\n    longitude,\n    data,\n    estado_equipamento,\n    primeiro_datetime_gps,\n    ultimo_datetime_gps,\n    qtde_min_entre_a_prim_e_ultima_transmissao,\n    qtde_min_distintos_houve_transmissao,\n    qtde_registros_gps,\n    qtde_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_registros_gps_georreferenciados, qtde_registros_gps), 0) AS percentual_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_min_distintos_houve_transmissao, qtde_min_entre_a_prim_e_ultima_transmissao), 0) AS percentual_transmissao_a_cada_min\nFROM\n    gps_agregado\nWHERE\n    rn = 1", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_implantacao_jae`.`gps_agregado_onibus`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.826173Z", "completed_at": "2025-02-20T18:16:27.832684Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.833937Z", "completed_at": "2025-02-20T18:16:27.833944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010755538940429688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_agregado_vlt", "compiled": true, "compiled_code": "\n\nWITH gps_agregado AS (\n    SELECT\n        data,\n        servico_jae AS servico,\n        id_validador,\n        latitude,\n        longitude,\n        estado_equipamento,\n        primeiro_datetime_gps,\n        ultimo_datetime_gps,\n        TIMESTAMP_DIFF(\n            ultimo_datetime_gps,\n            primeiro_datetime_gps,\n            MINUTE\n        ) + 1 AS qtde_min_entre_a_prim_e_ultima_transmissao,\n        COUNT(*) OVER (PARTITION BY servico_jae, id_validador) AS qtde_registros_gps,\n        COUNT(DISTINCT FORMAT_TIMESTAMP(\"%F %H:%M\", datetime_gps)) OVER (PARTITION BY servico_jae, id_validador) AS qtde_min_distintos_houve_transmissao,\n        SUM(\n            CASE\n                WHEN latitude != 0 AND longitude != 0 AND latitude IS NOT NULL AND longitude IS NOT NULL THEN 1\n                ELSE 0 END\n        ) OVER (PARTITION BY servico_jae, id_validador) AS qtde_registros_gps_georreferenciados,\n        ROW_NUMBER() OVER (PARTITION BY servico_jae, id_validador ORDER BY datetime_gps) AS rn\n    FROM\n        (\n            SELECT\n                *,\n                MIN(datetime_gps) OVER (PARTITION BY servico_jae, id_validador) AS primeiro_datetime_gps,\n                MAX(datetime_gps) OVER (PARTITION BY servico_jae, id_validador) AS ultimo_datetime_gps,\n                ROW_NUMBER() OVER (PARTITION BY id_transmissao_gps ORDER BY datetime_captura DESC) AS rn\n            FROM\n                `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`\n            WHERE\n                data = current_date(\"America/Sao_Paulo\")\n                AND modo = \"VLT\"\n        )\n    WHERE\n        rn = 1\n)\nSELECT\n    servico,\n    id_validador,\n    latitude,\n    longitude,\n    data,\n    estado_equipamento,\n    primeiro_datetime_gps,\n    ultimo_datetime_gps,\n    qtde_min_entre_a_prim_e_ultima_transmissao,\n    qtde_min_distintos_houve_transmissao,\n    qtde_registros_gps,\n    qtde_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_registros_gps_georreferenciados, qtde_registros_gps), 0) AS percentual_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_min_distintos_houve_transmissao, qtde_min_entre_a_prim_e_ultima_transmissao), 0) AS percentual_transmissao_a_cada_min\nFROM\n    gps_agregado\nWHERE\n    rn = 1", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_implantacao_jae`.`gps_agregado_vlt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.837687Z", "completed_at": "2025-02-20T18:16:27.868441Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.869787Z", "completed_at": "2025-02-20T18:16:27.869796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.034568071365356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.veiculo_indicadores_dia", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__sppo_licenciamento as (\n\n\nSELECT\n  *\nFROM\n  `rj-smtr`.`veiculo`.`licenciamento`\nWHERE\n  tipo_veiculo NOT LIKE \"%ROD%\"\n  and modo = 'ONIBUS'\n), gps_sppo AS (\n  SELECT\n    data,\n    SUBSTR(id_veiculo, 2) AS id_veiculo,\n    COUNT(DISTINCT timestamp_gps) AS quantidade_gps_sppo\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_veiculos`.`gps_sppo`\n  WHERE\n    DATA = DATE_SUB(DATE('2022-01-01T01:00:00'), INTERVAL 1 DAY)\n  GROUP BY\n    1,\n    2\n),\nplanilha_ronald AS (\n  SELECT DISTINCT\n    TRIM(numero_ordem_veiculo) AS numero_ordem_veiculo,\n    TRIM(numero_serie_validador) AS id_validador,\n    empresa\n  FROM\n    `rj-smtr-staging`.`dashboard_controle_vinculo_jae_riocard_staging`.`relatorio_instalacao_jae`\n  WHERE\n    LENGTH(numero_ordem_veiculo) = 5\n    AND numero_ordem_veiculo != '99999'\n),\ngps_sppo_planilha AS (\n  SELECT\n    COALESCE(g.data, DATE_SUB(DATE('2022-01-01T01:00:00'), INTERVAL 1 DAY)) AS data,\n    COALESCE(g.id_veiculo, TRIM(r.numero_ordem_veiculo)) AS id_veiculo,\n    COALESCE(g.quantidade_gps_sppo, 0) AS quantidade_gps_sppo,\n    TRIM(r.id_validador) AS id_validador,\n    r.empresa,\n    g.id_veiculo IS NOT NULL AS indicador_veiculo_gps_sppo,\n    r.numero_ordem_veiculo IS NOT NULL AS indicador_veiculo_controle_ronald\n  FROM\n    gps_sppo g\n  FULL OUTER JOIN\n    planilha_ronald r\n  ON\n    g.id_veiculo = TRIM(r.numero_ordem_veiculo)\n),\nsppo_licenciamento AS (\n  SELECT DISTINCT\n    SUBSTR(id_veiculo, 2) AS id_veiculo\n  FROM\n    __dbt__cte__sppo_licenciamento\n  WHERE\n    data = \"2024-03-25\"\n),\ngps_sppo_licenciamento AS (\n  SELECT\n    COALESCE(g.data, DATE_SUB(DATE('2022-01-01T01:00:00'), INTERVAL 1 DAY)) AS data,\n    COALESCE(g.id_veiculo, l.id_veiculo) AS id_veiculo,\n    COALESCE(g.quantidade_gps_sppo, 0) AS quantidade_gps_sppo,\n    g.id_validador,\n    g.empresa,\n    l.id_veiculo IS NOT NULL AS indicador_veiculo_licenciamento,\n    COALESCE(g.indicador_veiculo_gps_sppo, FALSE) AS indicador_veiculo_gps_sppo,\n    COALESCE(g.indicador_veiculo_controle_ronald, FALSE) AS indicador_veiculo_controle_ronald\n  FROM\n    gps_sppo_planilha g\n  FULL OUTER JOIN\n    sppo_licenciamento l\n  ON\n    l.id_veiculo = g.id_veiculo\n),\ngps_validador AS (\n  SELECT\n    data,\n    id_validador,\n    COUNT(DISTINCT id_transmissao_gps) AS quantidade_gps_validador\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`\n  WHERE\n    data = DATE_SUB(DATE('2022-01-01T01:00:00'), INTERVAL 1 DAY)\n  GROUP BY\n    1,\n    2\n),\ntransacao_riocard AS (\n  SELECT DISTINCT\n    data,\n    id_transacao,\n    id_validador\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`\n  WHERE\n    data = DATE_SUB(DATE('2022-01-01T01:00:00'), INTERVAL 1 DAY)\n),\ntransacao_agg AS (\n  SELECT\n    data,\n    id_validador,\n    COUNT(*) AS quantidade_transacao\n  FROM\n    transacao_riocard\n  GROUP BY\n    1,\n    2\n)\nSELECT\n  gs.data,\n  gs.id_veiculo,\n  gs.empresa,\n  gs.id_validador AS numero_serie_validador,\n  gs.indicador_veiculo_licenciamento,\n  gs.indicador_veiculo_gps_sppo,\n  gs.indicador_veiculo_controle_ronald,\n  gv.id_validador IS NOT NULL AS indicador_validador_ativo,\n  IFNULL(t.quantidade_transacao, 0) AS quantidade_transacao_riocard,\n  IFNULL(quantidade_gps_sppo, 0) AS quantidade_gps_sppo,\n  IFNULL(quantidade_gps_validador, 0) AS quantidade_gps_validador,\n  SAFE_DIVIDE(quantidade_gps_validador, quantidade_gps_sppo) AS percentual_gps_validador_sppo\nFROM\n  gps_sppo_licenciamento gs\nLEFT JOIN\n  gps_validador gv\nON\n  gs.id_validador = gv.id_validador\n  AND gs.data = gv.data\nLEFT JOIN\n  transacao_agg t\nON\n  gs.id_validador = t.id_validador\n  AND gs.data = t.data", "relation_name": "`rj-smtr`.`dashboard_controle_vinculo_jae_riocard`.`veiculo_indicadores_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.874172Z", "completed_at": "2025-02-20T18:16:27.878439Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.879755Z", "completed_at": "2025-02-20T18:16:27.879763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008156538009643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_agregado_van", "compiled": true, "compiled_code": "\n\nWITH gps_agregado AS (\n    SELECT\n        data,\n        id_operadora,\n        id_validador,\n        estado_equipamento,\n        primeiro_datetime_gps,\n        ultimo_datetime_gps,\n        TIMESTAMP_DIFF(\n            ultimo_datetime_gps,\n            primeiro_datetime_gps,\n            MINUTE\n        ) + 1 AS qtde_min_entre_a_prim_e_ultima_transmissao,\n        COUNT(*) OVER (PARTITION BY id_operadora, id_validador) AS qtde_registros_gps,\n        COUNT(DISTINCT FORMAT_TIMESTAMP(\"%F %H:%M\", datetime_gps)) OVER (PARTITION BY id_operadora, id_validador) AS qtde_min_distintos_houve_transmissao,\n        SUM(\n            CASE\n                WHEN latitude != 0 AND longitude != 0 AND latitude IS NOT NULL AND longitude IS NOT NULL THEN 1\n                ELSE 0 END\n        ) OVER (PARTITION BY id_operadora, id_validador) AS qtde_registros_gps_georreferenciados,\n        ROW_NUMBER() OVER (PARTITION BY id_operadora, id_validador ORDER BY datetime_gps) AS rn\n    FROM\n        (\n            SELECT\n                *,\n                MIN(datetime_gps) OVER (PARTITION BY id_operadora, id_validador) AS primeiro_datetime_gps,\n                MAX(datetime_gps) OVER (PARTITION BY id_operadora, id_validador) AS ultimo_datetime_gps,\n                ROW_NUMBER() OVER (PARTITION BY id_transmissao_gps ORDER BY datetime_captura DESC) AS rn\n            FROM\n                `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador_van`\n            WHERE\n                data = current_date(\"America/Sao_Paulo\")\n        )\n    WHERE\n        rn = 1\n)\nSELECT\n    id_operadora,\n    id_validador,\n    data,\n    estado_equipamento,\n    primeiro_datetime_gps,\n    ultimo_datetime_gps,\n    qtde_min_entre_a_prim_e_ultima_transmissao,\n    qtde_min_distintos_houve_transmissao,\n    qtde_registros_gps,\n    qtde_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_registros_gps_georreferenciados, qtde_registros_gps), 0) AS percentual_registros_gps_georreferenciados,\n    IFNULL(SAFE_DIVIDE(qtde_min_distintos_houve_transmissao, qtde_min_entre_a_prim_e_ultima_transmissao), 0) AS percentual_transmissao_a_cada_min\nFROM\n    gps_agregado\nWHERE\n    rn = 1", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_implantacao_jae`.`gps_agregado_van`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.883604Z", "completed_at": "2025-02-20T18:16:27.890156Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.891686Z", "completed_at": "2025-02-20T18:16:27.891696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010625839233398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_viagem_inicio_fim", "compiled": true, "compiled_code": "-- 1. Cria colunas identificadoras de in\u00edcio (starts) e fim (ends) de viagens\nwith aux_status as (\n    select\n        *,\n        string_agg(status_viagem,\"\") over (\n            partition by id_veiculo, shape_id\n            order by id_veiculo, shape_id, timestamp_gps\n            rows between current row and 1 following) = 'startmiddle' starts,\n        string_agg(status_viagem,\"\") over (\n            partition by id_veiculo, shape_id\n            order by id_veiculo, shape_id, timestamp_gps\n            rows between 1 preceding and current row) = 'middleend' ends\n    from\n        `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto`\n),\n-- 2. Classifica in\u00edcio-fim consecutivos como partida-chegada da viagem\naux_inicio_fim AS (\n    select\n        *,\n        case\n            when\n            string_agg(status_viagem,\"\") over (\n                partition by id_veiculo, shape_id\n                order by id_veiculo, shape_id, timestamp_gps\n                rows between CURRENT row and 1 following) = 'startend'\n            then timestamp_gps\n        end datetime_partida,\n        case\n            when string_agg(status_viagem,\"\") over (\n                partition by id_veiculo, shape_id\n                order by id_veiculo, shape_id, timestamp_gps\n                rows between 1 preceding and CURRENT row) = 'startend'\n            then timestamp_gps\n        end datetime_chegada\n    from\n        aux_status\n    where\n        starts = true OR ends = true\n),\n-- 3. Junta partida-chegada da viagem na mesma linha\ninicio_fim AS (\n    select\n        * except(datetime_chegada, posicao_veiculo_geo),\n        posicao_veiculo_geo as posicao_partida,\n        lead(datetime_chegada) over(\n            partition by id_veiculo, shape_id\n            order by id_veiculo, shape_id, timestamp_gps\n        ) as datetime_chegada,\n        lead(posicao_veiculo_geo) over(\n            partition by id_veiculo, shape_id\n            order by id_veiculo, shape_id, timestamp_gps\n        ) as posicao_chegada,\n    from aux_inicio_fim\n)\n-- 4. Filtra colunas e cria campo identificador da viagem (id_viagem)\nselect distinct\n    concat(id_veiculo, \"-\", servico_realizado ,\"-\", sentido, \"-\", shape_id_planejado, \"-\", FORMAT_DATETIME(\"%Y%m%d%H%M%S\", datetime_partida)) as id_viagem,\n    data,\n    id_empresa,\n    id_veiculo,\n    servico_informado, -- no momento da partida\n    servico_realizado,\n    trip_id,\n    shape_id,\n    sentido_shape,\n    round((st_distance(start_pt, posicao_partida) + st_distance(end_pt, posicao_chegada))/1000, 3) as distancia_inicio_fim,\n    distancia_planejada,\n    shape_id_planejado,\n    trip_id_planejado,\n    sentido,\n    datetime_partida,\n    datetime_chegada,\n    '' as versao_modelo\nfrom\n    inicio_fim\nwhere\n    datetime_partida is not null\n    ", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.895850Z", "completed_at": "2025-02-20T18:16:27.901254Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.902632Z", "completed_at": "2025-02-20T18:16:27.902639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00937962532043457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_aux_registros_status_trajeto_sentido__I__V__C.2082fbe17f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.906538Z", "completed_at": "2025-02-20T18:16:27.911586Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.912852Z", "completed_at": "2025-02-20T18:16:27.912860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008750438690185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_aux_registros_status_trajeto_sentido_shape__I__V__C.5b82f18cbf", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido_shape as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido_shape\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.916713Z", "completed_at": "2025-02-20T18:16:27.921407Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.922724Z", "completed_at": "2025-02-20T18:16:27.922732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009771108627319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_negative_aux_registros_status_trajeto_distancia.b4cb13122d", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia < 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.927973Z", "completed_at": "2025-02-20T18:16:27.932834Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.934144Z", "completed_at": "2025-02-20T18:16:27.934151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008606195449829102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_data.652ad0c445", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.938010Z", "completed_at": "2025-02-20T18:16:27.943147Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.944401Z", "completed_at": "2025-02-20T18:16:27.944408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008810997009277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_distancia.703c10aaaf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.948236Z", "completed_at": "2025-02-20T18:16:27.953239Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.954561Z", "completed_at": "2025-02-20T18:16:27.954567Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008754730224609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_distancia_planejada.39e1e1d472", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.958604Z", "completed_at": "2025-02-20T18:16:27.964805Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.966075Z", "completed_at": "2025-02-20T18:16:27.966084Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010171175003051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_id_veiculo.101e6b5227", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.970339Z", "completed_at": "2025-02-20T18:16:27.975499Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.976816Z", "completed_at": "2025-02-20T18:16:27.976824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009010076522827148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_posicao_veiculo_geo.33c0d51e40", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect posicao_veiculo_geo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere posicao_veiculo_geo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.980778Z", "completed_at": "2025-02-20T18:16:27.985778Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.987094Z", "completed_at": "2025-02-20T18:16:27.987102Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008755683898925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_sentido.6291e69d70", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:27.991161Z", "completed_at": "2025-02-20T18:16:27.996074Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:27.997359Z", "completed_at": "2025-02-20T18:16:27.997366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008812665939331055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_sentido_shape.a14a95f5e8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.001206Z", "completed_at": "2025-02-20T18:16:28.008167Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.009713Z", "completed_at": "2025-02-20T18:16:28.009723Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011005878448486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_servico_informado.11333dadfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_informado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_informado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.013705Z", "completed_at": "2025-02-20T18:16:28.018934Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.020243Z", "completed_at": "2025-02-20T18:16:28.020251Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008990287780761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_shape_id.586a1a0d47", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.024164Z", "completed_at": "2025-02-20T18:16:28.029254Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.030561Z", "completed_at": "2025-02-20T18:16:28.030568Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008872509002685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_status_viagem.24b7f26346", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere status_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.034470Z", "completed_at": "2025-02-20T18:16:28.039445Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.040730Z", "completed_at": "2025-02-20T18:16:28.040737Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008669614791870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_timestamp_gps.703590c517", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp_gps\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere timestamp_gps is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.044637Z", "completed_at": "2025-02-20T18:16:28.050738Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.052077Z", "completed_at": "2025-02-20T18:16:28.052085Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00990915298461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_timestamp_minuto_gps.d2799a61bf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp_minuto_gps\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere timestamp_minuto_gps is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.055964Z", "completed_at": "2025-02-20T18:16:28.061237Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.062739Z", "completed_at": "2025-02-20T18:16:28.062747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009278297424316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_registros_status_trajeto_versao_modelo.22de27b835", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.066713Z", "completed_at": "2025-02-20T18:16:28.071804Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.073160Z", "completed_at": "2025-02-20T18:16:28.073168Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009003400802612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__data_id_veiculo__sppo_veiculo_dia.a12193cf8f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data, id_veiculo\n    from (select * from `rj-smtr`.`veiculo`.`sppo_veiculo_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by data, id_veiculo\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.077269Z", "completed_at": "2025-02-20T18:16:28.082414Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:28.083739Z", "completed_at": "2025-02-20T18:16:28.083748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008962154388427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__status__sppo_veiculo_dia.fd7da0fefd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom (select * from `rj-smtr`.`veiculo`.`sppo_veiculo_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere status is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:28.087714Z", "completed_at": "2025-02-20T18:16:29.849654Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:29.855836Z", "completed_at": "2025-02-20T18:16:29.855874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7742955684661865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.gps_segmento_viagem", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n        \n\n        \n    \n\n\nwith\n    calendario as (\n        select *\n        from `rj-smtr`.`planejamento`.`calendario`\n        \n            where\n                data between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        \n    ),\n    gps_viagem as (\n        select\n            data,\n            gv.id_viagem,\n            gv.shape_id,\n            gv.geo_point_gps,\n            gv.servico_viagem,\n            gv.servico_gps,\n            c.feed_version,\n            c.feed_start_date\n        from `rj-smtr`.`monitoramento_staging`.`gps_viagem` gv\n        join calendario c using (data)\n         where \n    data between\n        date('2022-01-01T00:00:00')\n        and date('2022-01-01T01:00:00')\n \n    ),\n    segmento as (\n        select\n            feed_version,\n            feed_start_date,\n            feed_end_date,\n            shape_id,\n            id_segmento,\n            buffer,\n            indicador_segmento_desconsiderado\n        from `rj-smtr`.`planejamento`.`segmento_shape`\n        \n        \n            where feed_start_date in ()\n        \n    ),\n    servico_divergente as (\n        select\n            id_viagem,\n            max(servico_viagem != servico_gps) as indicador_servico_divergente\n        from gps_viagem\n        group by 1\n    ),\n    gps_servico_segmento as (\n        select g.id_viagem, g.shape_id, s.id_segmento, count(*) as quantidade_gps\n        from gps_viagem g\n        join\n            segmento s\n            on g.feed_version = s.feed_version\n            and g.shape_id = s.shape_id\n            and st_intersects(s.buffer, g.geo_point_gps)\n        where g.servico_gps = g.servico_viagem\n        group by all\n    ),\n    gps_segmento as (\n        select id_viagem, g.shape_id, g.id_segmento, g.quantidade_gps,\n        from gps_servico_segmento g\n    ),\n    viagem as (\n        select\n            data,\n            v.id_viagem,\n            v.datetime_partida,\n            v.datetime_chegada,\n            v.modo,\n            v.id_veiculo,\n            v.trip_id,\n            v.route_id,\n            v.shape_id,\n            v.servico,\n            v.sentido,\n            c.service_ids,\n            c.tipo_dia,\n            c.feed_start_date,\n            c.feed_version\n        from `rj-smtr`.`monitoramento`.`viagem_informada` v\n        join calendario c using (data)\n         where \n    data between\n        date('2022-01-01T00:00:00')\n        and date('2022-01-01T01:00:00')\n \n    ),\n    viagem_segmento as (\n        select\n            v.data,\n            v.id_viagem,\n            v.datetime_partida,\n            v.datetime_chegada,\n            v.modo,\n            v.id_veiculo,\n            v.trip_id,\n            v.route_id,\n            v.shape_id,\n            s.id_segmento,\n            s.indicador_segmento_desconsiderado,\n            v.servico,\n            v.sentido,\n            v.service_ids,\n            v.tipo_dia,\n            v.feed_version,\n            v.feed_start_date\n        from viagem v\n        left join segmento s using (shape_id, feed_version, feed_start_date)\n    )\nselect\n    v.data,\n    id_viagem,\n    v.datetime_partida,\n    v.datetime_chegada,\n    v.modo,\n    v.id_veiculo,\n    v.trip_id,\n    v.route_id,\n    shape_id,\n    id_segmento,\n    v.servico,\n    v.sentido,\n    ifnull(g.quantidade_gps, 0) as quantidade_gps,\n    v.indicador_segmento_desconsiderado,\n    s.indicador_servico_divergente,\n    v.feed_version,\n    v.feed_start_date,\n    v.service_ids,\n    v.tipo_dia,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom viagem_segmento v\nleft join gps_segmento g using (id_viagem, shape_id, id_segmento)\nleft join servico_divergente s using (id_viagem)\n", "relation_name": "`rj-smtr`.`monitoramento_staging`.`gps_segmento_viagem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:29.888868Z", "completed_at": "2025-02-20T18:16:32.220419Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:32.230110Z", "completed_at": "2025-02-20T18:16:32.230155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.349442958831787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.integracao_nao_realizada", "compiled": true, "compiled_code": "\n\n\n\n    \n\n        \n\n        \n        \n\n        \n        \n    \n\n\n  -- N\u00famero m\u00e1ximo de pernas em uma integra\u00e7\u00e3o\n\n\n\nwith\n    matriz as (\n        select\n            data_inicio_matriz,\n            data_fim_matriz,\n            array_agg(array_to_string(sequencia_completa_modo, ',')) as sequencia_valida\n        from `rj-smtr`.`planejamento`.`matriz_integracao`\n        -- `rj-smtr.br_rj_riodejaneiro_bilhetagem.matriz_integracao`\n        group by data_inicio_matriz, data_fim_matriz\n    ),\n    transacao as (\n        select\n            t.id_cliente,\n            \n                 datetime_transacao,\n                \n            \n                 id_transacao,\n                \n            \n                \n                    case\n                        when t.modo = 'Van'\n                        then t.consorcio\n                        when t.modo = '\u00d4nibus'\n                        then 'SPPO'\n                        else t.modo\n                    end as modo,\n                \n            \n                \n                    concat(t.id_servico_jae, '_', t.sentido) as servico_sentido,\n                \n            \n            m.data_inicio_matriz,\n            m.sequencia_valida\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao` t\n        \n        join\n            matriz m\n            on t.data >= m.data_inicio_matriz\n            and (t.data <= m.data_fim_matriz or m.data_fim_matriz is null)\n        where\n            t.data < current_date(\"America/Sao_Paulo\")\n            and t.tipo_transacao != \"Gratuidade\"\n            and t.id_cliente is not null\n            and t.id_cliente != '733'\n             and (\n  \n    data = \"2000-01-01\"\n  \n) \n    ),\n    transacao_agrupada as (\n        select\n            id_cliente,\n            -- Cria o conjunto de colunas para a transa\u00e7\u00e3o atual e as 4 pr\u00f3ximas\n            -- transa\u00e7\u00f5es do cliente\n            \n                \n                    \n                        datetime_transacao as datetime_transacao_0,\n                    \n                \n                    \n                        lead(datetime_transacao, 1) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as datetime_transacao_1,\n                    \n                \n                    \n                        lead(datetime_transacao, 2) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as datetime_transacao_2,\n                    \n                \n                    \n                        lead(datetime_transacao, 3) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as datetime_transacao_3,\n                    \n                \n                    \n                        lead(datetime_transacao, 4) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as datetime_transacao_4,\n                    \n                \n            \n                \n                    \n                        id_transacao as id_transacao_0,\n                    \n                \n                    \n                        lead(id_transacao, 1) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as id_transacao_1,\n                    \n                \n                    \n                        lead(id_transacao, 2) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as id_transacao_2,\n                    \n                \n                    \n                        lead(id_transacao, 3) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as id_transacao_3,\n                    \n                \n                    \n                        lead(id_transacao, 4) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as id_transacao_4,\n                    \n                \n            \n                \n                    \n                        modo as modo_0,\n                    \n                \n                    \n                        lead(modo, 1) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as modo_1,\n                    \n                \n                    \n                        lead(modo, 2) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as modo_2,\n                    \n                \n                    \n                        lead(modo, 3) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as modo_3,\n                    \n                \n                    \n                        lead(modo, 4) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as modo_4,\n                    \n                \n            \n                \n                    \n                        servico_sentido as servico_sentido_0,\n                    \n                \n                    \n                        lead(servico_sentido, 1) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as servico_sentido_1,\n                    \n                \n                    \n                        lead(servico_sentido, 2) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as servico_sentido_2,\n                    \n                \n                    \n                        lead(servico_sentido, 3) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as servico_sentido_3,\n                    \n                \n                    \n                        lead(servico_sentido, 4) over (\n                            partition by id_cliente order by datetime_transacao\n                        ) as servico_sentido_4,\n                    \n                \n            \n            data_inicio_matriz,\n            sequencia_valida\n        from transacao\n    ),\n    integracao_possivel as (\n        select\n            *,\n            \n            \n            \n                \n                (\n                    datetime_diff(\n                        datetime_transacao_1,\n                        datetime_transacao_0,\n                        minute\n                    )\n                    <= 180\n                    and concat(modo_0, ',', modo_1)\n                    in unnest(sequencia_valida)\n                    \n                        and servico_sentido_1\n                        != servico_sentido_0\n                    \n                ) as indicador_integracao_1,\n                \n\n            \n                \n                (\n                    datetime_diff(\n                        datetime_transacao_2,\n                        datetime_transacao_0,\n                        minute\n                    )\n                    <= 180\n                    and concat(modo_0, ',', modo_1, ',', modo_2)\n                    in unnest(sequencia_valida)\n                    \n                        and servico_sentido_2\n                        not in (servico_sentido_0, ',', servico_sentido_1)\n                    \n                ) as indicador_integracao_2,\n                \n\n            \n                \n                (\n                    datetime_diff(\n                        datetime_transacao_3,\n                        datetime_transacao_0,\n                        minute\n                    )\n                    <= 180\n                    and concat(modo_0, ',', modo_1, ',', modo_2, ',', modo_3)\n                    in unnest(sequencia_valida)\n                    \n                        and servico_sentido_3\n                        not in (servico_sentido_0, ',', servico_sentido_1, ',', servico_sentido_2)\n                    \n                ) as indicador_integracao_3,\n                \n\n            \n                \n                (\n                    datetime_diff(\n                        datetime_transacao_4,\n                        datetime_transacao_0,\n                        minute\n                    )\n                    <= 180\n                    and concat(modo_0, ',', modo_1, ',', modo_2, ',', modo_3, ',', modo_4)\n                    in unnest(sequencia_valida)\n                    \n                        and servico_sentido_4\n                        not in (servico_sentido_0, ',', servico_sentido_1, ',', servico_sentido_2, ',', servico_sentido_3)\n                    \n                ) as indicador_integracao_4,\n                \n\n            \n        from transacao_agrupada\n        where id_transacao_1 is not null\n    ),\n    transacao_filtrada as (\n        select\n            id_cliente,\n            \n                \n                    \n                        datetime_transacao_0,\n                    \n                \n                    \n                        datetime_transacao_1,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_2\n                            then datetime_transacao_2\n                        end as datetime_transacao_2,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_3\n                            then datetime_transacao_3\n                        end as datetime_transacao_3,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_4\n                            then datetime_transacao_4\n                        end as datetime_transacao_4,\n                    \n                \n            \n                \n                    \n                        id_transacao_0,\n                    \n                \n                    \n                        id_transacao_1,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_2\n                            then id_transacao_2\n                        end as id_transacao_2,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_3\n                            then id_transacao_3\n                        end as id_transacao_3,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_4\n                            then id_transacao_4\n                        end as id_transacao_4,\n                    \n                \n            \n                \n                    \n                        modo_0,\n                    \n                \n                    \n                        modo_1,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_2\n                            then modo_2\n                        end as modo_2,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_3\n                            then modo_3\n                        end as modo_3,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_4\n                            then modo_4\n                        end as modo_4,\n                    \n                \n            \n                \n                    \n                        servico_sentido_0,\n                    \n                \n                    \n                        servico_sentido_1,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_2\n                            then servico_sentido_2\n                        end as servico_sentido_2,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_3\n                            then servico_sentido_3\n                        end as servico_sentido_3,\n                    \n                \n                    \n                        case\n                            when indicador_integracao_4\n                            then servico_sentido_4\n                        end as servico_sentido_4,\n                    \n                \n            \n            indicador_integracao_1,\n            indicador_integracao_2,\n            indicador_integracao_3,\n            indicador_integracao_4,\n            data_inicio_matriz\n        from integracao_possivel\n        where indicador_integracao_1\n    ),\n    transacao_listada as (\n        select\n            *,\n            array_to_string(\n                [\n                    \n                        id_transacao_1 ,\n                    \n                        id_transacao_2 ,\n                    \n                        id_transacao_3 ,\n                    \n                        id_transacao_4 \n                    \n                ],\n                \", \"\n            ) as transacoes\n        from transacao_filtrada\n    ),\n    \n        validacao_integracao_5_pernas as (\n            select\n                (\n                    id_transacao_4 is not null\n                    \n                    and id_transacao_0 in unnest(\n                        split(\n                            string_agg(transacoes, \", \") over (\n                                partition by id_cliente\n                                order by datetime_transacao_0\n                                rows between 5 preceding and 1 preceding\n                            ),\n                            ', '\n                        )\n                    )\n                ) as remover_5,\n                *\n            from  transacao_listada\n            \n        ),\n    \n        validacao_integracao_4_pernas as (\n            select\n                (\n                    id_transacao_3 is not null\n                    \n                        and id_transacao_4 is null\n                    \n                    and id_transacao_0 in unnest(\n                        split(\n                            string_agg(transacoes, \", \") over (\n                                partition by id_cliente\n                                order by datetime_transacao_0\n                                rows between 5 preceding and 1 preceding\n                            ),\n                            ', '\n                        )\n                    )\n                ) as remover_4,\n                *\n            from \n                    validacao_integracao_5_pernas\n                where not remover_5\n            \n        ),\n    \n        validacao_integracao_3_pernas as (\n            select\n                (\n                    id_transacao_2 is not null\n                    \n                        and id_transacao_3 is null\n                    \n                    and id_transacao_0 in unnest(\n                        split(\n                            string_agg(transacoes, \", \") over (\n                                partition by id_cliente\n                                order by datetime_transacao_0\n                                rows between 5 preceding and 1 preceding\n                            ),\n                            ', '\n                        )\n                    )\n                ) as remover_3,\n                *\n            from \n                    validacao_integracao_4_pernas\n                where not remover_4\n            \n        ),\n    \n        validacao_integracao_2_pernas as (\n            select\n                (\n                    id_transacao_1 is not null\n                    \n                        and id_transacao_2 is null\n                    \n                    and id_transacao_0 in unnest(\n                        split(\n                            string_agg(transacoes, \", \") over (\n                                partition by id_cliente\n                                order by datetime_transacao_0\n                                rows between 5 preceding and 1 preceding\n                            ),\n                            ', '\n                        )\n                    )\n                ) as remover_2,\n                *\n            from \n                    validacao_integracao_3_pernas\n                where not remover_3\n            \n        ),\n    \n    integracoes_validas as (\n        select date(datetime_transacao_0) as data, id_transacao_0 as id_integracao, *\n        from validacao_integracao_2_pernas\n        where not remover_2\n    ),\n    melted as (\n        select\n            data,\n            id_integracao,\n            sequencia_integracao,\n            datetime_transacao,\n            id_transacao,\n            modo,\n            split(servico_sentido, '_')[0] as id_servico_jae,\n            split(servico_sentido, '_')[1] as sentido,\n            countif(modo = \"BRT\") over (partition by id_integracao)\n            > 1 as indicador_transferencia_brt,\n            countif(modo = \"VLT\") over (partition by id_integracao)\n            > 1 as indicador_transferencia_vlt,\n            data_inicio_matriz\n        from\n            integracoes_validas,\n            unnest(\n                [\n                    \n                        struct(\n                            \n                                datetime_transacao_0 as datetime_transacao,\n                            \n                                id_transacao_0 as id_transacao,\n                            \n                                modo_0 as modo,\n                            \n                                servico_sentido_0 as servico_sentido,\n                            \n                            1 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                datetime_transacao_1 as datetime_transacao,\n                            \n                                id_transacao_1 as id_transacao,\n                            \n                                modo_1 as modo,\n                            \n                                servico_sentido_1 as servico_sentido,\n                            \n                            2 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                datetime_transacao_2 as datetime_transacao,\n                            \n                                id_transacao_2 as id_transacao,\n                            \n                                modo_2 as modo,\n                            \n                                servico_sentido_2 as servico_sentido,\n                            \n                            3 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                datetime_transacao_3 as datetime_transacao,\n                            \n                                id_transacao_3 as id_transacao,\n                            \n                                modo_3 as modo,\n                            \n                                servico_sentido_3 as servico_sentido,\n                            \n                            4 as sequencia_integracao\n                        )\n                        ,\n                    \n                        struct(\n                            \n                                datetime_transacao_4 as datetime_transacao,\n                            \n                                id_transacao_4 as id_transacao,\n                            \n                                modo_4 as modo,\n                            \n                                servico_sentido_4 as servico_sentido,\n                            \n                            5 as sequencia_integracao\n                        )\n                        \n                    \n                ]\n            )\n    ),\n    integracao_nao_realizada as (\n        select distinct id_integracao\n        from melted\n        where\n            not indicador_transferencia_brt\n            and not indicador_transferencia_vlt\n            and id_transacao not in (\n                select id_transacao\n                from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao`\n                -- `rj-smtr.br_rj_riodejaneiro_bilhetagem.integracao`\n                \n                    where \n  \n    data = \"2000-01-01\"\n  \n\n                \n            )\n    )\nselect\n    * except (indicador_transferencia_brt, indicador_transferencia_vlt),\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom melted\nwhere\n    id_integracao in (select id_integracao from integracao_nao_realizada)\n    and id_transacao is not null", "relation_name": "`rj-smtr`.`validacao_dados_jae`.`integracao_nao_realizada`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:32.244578Z", "completed_at": "2025-02-20T18:16:34.193149Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.198919Z", "completed_at": "2025-02-20T18:16:34.198955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9620811939239502, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.transacao_invalida", "compiled": true, "compiled_code": "\n\n\n  \n\n    \n\n    \n    \n\n    \n    \n  \n\n\nWITH transacao AS (\n  SELECT\n    t.data,\n    t.hora,\n    t.datetime_transacao,\n    t.datetime_processamento,\n    t.datetime_captura,\n    t.modo,\n    t.id_consorcio,\n    t.consorcio,\n    t.id_operadora,\n    t.operadora,\n    t.id_servico_jae,\n    t.servico_jae,\n    t.descricao_servico_jae,\n    t.id_transacao,\n    t.longitude,\n    t.latitude,\n    IFNULL(t.longitude, 0) AS longitude_tratada,\n    IFNULL(t.latitude, 0) AS latitude_tratada,\n    s.longitude AS longitude_servico,\n    s.latitude AS latitude_servico,\n    s.id_servico_gtfs,\n    s.id_servico_jae AS id_servico_jae_cadastro\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao` t\n  LEFT JOIN\n    `rj-smtr`.`cadastro`.`servicos` s\n  ON\n    t.id_servico_jae = s.id_servico_jae\n    AND t.data >= s.data_inicio_vigencia AND (t.data <= s.data_fim_vigencia OR s.data_fim_vigencia IS NULL)\n    \n      WHERE\n      \n        data = \"2000-01-01\"\n      \n    \n),\nindicadores AS (\n  SELECT\n    * EXCEPT(id_servico_gtfs, latitude_tratada, longitude_tratada, id_servico_jae_cadastro),\n    latitude_tratada = 0 OR longitude_tratada = 0 AS indicador_geolocalizacao_zerada,\n    (\n      (latitude_tratada != 0 OR longitude_tratada != 0)\n      AND NOT ST_INTERSECTSBOX(ST_GEOGPOINT(longitude_tratada, latitude_tratada), -43.87, -23.13, -43.0, -22.59)\n    ) AS indicador_geolocalizacao_fora_rio,\n    (\n      latitude_tratada != 0\n      AND longitude_tratada != 0\n      AND latitude_servico IS NOT NULL\n      AND longitude_servico IS NOT NULL\n      AND modo = \"BRT\"\n      AND ST_DISTANCE(ST_GEOGPOINT(longitude_tratada, latitude_tratada), ST_GEOGPOINT(longitude_servico, latitude_servico)) > 100\n    ) AS indicador_geolocalizacao_fora_stop,\n    id_servico_gtfs IS NULL AND id_servico_jae_cadastro IS NOT NULL AND modo IN (\"\u00d4nibus\", \"BRT\") AS indicador_servico_fora_gtfs,\n    id_servico_jae_cadastro IS NULL AS indicador_servico_fora_vigencia\n  FROM\n    transacao\n)\nSELECT\n  * EXCEPT(indicador_servico_fora_gtfs, indicador_servico_fora_vigencia),\n  CASE\n    WHEN indicador_geolocalizacao_zerada = TRUE THEN \"Geolocaliza\u00e7\u00e3o zerada\"\n    WHEN indicador_geolocalizacao_fora_rio = TRUE THEN \"Geolocaliza\u00e7\u00e3o fora do munic\u00edpio\"\n    WHEN indicador_geolocalizacao_fora_stop = TRUE THEN \"Geolocaliza\u00e7\u00e3o fora do stop\"\n  END AS descricao_geolocalizacao_invalida,\n  indicador_servico_fora_gtfs,\n  indicador_servico_fora_vigencia,\n  '' as versao\nFROM\n  indicadores\nWHERE\n  indicador_geolocalizacao_zerada = TRUE\n  OR indicador_geolocalizacao_fora_rio = TRUE\n  OR indicador_geolocalizacao_fora_stop = TRUE\n  OR indicador_servico_fora_gtfs = TRUE\n  OR indicador_servico_fora_vigencia = TRUE", "relation_name": "`rj-smtr`.`validacao_dados_jae`.`transacao_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.216058Z", "completed_at": "2025-02-20T18:16:34.240779Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.242150Z", "completed_at": "2025-02-20T18:16:34.242160Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03325939178466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.transacao_valor_ordem", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n\n\nwith\n    transacao as (\n        select\n            data_ordem,\n            data as data_transacao,\n            id_transacao,\n            modo,\n            consorcio,\n            id_operadora,\n            id_servico_jae,\n            valor_transacao as valor_transacao_rateio,\n            id_ordem_pagamento,\n            id_ordem_pagamento_consorcio_dia,\n            id_ordem_pagamento_consorcio_operador_dia\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`\n        \n    ),\n    integracao as (\n        select\n            data_ordem,\n            data as data_transacao,\n            id_transacao,\n            modo,\n            consorcio,\n            id_operadora,\n            id_servico_jae,\n            ifnull(sum(valor_rateio_compensacao), 0) as valor_transacao_rateio,\n            id_ordem_pagamento,\n            id_ordem_pagamento_consorcio as id_ordem_pagamento_consorcio_dia,\n            id_ordem_pagamento_consorcio_operadora\n            as id_ordem_pagamento_consorcio_operador_dia\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`integracao`\n        \n        group by all\n    ),\n    transacao_integracao as (\n        select *\n        from transacao\n        union all\n        select *\n        from integracao\n    ),\n    ordem_agrupada as (\n        select\n            data_ordem,\n            data_transacao,\n            id_transacao,\n            modo,\n            consorcio,\n            id_operadora,\n            id_servico_jae,\n            sum(valor_transacao_rateio) as valor_transacao_rateio,\n            id_ordem_pagamento,\n            id_ordem_pagamento_consorcio_dia,\n            id_ordem_pagamento_consorcio_operador_dia\n        from transacao_integracao\n        where data_ordem is not null\n        group by all\n    ),\n    particao_completa as (\n        select *, 0 as priority\n        from ordem_agrupada\n        \n    )\nselect\n    * except (priority),\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom particao_completa\nqualify row_number() over (partition by id_transacao, data_ordem order by priority) = 1", "relation_name": "`rj-smtr`.`bilhetagem`.`transacao_valor_ordem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.246378Z", "completed_at": "2025-02-20T18:16:34.253707Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.255045Z", "completed_at": "2025-02-20T18:16:34.255054Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01129603385925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_servico_diaria", "compiled": true, "compiled_code": "\n\nwith\n     __dbt__cte__aux_ordem_servico_diaria_v1 as (\n\n\nwith\n    feed_start_date as (\n        select\n            feed_start_date,\n            feed_start_date as data_inicio,\n            coalesce(\n                date_sub(\n                    lead(feed_start_date) over (order by feed_start_date),\n                    interval 1 day\n                ),\n                last_day(feed_start_date, month)\n            ) as data_fim\n        from (select distinct feed_start_date from `rj-smtr`.`gtfs`.`ordem_servico`)\n    ),\n    ordem_servico_pivot as (\n        select *\n        from\n            `rj-smtr`.`gtfs`.`ordem_servico` pivot (\n                max(partidas_ida) as partidas_ida,\n                max(partidas_volta) as partidas_volta,\n                max(viagens_planejadas) as viagens_planejadas,\n                max(distancia_total_planejada) as km for\n                tipo_dia in (\n                    'Dia \u00datil' as du,\n                    'Ponto Facultativo' as pf,\n                    'Sabado' as sab,\n                    'Domingo' as dom\n                )\n            )\n    ),\n    subsidio_feed_start_date_efetiva as (\n        select\n            data, split(tipo_dia, \" - \")[0] as tipo_dia, tipo_dia as tipo_dia_original\n        from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n    )\nselect\n    data,\n    tipo_dia_original as tipo_dia,\n    servico,\n    vista,\n    consorcio,\n    sentido,\n    case\n        \n        \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Dia \u00datil\"\n                then\n                     partidas_ida_du\n                    \n            \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Ponto Facultativo\"\n                then\n                     partidas_ida_pf\n                    \n            \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Sabado\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_ida_du * km_sab), km_du\n                            )\n                        )\n                    \n            \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Domingo\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_ida_du * km_dom), km_du\n                            )\n                        )\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Dia \u00datil\"\n                then\n                     partidas_volta_du\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Ponto Facultativo\"\n                then\n                     partidas_volta_pf\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Sabado\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_volta_du * km_sab), km_du\n                            )\n                        )\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Domingo\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_volta_du * km_dom), km_du\n                            )\n                        )\n                    \n            end as viagens_planejadas,\n    horario_inicio as inicio_periodo,\n    horario_fim as fim_periodo\nfrom\n    unnest(\n        generate_date_array(\n            (select min(data_inicio) from feed_start_date),\n            (select max(data_fim) from feed_start_date)\n        )\n    ) as data\nleft join feed_start_date as d on data between d.data_inicio and d.data_fim\nleft join subsidio_feed_start_date_efetiva as sd using (data)\nleft join ordem_servico_pivot as o using (feed_start_date)\nleft join `rj-smtr`.`dashboard_operacao_onibus_staging`.`servicos_sentido` using (feed_start_date, servico)\nwhere data < \"2023-04-01\"\n),  __dbt__cte__aux_ordem_servico_diaria_v2 as (\n\n\n\nwith\n    feed_info as (select * from `rj-smtr`.`gtfs`.`feed_info`),\n    ordem_servico_pivot as (\n        select *\n        from\n            `rj-smtr`.`gtfs`.`ordem_servico` pivot (\n                max(partidas_ida) as partidas_ida,\n                max(partidas_volta) as partidas_volta,\n                max(viagens_planejadas) as viagens_planejadas,\n                max(distancia_total_planejada) as km for tipo_dia in (\n                    'Dia \u00datil' as du,\n                    'Ponto Facultativo' as pf,\n                    'Sabado' as sab,\n                    'Domingo' as dom\n                )\n            )\n    ),\n    ordem_servico_regular as (\n        select feed_start_date, servico, partidas_ida_du, partidas_volta_du, km_du\n        from ordem_servico_pivot\n        where tipo_os = \"Regular\"\n    ),\n    ordem_servico_tratada as (\n        select\n\n            osp.* except (partidas_ida_du, partidas_volta_du, km_du),\n            case\n                when osp.partidas_ida_du = 0 or osp.partidas_ida_du is null\n                then osr.partidas_ida_du\n                else osp.partidas_ida_du\n            end as partidas_ida_du,\n            case\n                when osp.partidas_volta_du = 0 or osp.partidas_volta_du is null\n                then osr.partidas_volta_du\n                else osp.partidas_volta_du\n            end as partidas_volta_du,\n            case\n                when osp.km_du = 0 or osp.km_du is null then osr.km_du else osp.km_du\n            end as km_du\n        from ordem_servico_pivot osp\n        left join ordem_servico_regular osr using (feed_start_date, servico)\n    ),\n    subsidio_feed_start_date_efetiva as (\n        select\n            data,\n            tipo_os,\n            split(tipo_dia, \" - \")[0] as tipo_dia,\n            tipo_dia as tipo_dia_original\n        from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n    ),\n    ordem_servico_trips_shapes as (\n        select distinct feed_start_date, servico, tipo_os, sentido\n        from `rj-smtr`.`gtfs`.`ordem_servico_trips_shapes`\n    )\nselect\n    data,\n    tipo_dia_original as tipo_dia,\n    servico,\n    vista,\n    consorcio,\n    sentido,\n    case\n        \n        \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Dia \u00datil\"\n                then\n                     partidas_ida_du\n                    \n            \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Ponto Facultativo\"\n                then\n                     partidas_ida_pf\n                    \n            \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Sabado\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_ida_du * km_sab), km_du\n                            )\n                        )\n                    \n            \n                when\n                    sentido\n                     in ('I', 'C')\n                     and tipo_dia = \"Domingo\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_ida_du * km_dom), km_du\n                            )\n                        )\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Dia \u00datil\"\n                then\n                     partidas_volta_du\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Ponto Facultativo\"\n                then\n                     partidas_volta_pf\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Sabado\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_volta_du * km_sab), km_du\n                            )\n                        )\n                    \n            \n                when\n                    sentido\n                     = \"V\"\n                     and tipo_dia = \"Domingo\"\n                then\n                    \n                        round(\n                            safe_divide(\n                                (partidas_volta_du * km_dom), km_du\n                            )\n                        )\n                    \n            end as viagens_planejadas,\n    horario_inicio as inicio_periodo,\n    horario_fim as fim_periodo\nfrom\n    unnest(\n        generate_date_array(\n            (select min(feed_start_date) from feed_info),\n            (select max(feed_end_date) from feed_info)\n        )\n    ) as data\nleft join feed_info as d on data between d.feed_start_date and d.feed_end_date\nleft join ordem_servico_tratada as o using (feed_start_date)\ninner join subsidio_feed_start_date_efetiva as sd using (data, tipo_os)\nleft join ordem_servico_trips_shapes using (feed_start_date, servico, tipo_os)\n), ordem_servico_diaria as (\n        select *\n        from __dbt__cte__aux_ordem_servico_diaria_v1\n        where data < \"2023-04-01\"\n\n        union all\n\n        select *\n        from __dbt__cte__aux_ordem_servico_diaria_v2\n        where data >= \"2023-04-01\"\n    )\nselect *\nfrom ordem_servico_diaria\nwhere viagens_planejadas > 0", "relation_name": "`rj-smtr`.`dashboard_operacao_onibus`.`ordem_servico_diaria`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.258872Z", "completed_at": "2025-02-20T18:16:34.264683Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.265935Z", "completed_at": "2025-02-20T18:16:34.265944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009531974792480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_viagem_circular", "compiled": true, "compiled_code": "-- 1. Identifica viagens circulares de ida que possuem volta\n--    consecutiva. Junta numa \u00fanica linha a datetime_partida (ida) + datetime_chegada_volta\nwith ida_volta_circular as (\n    select\n        t.*\n    from (\n        select\n            *,\n            lead(datetime_partida) over (\n                partition by id_veiculo, servico_realizado order by id_veiculo, servico_realizado, datetime_partida, sentido_shape) as datetime_partida_volta,\n            lead(datetime_chegada) over (\n                partition by id_veiculo, servico_realizado order by id_veiculo, servico_realizado, datetime_partida, sentido_shape) as datetime_chegada_volta,\n            lead(shape_id) over (\n                partition by id_veiculo, servico_realizado order by id_veiculo, servico_realizado, datetime_partida, sentido_shape) as shape_id_volta,\n            lead(sentido_shape) over (\n                partition by id_veiculo, servico_realizado order by id_veiculo, servico_realizado, datetime_partida, sentido_shape) = \"V\" as flag_proximo_volta -- possui volta\n        from\n            `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` v\n        where\n            sentido = \"C\"\n    ) t\n    where\n        flag_proximo_volta = TRUE\n        and sentido_shape = \"I\"\n        and datetime_chegada <= datetime_partida_volta\n),\n-- 2. Filtra apenas viagens circulares de ida e volta consecutivas\n--    (mantem ida e volta separadas, mas com o mesmo id)\nviagem_circular as (\n    select distinct\n        *\n    from (\n        select\n            case\n                when (\n                    v.sentido_shape = \"I\"\n                    and v.datetime_partida = c.datetime_partida\n                ) then c.id_viagem\n                when (\n                    v.sentido_shape = \"V\"\n                    and v.datetime_chegada = c.datetime_chegada_volta\n                ) then c.id_viagem\n            end as id_viagem,\n            v.* except(id_viagem)\n        from\n            `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` v\n        inner join\n            ida_volta_circular c\n        on\n            c.id_veiculo = v.id_veiculo\n            and c.servico_realizado = v.servico_realizado\n            and c.sentido = v.sentido\n    ) v\n    where\n        id_viagem is not null\n)\n-- 3. Junta viagens circulares tratadas \u00e0s viagens n\u00e3o circulares j\u00e1 identificadas\nselect\n    *\nfrom\n    viagem_circular v\nunion all (\n    select\n        *\n    from\n        `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` v\n    where\n        sentido = \"I\" or sentido = \"V\"\n)", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.270216Z", "completed_at": "2025-02-20T18:16:34.275480Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.276746Z", "completed_at": "2025-02-20T18:16:34.276754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009279966354370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_aux_viagem_inicio_fim_sentido__I__V__C.4f2096c560", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.280620Z", "completed_at": "2025-02-20T18:16:34.285730Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.287260Z", "completed_at": "2025-02-20T18:16:34.287269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00902700424194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_aux_viagem_inicio_fim_sentido_shape__I__V__C.9af2f7b6e0", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido_shape as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido_shape\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.291106Z", "completed_at": "2025-02-20T18:16:34.296062Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.297322Z", "completed_at": "2025-02-20T18:16:34.297331Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008673906326293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_data.3ef5737e0d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.301222Z", "completed_at": "2025-02-20T18:16:34.307961Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.309317Z", "completed_at": "2025-02-20T18:16:34.309326Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01058816909790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_datetime_chegada.2e883813e8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_chegada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_chegada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.313201Z", "completed_at": "2025-02-20T18:16:34.318395Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.319745Z", "completed_at": "2025-02-20T18:16:34.319755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009013175964355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_datetime_partida.c668ec6882", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_partida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_partida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.323826Z", "completed_at": "2025-02-20T18:16:34.328956Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.330236Z", "completed_at": "2025-02-20T18:16:34.330253Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009033918380737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_distancia_planejada.a26e748226", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.334095Z", "completed_at": "2025-02-20T18:16:34.339257Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.340536Z", "completed_at": "2025-02-20T18:16:34.340544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008834362030029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_id_veiculo.c69fdfc708", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.344349Z", "completed_at": "2025-02-20T18:16:34.350500Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.351801Z", "completed_at": "2025-02-20T18:16:34.351809Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009834527969360352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_id_viagem.9cfe2e3fdd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.355722Z", "completed_at": "2025-02-20T18:16:34.360602Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.361880Z", "completed_at": "2025-02-20T18:16:34.361887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00856924057006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_sentido.976bd6a11f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.365698Z", "completed_at": "2025-02-20T18:16:34.370499Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.371768Z", "completed_at": "2025-02-20T18:16:34.371775Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008456230163574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_sentido_shape.4c3ec0996b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.375577Z", "completed_at": "2025-02-20T18:16:34.381420Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.382708Z", "completed_at": "2025-02-20T18:16:34.382716Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009519338607788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_servico_informado.7adb7ebfd7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_informado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_informado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.386500Z", "completed_at": "2025-02-20T18:16:34.391343Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.392666Z", "completed_at": "2025-02-20T18:16:34.392675Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008599281311035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_servico_realizado.60bf591717", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_realizado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_realizado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.397967Z", "completed_at": "2025-02-20T18:16:34.406714Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.407958Z", "completed_at": "2025-02-20T18:16:34.407966Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013150691986083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_shape_id.9b971af0ae", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.411833Z", "completed_at": "2025-02-20T18:16:34.416549Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.417871Z", "completed_at": "2025-02-20T18:16:34.417879Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00842905044555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_inicio_fim_versao_modelo.7bace7cce8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.421751Z", "completed_at": "2025-02-20T18:16:34.427870Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:34.429138Z", "completed_at": "2025-02-20T18:16:34.429146Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009797811508178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_aux_viagem_inicio_fim_id_viagem.321f77f756", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_viagem as unique_field\n  from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_inicio_fim` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id_viagem is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:34.433003Z", "completed_at": "2025-02-20T18:16:36.297299Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:36.303013Z", "completed_at": "2025-02-20T18:16:36.303046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8757050037384033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_validacao", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    \n        \n        \n    \n\n\nwith\n    contagem as (\n        select\n            data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            modo,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            countif(id_segmento is not null) as quantidade_segmentos_verificados,\n            countif(quantidade_gps > 0) as quantidade_segmentos_validos,\n            max(indicador_servico_divergente) as indicador_servico_divergente,\n            max(id_segmento is null) as indicador_shape_invalido,\n            service_ids,\n            tipo_dia,\n            feed_version,\n            feed_start_date\n        from `rj-smtr`.`monitoramento_staging`.`gps_segmento_viagem`\n        where\n            (\n                not indicador_segmento_desconsiderado\n                or indicador_segmento_desconsiderado is null\n            )\n             and \n    data between\n        date('2022-01-01T00:00:00')\n        and date('2022-01-01T01:00:00')\n \n        group by\n            data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            modo,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            service_ids,\n            tipo_dia,\n            feed_version,\n            feed_start_date\n    ),\n    indice as (\n        select\n            data,\n            id_viagem,\n            datetime_partida,\n            datetime_chegada,\n            modo,\n            id_veiculo,\n            trip_id,\n            route_id,\n            shape_id,\n            servico,\n            sentido,\n            quantidade_segmentos_verificados,\n            quantidade_segmentos_validos,\n            safe_divide(\n                quantidade_segmentos_validos, quantidade_segmentos_verificados\n            ) as indice_validacao,\n            indicador_servico_divergente,\n            indicador_shape_invalido,\n            service_ids,\n            tipo_dia,\n            feed_version,\n            feed_start_date\n        from contagem\n    ),\n    trips as (\n        select distinct\n            feed_start_date,\n            feed_version,\n            route_id,\n            array_agg(service_id) as service_ids,\n        from `rj-smtr`.`gtfs`.`trips`\n        \n        \n            where feed_start_date in ()\n        \n        group by 1, 2, 3\n    ),\n    servicos_planejados_gtfs as (\n        select\n            i.*,\n            (\n                select count(*)\n                from unnest(i.service_ids) as service_id\n                join unnest(t.service_ids) as service_id using (service_id)\n            )\n            > 0 as indicador_servico_planejado_gtfs\n        from indice i\n        left join trips t using (feed_start_date, feed_version, route_id)\n    ),\n    viagem_planejada as (\n        select *\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        \n         where \n    data between\n        date('2022-01-01T00:00:00')\n        and date('2022-01-01T01:00:00')\n \n        qualify\n            row_number() over (\n                partition by data, servico, sentido, faixa_horaria_inicio\n                order by distancia_planejada desc\n            )\n            = 1\n    ),\n    servicos_planejados_os as (\n        select\n            sp.*,\n            case\n                when\n                    vp.distancia_total_planejada is not null\n                    and vp.distancia_total_planejada > 0\n                then true\n                when\n                    (\n                        vp.distancia_total_planejada is not null\n                        and vp.distancia_total_planejada <= 0\n                    )\n                    or (\n                        vp.distancia_total_planejada is null and sp.modo = \"\u00d4nibus SPPO\"\n                    )\n                then false\n            end as indicador_servico_planejado_os\n        from servicos_planejados_gtfs sp\n        left join\n            viagem_planejada vp\n            on vp.servico = sp.servico\n            and vp.sentido = sp.sentido\n            and vp.data = sp.data\n            and sp.datetime_partida between faixa_horaria_inicio and faixa_horaria_fim\n    )\nselect\n    data,\n    id_viagem,\n    datetime_partida,\n    datetime_chegada,\n    modo,\n    id_veiculo,\n    trip_id,\n    route_id,\n    shape_id,\n    servico,\n    sentido,\n    quantidade_segmentos_verificados,\n    quantidade_segmentos_validos,\n    indice_validacao,\n    indice_validacao >= 0.9 as indicador_trajeto_valido,\n    indicador_servico_planejado_gtfs,\n    indicador_servico_planejado_os,\n    indicador_servico_divergente,\n    indicador_shape_invalido,\n    (\n        shape_id is not null\n        and route_id is not null\n        and not indicador_shape_invalido\n        and indice_validacao >= 0.9\n        and indicador_servico_planejado_gtfs\n        and ifnull(indicador_servico_planejado_os, true)\n    ) as indicador_viagem_valida,\n    0.9 as parametro_validacao,\n    tipo_dia,\n    feed_version,\n    feed_start_date,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom servicos_planejados_os", "relation_name": "`rj-smtr`.`monitoramento`.`viagem_validacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:36.319161Z", "completed_at": "2025-02-20T18:16:39.394102Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:39.399918Z", "completed_at": "2025-02-20T18:16:39.399955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.089195966720581, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.passageiros_hora", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__aux_passageiros_hora as (\n\n\nselect\n    data,\n    hora,\n    modo,\n    consorcio,\n    id_servico_jae,\n    servico_jae,\n    descricao_servico_jae,\n    sentido,\n    id_transacao,\n    tipo_transacao_smtr,\n    ifnull(\n        case\n            when tipo_transacao_smtr = \"Gratuidade\"\n            then tipo_gratuidade\n            when tipo_transacao_smtr = \"Integra\u00e7\u00e3o\"\n            then \"Integra\u00e7\u00e3o\"\n            when tipo_transacao_smtr = \"Transfer\u00eancia\"\n            then \"Transfer\u00eancia\"\n            else tipo_pagamento\n        end,\n        \"N\u00e3o Identificado\"\n    ) as tipo_transacao_detalhe_smtr,\n    tipo_gratuidade,\n    tipo_pagamento,\n    geo_point_transacao\nfrom `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`\nwhere\n    id_servico_jae not in (\"140\", \"142\")\n    and id_operadora != \"2\"\n    and (\n        modo = \"BRT\"\n        or (modo = \"VLT\" and data >= date(\"2024-02-24\"))\n        or (modo = \"\u00d4nibus\" and data >= date(\"2024-04-19\"))\n        or (modo = \"Van\" and consorcio = \"STPC\" and data >= date(\"2024-07-01\"))\n        or (modo = \"Van\" and consorcio = \"STPL\" and data >= date(\"2024-07-15\"))\n    )\n    and tipo_transacao is not null\n\nunion all\n\nselect\n    data,\n    hora,\n    modo,\n    consorcio,\n    id_servico_jae,\n    servico_jae,\n    descricao_servico_jae,\n    sentido,\n    id_transacao,\n    \"RioCard\" as tipo_transacao_smtr,\n    \"RioCard\" as tipo_transacao_detalhe_smtr,\n    null as tipo_gratuidade,\n    \"RioCard\" as tipo_pagamento,\n    st_geogpoint(longitude, latitude) as geo_point_transacao\nfrom `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`\nwhere\n    (id_servico_jae not in (\"140\", \"142\") or id_servico_jae is null)\n    and (id_operadora != \"2\" or id_operadora is null)\n    and (\n        modo = \"BRT\"\n        or (modo = \"VLT\" and data >= date(\"2024-02-24\"))\n        or (modo = \"\u00d4nibus\" and data >= date(\"2024-04-19\"))\n        or (modo = \"Van\" and consorcio = \"STPC\" and data >= date(\"2024-07-01\"))\n        or (modo = \"Van\" and consorcio = \"STPL\" and data >= date(\"2024-07-15\"))\n        or modo is null\n    )\n) /*\nconsulta as parti\u00e7\u00f5es a serem atualizadas com base nas transa\u00e7\u00f5es capturadas entre date_range_start e date_range_end\ne as integra\u00e7\u00f5es capturadas entre date_range_start e date_range_end\n*/\n\n\n\n  \n    -- Transa\u00e7\u00f5es Ja\u00e9\n    \n\n    \n\n    \n  \n\n\nSELECT\n  * EXCEPT(id_transacao, geo_point_transacao),\n  COUNT(id_transacao) AS quantidade_passageiros,\n  '' AS versao\nFROM\n  __dbt__cte__aux_passageiros_hora\nWHERE\n\n  \n    data = \"2000-01-01\"\n  \n\nGROUP BY\n  data,\n  hora,\n  modo,\n  consorcio,\n  id_servico_jae,\n  servico_jae,\n  descricao_servico_jae,\n  sentido,\n  tipo_transacao_smtr,\n  tipo_transacao_detalhe_smtr,\n  tipo_gratuidade,\n  tipo_pagamento", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`passageiros_hora`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:39.411076Z", "completed_at": "2025-02-20T18:16:41.917299Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:41.919112Z", "completed_at": "2025-02-20T18:16:41.919124Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.5128960609436035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.passageiros_tile_hora", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__aux_passageiros_hora as (\n\n\nselect\n    data,\n    hora,\n    modo,\n    consorcio,\n    id_servico_jae,\n    servico_jae,\n    descricao_servico_jae,\n    sentido,\n    id_transacao,\n    tipo_transacao_smtr,\n    ifnull(\n        case\n            when tipo_transacao_smtr = \"Gratuidade\"\n            then tipo_gratuidade\n            when tipo_transacao_smtr = \"Integra\u00e7\u00e3o\"\n            then \"Integra\u00e7\u00e3o\"\n            when tipo_transacao_smtr = \"Transfer\u00eancia\"\n            then \"Transfer\u00eancia\"\n            else tipo_pagamento\n        end,\n        \"N\u00e3o Identificado\"\n    ) as tipo_transacao_detalhe_smtr,\n    tipo_gratuidade,\n    tipo_pagamento,\n    geo_point_transacao\nfrom `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`\nwhere\n    id_servico_jae not in (\"140\", \"142\")\n    and id_operadora != \"2\"\n    and (\n        modo = \"BRT\"\n        or (modo = \"VLT\" and data >= date(\"2024-02-24\"))\n        or (modo = \"\u00d4nibus\" and data >= date(\"2024-04-19\"))\n        or (modo = \"Van\" and consorcio = \"STPC\" and data >= date(\"2024-07-01\"))\n        or (modo = \"Van\" and consorcio = \"STPL\" and data >= date(\"2024-07-15\"))\n    )\n    and tipo_transacao is not null\n\nunion all\n\nselect\n    data,\n    hora,\n    modo,\n    consorcio,\n    id_servico_jae,\n    servico_jae,\n    descricao_servico_jae,\n    sentido,\n    id_transacao,\n    \"RioCard\" as tipo_transacao_smtr,\n    \"RioCard\" as tipo_transacao_detalhe_smtr,\n    null as tipo_gratuidade,\n    \"RioCard\" as tipo_pagamento,\n    st_geogpoint(longitude, latitude) as geo_point_transacao\nfrom `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`\nwhere\n    (id_servico_jae not in (\"140\", \"142\") or id_servico_jae is null)\n    and (id_operadora != \"2\" or id_operadora is null)\n    and (\n        modo = \"BRT\"\n        or (modo = \"VLT\" and data >= date(\"2024-02-24\"))\n        or (modo = \"\u00d4nibus\" and data >= date(\"2024-04-19\"))\n        or (modo = \"Van\" and consorcio = \"STPC\" and data >= date(\"2024-07-01\"))\n        or (modo = \"Van\" and consorcio = \"STPL\" and data >= date(\"2024-07-15\"))\n        or modo is null\n    )\n) /*\nconsulta as parti\u00e7\u00f5es a serem atualizadas com base nas transa\u00e7\u00f5es capturadas entre date_range_start e date_range_end\ne as integra\u00e7\u00f5es capturadas entre date_range_start e date_range_end\n*/\n\n\n\n  \n    -- Transa\u00e7\u00f5es Ja\u00e9\n    \n\n    \n\n    \n  \n\n\nSELECT\n  p.* EXCEPT(id_transacao, geo_point_transacao),\n  geo.tile_id,\n  COUNT(id_transacao) AS quantidade_passageiros,\n  '' AS versao\nFROM\n  __dbt__cte__aux_passageiros_hora p\nJOIN\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`aux_h3_res9` geo\nON\n  ST_CONTAINS(geo.geometry, geo_point_transacao)\nWHERE\n\n  \n    data = \"2000-01-01\"\n  \n\nGROUP BY\n  data,\n  hora,\n  modo,\n  consorcio,\n  id_servico_jae,\n  servico_jae,\n  descricao_servico_jae,\n  sentido,\n  tipo_transacao_smtr,\n  tipo_transacao_detalhe_smtr,\n  tipo_gratuidade,\n  tipo_pagamento,\n  tile_id", "relation_name": "`rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`passageiros_tile_hora`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:41.924778Z", "completed_at": "2025-02-20T18:16:43.788205Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.790018Z", "completed_at": "2025-02-20T18:16:43.790030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8688092231750488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_servico_operador_dia_invalida", "compiled": true, "compiled_code": "\n\n\n\n  \n  \n\n\nWITH transacao_invalida AS (\n  SELECT\n    id_transacao,\n    indicador_servico_fora_vigencia\n  FROM\n    `rj-smtr`.`validacao_dados_jae`.`transacao_invalida`\n  WHERE\n    indicador_servico_fora_vigencia = TRUE\n  \n    AND\n    \n      data = \"2000-01-01\"\n    \n  \n),\ntransacao_agg AS (\n  SELECT\n    t.data_ordem,\n    ANY_VALUE(t.id_consorcio) AS id_consorcio,\n    t.id_servico_jae,\n    t.id_operadora,\n    COUNT(*) AS quantidade_total_transacao_captura,\n    SUM(t.valor_transacao) AS valor_total_transacao_captura,\n    MAX(ti.indicador_servico_fora_vigencia) IS NOT NULL AS indicador_servico_fora_vigencia\n  FROM\n    `rj-smtr`.`validacao_dados_jae_staging`.`aux_transacao_ordem` t\n  LEFT JOIN\n    transacao_invalida ti\n  USING(id_transacao)\n  GROUP BY\n    data_ordem,\n    id_servico_jae,\n    id_operadora\n),\nordem_pagamento AS (\n  SELECT\n    *\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_servico_operador_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\nid_ordem_pagamento AS (\n  SELECT\n    data_ordem,\n    id_ordem_pagamento\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\ntransacao_ordem AS (\n  SELECT\n    COALESCE(op.data_ordem, t.data_ordem) AS data_ordem,\n    COALESCE(op.id_consorcio, t.id_consorcio) AS id_consorcio,\n    COALESCE(op.id_operadora, t.id_operadora) AS id_operadora,\n    COALESCE(op.id_servico_jae, t.id_servico_jae) AS id_servico_jae,\n    op.quantidade_total_transacao,\n    op.valor_total_transacao_bruto,\n    op.valor_total_transacao_liquido,\n    t.quantidade_total_transacao_captura,\n    SAFE_CAST(t.valor_total_transacao_captura + op.valor_rateio_credito + op.valor_rateio_debito AS NUMERIC) AS valor_total_transacao_captura,\n    t.indicador_servico_fora_vigencia\n  FROM\n    ordem_pagamento op\n  FULL OUTER JOIN\n    transacao_agg t\n  USING(data_ordem, id_servico_jae, id_operadora)\n),\nindicadores AS (\n  SELECT\n    o.data_ordem,\n    id.id_ordem_pagamento,\n    o.id_consorcio,\n    o.id_operadora,\n    o.id_servico_jae,\n    o.quantidade_total_transacao,\n    o.valor_total_transacao_bruto,\n    o.valor_total_transacao_liquido,\n    o.quantidade_total_transacao_captura,\n    o.valor_total_transacao_captura,\n    COALESCE(\n      (\n        quantidade_total_transacao_captura != quantidade_total_transacao\n        OR ROUND(valor_total_transacao_captura, 2) != ROUND(valor_total_transacao_bruto, 2)\n      ),\n      TRUE\n    ) AS indicador_captura_invalida,\n    o.indicador_servico_fora_vigencia\n  FROM\n    transacao_ordem o\n  JOIN\n    id_ordem_pagamento id\n  USING(data_ordem)\n)\nSELECT\n  *,\n  '' AS versao\nFROM\n  indicadores\nWHERE\n  indicador_servico_fora_vigencia = TRUE\n  OR indicador_captura_invalida = TRUE\n  AND id_servico_jae NOT IN (SELECT id_linha FROM `rj-smtr`.`br_rj_riodejaneiro_bilhetagem_staging`.`linha_sem_ressarcimento`)", "relation_name": "`rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_servico_operador_dia_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.796286Z", "completed_at": "2025-02-20T18:16:43.803873Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.805860Z", "completed_at": "2025-02-20T18:16:43.805872Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013526678085327148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.registros_status_viagem", "compiled": true, "compiled_code": "\n\n-- 1. Identifica registros pertencentes a viagens\nwith registros_viagem as (\n    select\n    s.* except(versao_modelo),\n    datetime_partida,\n    datetime_chegada,\n    distancia_inicio_fim,\n    id_viagem\n    from\n        `rj-smtr`.`projeto_subsidio_sppo`.`aux_registros_status_trajeto` s\n    left join (\n    select\n        id_veiculo,\n        trip_id,\n        servico_realizado,\n        sentido_shape,\n        id_viagem,\n        datetime_partida,\n        datetime_chegada,\n        distancia_inicio_fim\n    from\n        `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular`\n    ) v\n    on\n    s.id_veiculo = v.id_veiculo\n    and s.trip_id = v.trip_id\n    and s.timestamp_gps between v.datetime_partida and v.datetime_chegada\n)\n-- 2. Filtra apenas registros de viagens identificadas\nselect\n    *,\n    '' as versao_modelo\nfrom\n    registros_viagem\nwhere\n    id_viagem is not null", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.812729Z", "completed_at": "2025-02-20T18:16:43.819402Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.821113Z", "completed_at": "2025-02-20T18:16:43.821122Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017725706100463867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_aux_viagem_circular_sentido__I__V__C.70c058ec81", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.830656Z", "completed_at": "2025-02-20T18:16:43.835682Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.836956Z", "completed_at": "2025-02-20T18:16:43.836965Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008695840835571289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_aux_viagem_circular_sentido_shape__I__V__C.39a2bf1eea", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido_shape as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido_shape\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.840718Z", "completed_at": "2025-02-20T18:16:43.845696Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.846957Z", "completed_at": "2025-02-20T18:16:43.846964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00855565071105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_data.9696b69d2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.850686Z", "completed_at": "2025-02-20T18:16:43.855600Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.856854Z", "completed_at": "2025-02-20T18:16:43.856861Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008527755737304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_datetime_chegada.129de567e2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_chegada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_chegada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.860595Z", "completed_at": "2025-02-20T18:16:43.866506Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.867802Z", "completed_at": "2025-02-20T18:16:43.867810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009521961212158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_datetime_partida.44f6ea1a28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_partida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_partida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.871516Z", "completed_at": "2025-02-20T18:16:43.876237Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.877462Z", "completed_at": "2025-02-20T18:16:43.877469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008296966552734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_distancia_planejada.5baf640cb6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.881140Z", "completed_at": "2025-02-20T18:16:43.885820Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.887056Z", "completed_at": "2025-02-20T18:16:43.887063Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008213043212890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_id_veiculo.f928466090", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.890725Z", "completed_at": "2025-02-20T18:16:43.896773Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.898130Z", "completed_at": "2025-02-20T18:16:43.898142Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00988626480102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_id_viagem.48bb460a25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.902045Z", "completed_at": "2025-02-20T18:16:43.908279Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.909511Z", "completed_at": "2025-02-20T18:16:43.909519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009881973266601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_sentido.d255c2ea5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.913959Z", "completed_at": "2025-02-20T18:16:43.919204Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.920451Z", "completed_at": "2025-02-20T18:16:43.920459Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009223699569702148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_sentido_shape.ca74a5e3f0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.924333Z", "completed_at": "2025-02-20T18:16:43.929064Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.930298Z", "completed_at": "2025-02-20T18:16:43.930304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0083770751953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_servico_informado.e43d2419a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_informado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_informado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.934006Z", "completed_at": "2025-02-20T18:16:43.938762Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.939990Z", "completed_at": "2025-02-20T18:16:43.939997Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00830221176147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_shape_id.d4509226b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.943783Z", "completed_at": "2025-02-20T18:16:43.949636Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.950936Z", "completed_at": "2025-02-20T18:16:43.950944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009478569030761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_circular_versao_modelo.5c199c2365", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.954665Z", "completed_at": "2025-02-20T18:16:43.959394Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.960621Z", "completed_at": "2025-02-20T18:16:43.960628Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008263826370239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_aux_viagem_circular_id_viagem.1ee2d25705", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_viagem as unique_field\n  from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id_viagem is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.964412Z", "completed_at": "2025-02-20T18:16:43.968461Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.969760Z", "completed_at": "2025-02-20T18:16:43.969768Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007758140563964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.view_passageiros_tile_hora", "compiled": true, "compiled_code": "WITH servicos AS (\n  SELECT\n    * EXCEPT(rn)\n  FROM\n    (\n      SELECT\n        *,\n        ROW_NUMBER() OVER (PARTITION BY id_servico_jae ORDER BY data_inicio_vigencia) AS rn\n      FROM\n        `rj-smtr`.`cadastro`.`servicos`\n    )\n  WHERE\n    rn = 1\n)\nSELECT\n  p.data,\n  p.hora,\n  p.modo,\n  p.consorcio,\n  p.id_servico_jae,\n  s.servico,\n  s.descricao_servico,\n  CONCAT(s.servico, ' - ' ,s.descricao_servico) AS nome_completo_servico,\n  p.sentido,\n  CASE\n    WHEN p.tipo_transacao_smtr = \"Integral\" THEN \"Tarifa Integral\"\n    ELSE p.tipo_transacao_smtr\n  END AS tipo_transacao_smtr,\n  p.tipo_transacao_detalhe_smtr,\n  p.tile_id,\n  p.quantidade_passageiros\nFROM\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`passageiros_tile_hora` p\nLEFT JOIN\n  servicos s\nUSING(id_servico_jae)", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_jae`.`view_passageiros_tile_hora`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.974231Z", "completed_at": "2025-02-20T18:16:43.983564Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:43.985513Z", "completed_at": "2025-02-20T18:16:43.985523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01442098617553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_consorcio_operador_dia_invalida", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_servico_operador_dia_invalida`\n\n\nWITH ordem_pagamento_servico_operador_dia AS (\n  SELECT\n    data_ordem,\n    id_consorcio,\n    id_operadora,\n    id_ordem_pagamento,\n    SUM(quantidade_total_transacao) AS quantidade_total_transacao,\n    SUM(valor_total_transacao_liquido) AS valor_total_transacao_liquido,\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_servico_operador_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n  GROUP BY\n    1,\n    2,\n    3,\n    4\n),\nordem_pagamento_consorcio_operador_dia AS (\n  SELECT\n    data_ordem,\n    id_consorcio,\n    id_operadora,\n    id_ordem_pagamento,\n    quantidade_total_transacao,\n    valor_total_transacao_liquido_ordem AS valor_total_transacao_liquido\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_operador_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\nindicadores AS (\n  SELECT\n    cod.data_ordem,\n    cod.id_consorcio,\n    cod.id_operadora,\n    cod.id_ordem_pagamento,\n    cod.quantidade_total_transacao,\n    sod.quantidade_total_transacao AS quantidade_total_transacao_agregacao,\n    cod.valor_total_transacao_liquido,\n    sod.valor_total_transacao_liquido AS valor_total_transacao_liquido_agregacao,\n    ROUND(cod.valor_total_transacao_liquido, 2) != ROUND(sod.valor_total_transacao_liquido, 2) OR cod.quantidade_total_transacao != sod.quantidade_total_transacao AS indicador_agregacao_invalida\n  FROM\n    ordem_pagamento_consorcio_operador_dia cod\n  LEFT JOIN\n    ordem_pagamento_servico_operador_dia sod\n  USING(\n    data_ordem,\n    id_consorcio,\n    id_operadora,\n    id_ordem_pagamento\n  )\n)\nSELECT\n  *,\n  '' AS versao\nFROM\n  indicadores\nWHERE\n  indicador_agregacao_invalida = TRUE", "relation_name": "`rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_consorcio_operador_dia_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:43.990803Z", "completed_at": "2025-02-20T18:16:44.000047Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.001644Z", "completed_at": "2025-02-20T18:16:44.001654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013614416122436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.aux_viagem_registros", "compiled": true, "compiled_code": "-- 1. Calcula a dist\u00e2ncia total percorrida por viagem, separada por\n--    shape. Adiciona dist\u00e2ncia do 1o/\u00faltimo sinal de gps ao in\u00edcio/final do\n--    shape. Isso \u00e9 necess\u00e1rio pois o 1o/ultimo sinal \u00e9 contabilizado\n--    apenas quando o veiculo sai/chega dentro do raio de 500m ao redor\n--    do ponto inicial/final. Contabiliza tamb\u00e9m o n\u00famero de registros\n--    em cada tapa da viagem (inicio, meio, fim, fora), total de\n--    registros de gps e total de minutos da viagem com registros de gps.\nwith distancia as (\n    select\n        *,\n        n_registros_middle + n_registros_start + n_registros_end as n_registros_shape\n    from (\n        select distinct\n            id_viagem,\n            trip_id,\n            max(distancia_inicio_fim) as distancia_inicio_fim,\n            round(sum(distancia)/1000 + max(distancia_inicio_fim), 3) as distancia_aferida,\n            sum(case when status_viagem = \"middle\" then 1 else 0 end) as n_registros_middle,\n            sum(case when status_viagem = \"start\" then 1 else 0 end) as n_registros_start,\n            sum(case when status_viagem = \"end\" then 1 else 0 end) as n_registros_end,\n            sum(case when status_viagem = \"out\" then 1 else 0 end) as n_registros_out,\n            count(timestamp_gps) as n_registros_total,\n            count(distinct timestamp_minuto_gps) as n_registros_minuto\n        from (\n            select distinct * except(posicao_veiculo_geo, start_pt, end_pt)\n            from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem`\n            where\n                \n                data between date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day) and date(\"2022-01-01T01:00:00\")\n                \n        )\n        group by 1,2\n    )\n)\n-- 2. Calcula distancia total por viagem - junta distancias corrigidas\n--    de ida e volta de viagens circulares.\nselect\n    id_viagem,\n    sum(distancia_aferida) as distancia_aferida,\n    sum(distancia_inicio_fim) as distancia_inicio_fim,\n    sum(n_registros_middle) as n_registros_middle,\n    sum(n_registros_start) as n_registros_start,\n    sum(n_registros_end) as n_registros_end,\n    sum(n_registros_out) as n_registros_out,\n    sum(n_registros_total) as n_registros_total,\n    sum(n_registros_minuto) as n_registros_minuto,\n    sum(n_registros_shape) as n_registros_shape,\n    '' as versao_modelo\nfrom\n    distancia\ngroup by 1", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.005902Z", "completed_at": "2025-02-20T18:16:44.011189Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.012476Z", "completed_at": "2025-02-20T18:16:44.012483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009180784225463867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_registros_status_viagem_sentido__I__V__C.8b8fa70da7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.016283Z", "completed_at": "2025-02-20T18:16:44.021089Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.022366Z", "completed_at": "2025-02-20T18:16:44.022373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008471012115478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_registros_status_viagem_sentido_shape__I__V__C.a6ccf195ec", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido_shape as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido_shape\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.026142Z", "completed_at": "2025-02-20T18:16:44.031885Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.033151Z", "completed_at": "2025-02-20T18:16:44.033158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009372234344482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_negative_registros_status_viagem_distancia.34c62e5708", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia < 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.036909Z", "completed_at": "2025-02-20T18:16:44.149031Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.150800Z", "completed_at": "2025-02-20T18:16:44.150810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1164097785949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_data.fc562948d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.155007Z", "completed_at": "2025-02-20T18:16:44.160362Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.162204Z", "completed_at": "2025-02-20T18:16:44.162214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009842157363891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_datetime_chegada.5dbeb5b878", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_chegada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_chegada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.166230Z", "completed_at": "2025-02-20T18:16:44.171599Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.172889Z", "completed_at": "2025-02-20T18:16:44.172897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009183406829833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_datetime_partida.15c5410b28", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_partida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_partida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.176875Z", "completed_at": "2025-02-20T18:16:44.183601Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.185294Z", "completed_at": "2025-02-20T18:16:44.185304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01094508171081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_distancia.85f4f41092", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.189216Z", "completed_at": "2025-02-20T18:16:44.194462Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.195994Z", "completed_at": "2025-02-20T18:16:44.196002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009183883666992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_distancia_planejada.97e1779cf0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.199841Z", "completed_at": "2025-02-20T18:16:44.204871Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.206140Z", "completed_at": "2025-02-20T18:16:44.206148Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008681774139404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_id_empresa.3108e4aab8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_empresa\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_empresa is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.209962Z", "completed_at": "2025-02-20T18:16:44.214830Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.216125Z", "completed_at": "2025-02-20T18:16:44.216132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008573532104492188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_id_veiculo.3c008a9ac4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.219970Z", "completed_at": "2025-02-20T18:16:44.225957Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.227268Z", "completed_at": "2025-02-20T18:16:44.227276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009729146957397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_id_viagem.b81547c9af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.231126Z", "completed_at": "2025-02-20T18:16:44.236021Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.237349Z", "completed_at": "2025-02-20T18:16:44.237356Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008643388748168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_posicao_veiculo_geo.78b9ad4651", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect posicao_veiculo_geo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere posicao_veiculo_geo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.241245Z", "completed_at": "2025-02-20T18:16:44.246329Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.247642Z", "completed_at": "2025-02-20T18:16:44.247650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008895397186279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_sentido.85a3d01213", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.251546Z", "completed_at": "2025-02-20T18:16:44.256982Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.258294Z", "completed_at": "2025-02-20T18:16:44.258302Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009205341339111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_sentido_shape.88347d2c2f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.262167Z", "completed_at": "2025-02-20T18:16:44.268299Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.269596Z", "completed_at": "2025-02-20T18:16:44.269603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00984334945678711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_servico_informado.dd60d17ad8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_informado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_informado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.273373Z", "completed_at": "2025-02-20T18:16:44.278434Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.279746Z", "completed_at": "2025-02-20T18:16:44.279754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008786439895629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_servico_realizado.5376b0386b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_realizado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_realizado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.283648Z", "completed_at": "2025-02-20T18:16:44.288659Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.289968Z", "completed_at": "2025-02-20T18:16:44.289975Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008770942687988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_shape_id.1d4aad9d42", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.293934Z", "completed_at": "2025-02-20T18:16:44.299063Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.300393Z", "completed_at": "2025-02-20T18:16:44.300401Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008883237838745117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_status_viagem.d00cac767b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere status_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.304202Z", "completed_at": "2025-02-20T18:16:44.310604Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.311906Z", "completed_at": "2025-02-20T18:16:44.311913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010096073150634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_timestamp_gps.01b64d27a5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp_gps\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere timestamp_gps is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.315818Z", "completed_at": "2025-02-20T18:16:44.320954Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.322310Z", "completed_at": "2025-02-20T18:16:44.322318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008979320526123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_timestamp_minuto_gps.1157bb9203", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp_minuto_gps\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere timestamp_minuto_gps is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.326281Z", "completed_at": "2025-02-20T18:16:44.331325Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.332648Z", "completed_at": "2025-02-20T18:16:44.332655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008864164352416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_registros_status_viagem_versao_modelo.86225e08a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.336543Z", "completed_at": "2025-02-20T18:16:44.341348Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.342658Z", "completed_at": "2025-02-20T18:16:44.342665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008563518524169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_registros_status_viagem_id_viagem.5e7788f7bf", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_viagem as unique_field\n  from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`registros_status_viagem` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id_viagem is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.346562Z", "completed_at": "2025-02-20T18:16:44.351820Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.353130Z", "completed_at": "2025-02-20T18:16:44.353137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00901341438293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.view_passageiros_hora", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`dashboard_bilhetagem_jae`.`view_passageiros_tile_hora`\nWITH servicos AS (\n  SELECT\n    * EXCEPT(rn)\n  FROM\n    (\n      SELECT\n        *,\n        ROW_NUMBER() OVER (PARTITION BY id_servico_jae ORDER BY data_inicio_vigencia) AS rn\n      FROM\n        `rj-smtr`.`cadastro`.`servicos`\n    )\n  WHERE\n    rn = 1\n)\nSELECT\n  p.data,\n  p.hora,\n  p.modo,\n  p.consorcio,\n  p.id_servico_jae,\n  s.servico,\n  s.descricao_servico,\n  CONCAT(s.servico, ' - ' ,s.descricao_servico) AS nome_completo_servico,\n  s.latitude AS latitude_servico,\n  s.longitude AS longitude_servico,\n  p.sentido,\n  CASE\n    WHEN p.tipo_transacao_smtr = \"Integral\" THEN \"Tarifa Integral\"\n    ELSE p.tipo_transacao_smtr\n  END AS tipo_transacao_smtr,\n  p.tipo_transacao_detalhe_smtr,\n  p.quantidade_passageiros\nFROM\n  `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`passageiros_hora` p\nLEFT JOIN\n  servicos s\nUSING(id_servico_jae)", "relation_name": "`rj-smtr`.`dashboard_bilhetagem_jae`.`view_passageiros_hora`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.357008Z", "completed_at": "2025-02-20T18:16:44.363585Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.364911Z", "completed_at": "2025-02-20T18:16:44.364918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010333776473999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_consorcio_dia_invalida", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_consorcio_operador_dia_invalida`\n\n\nWITH ordem_pagamento_consorcio_operador_dia AS (\n  SELECT\n    data_ordem,\n    id_consorcio,\n    id_ordem_pagamento,\n    SUM(quantidade_total_transacao) AS quantidade_total_transacao,\n    SUM(valor_total_transacao_liquido_ordem) AS valor_total_transacao_liquido,\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_operador_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n  GROUP BY\n    1,\n    2,\n    3\n),\nordem_pagamento_consorcio_dia AS (\n  SELECT\n    data_ordem,\n    id_consorcio,\n    id_ordem_pagamento,\n    quantidade_total_transacao,\n    valor_total_transacao_liquido\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`ordem_pagamento_consorcio_dia`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\nindicadores AS (\n  SELECT\n    cd.data_ordem,\n    cd.id_consorcio,\n    cd.id_ordem_pagamento,\n    cd.quantidade_total_transacao,\n    cod.quantidade_total_transacao AS quantidade_total_transacao_agregacao,\n    cd.valor_total_transacao_liquido,\n    cod.valor_total_transacao_liquido AS valor_total_transacao_liquido_agregacao,\n    ROUND(cd.valor_total_transacao_liquido, 2) != ROUND(cod.valor_total_transacao_liquido, 2) OR cd.quantidade_total_transacao != cod.quantidade_total_transacao AS indicador_agregacao_invalida\n  FROM\n    ordem_pagamento_consorcio_dia cd\n  LEFT JOIN\n    ordem_pagamento_consorcio_operador_dia cod\n  USING(\n    data_ordem,\n    id_consorcio,\n    id_ordem_pagamento\n  )\n)\nSELECT\n  *,\n  '' AS versao\nFROM\n  indicadores\nWHERE\n  indicador_agregacao_invalida = TRUE", "relation_name": "`rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_consorcio_dia_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.368902Z", "completed_at": "2025-02-20T18:16:44.374621Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.375936Z", "completed_at": "2025-02-20T18:16:44.375943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009504079818725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_conformidade", "compiled": true, "compiled_code": "\n\n-- 1. Agrega informa\u00e7\u00f5es de viagens circulares: ajusta\n--    datetime_chegada, calcula tempo total de\n--    viagem e distancia total planejada. Mantem o shape planejado (\"C\")\n--    como padr\u00e3o da viagem.\nwith viagem as (\n    select\n        *,\n        datetime_diff(datetime_chegada, datetime_partida, minute) + 1 as tempo_viagem\n    from (\n        select\n            *\n        from (\n            select\n                * except(sentido_shape, distancia_inicio_fim, shape_id, shape_id_planejado, trip_id, trip_id_planejado, datetime_chegada),\n                datetime_chegada,\n                trip_id_planejado as trip_id,\n                shape_id_planejado as shape_id\n            from\n                `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` v\n            where\n                sentido = \"I\" or sentido = \"V\"\n        )\n        union all (\n            select\n                * except(sentido_shape, distancia_inicio_fim, shape_id, shape_id_planejado, trip_id, trip_id_planejado),\n                trip_id_planejado as trip_id,\n                shape_id_planejado as shape_id,\n            from\n                (select\n                    v.* except(datetime_chegada),\n                    lead(datetime_chegada) over (\n                        partition by id_viagem order by sentido_shape)\n                    as datetime_chegada,\n                    -- TODO: mudar se tiver distancia planejada separada\n                    -- por shape (ida/volta)\n                    -- distancia_planejada,\n                    -- round(distancia_planejada + lead(distancia_planejada) over (\n                    --     partition by id_viagem order by sentido_shape), 3)\n                    -- as distancia_planejada,\n                from\n                    `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_circular` v\n                where\n                    sentido = \"C\"\n                ) c\n            where sentido_shape = \"I\"\n        )\n    )\n)\n-- 2. Calcula os percentuais de conformidade da distancia, trajeto e GPS\nselect distinct\n    v.* except(versao_modelo),\n    d.* except(id_viagem, versao_modelo),\n    IF(data >= DATE(\"2024-11-16\"), v.distancia_planejada*60/tempo_viagem, NULL) as velocidade_media,\n    round(100 * n_registros_shape/n_registros_total, 2) as perc_conformidade_shape,\n    round(100 * d.distancia_aferida/v.distancia_planejada, 2) as perc_conformidade_distancia,\n    round(100 * n_registros_minuto/tempo_viagem, 2) as perc_conformidade_registros,\n    '' as versao_modelo,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom\n    viagem v\ninner join\n    `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` d\non\n    v.id_viagem = d.id_viagem", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.379917Z", "completed_at": "2025-02-20T18:16:44.386826Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.388123Z", "completed_at": "2025-02-20T18:16:44.388130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010646343231201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_distancia_aferida.3f4f58b67a", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_aferida <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.392004Z", "completed_at": "2025-02-20T18:16:44.397176Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.399058Z", "completed_at": "2025-02-20T18:16:44.399072Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010208845138549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_distancia_planejada.ad85bf839a", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_planejada <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.405654Z", "completed_at": "2025-02-20T18:16:44.413588Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.415410Z", "completed_at": "2025-02-20T18:16:44.415423Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013932228088378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_n_registros_end.e1ccb9c563", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_end <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.420523Z", "completed_at": "2025-02-20T18:16:44.425623Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.426954Z", "completed_at": "2025-02-20T18:16:44.426962Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008978128433227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_n_registros_middle.6fda2c93f2", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_middle <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.430992Z", "completed_at": "2025-02-20T18:16:44.437193Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.438521Z", "completed_at": "2025-02-20T18:16:44.438529Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010123968124389648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_n_registros_minuto.82864933b3", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_minuto <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.442390Z", "completed_at": "2025-02-20T18:16:44.447086Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.448387Z", "completed_at": "2025-02-20T18:16:44.448394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008431673049926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_n_registros_start.6777af50be", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_start <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.452384Z", "completed_at": "2025-02-20T18:16:44.457618Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.458935Z", "completed_at": "2025-02-20T18:16:44.458944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009083271026611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_aux_viagem_registros_n_registros_total.c812b681b0", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_total <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.462954Z", "completed_at": "2025-02-20T18:16:44.468065Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.469376Z", "completed_at": "2025-02-20T18:16:44.469384Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008931636810302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_negative_aux_viagem_registros_n_registros_out.16cc121f84", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_out < 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.473291Z", "completed_at": "2025-02-20T18:16:44.479929Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.482308Z", "completed_at": "2025-02-20T18:16:44.482317Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012211322784423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_negative_aux_viagem_registros_n_registros_shape.d8d479f025", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_shape < 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.487806Z", "completed_at": "2025-02-20T18:16:44.492769Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.494083Z", "completed_at": "2025-02-20T18:16:44.494091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008643627166748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_distancia_aferida.af703eccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_aferida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_aferida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.498072Z", "completed_at": "2025-02-20T18:16:44.503413Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.504741Z", "completed_at": "2025-02-20T18:16:44.504749Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00919032096862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_distancia_planejada.a779141cf5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.508664Z", "completed_at": "2025-02-20T18:16:44.513856Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.515189Z", "completed_at": "2025-02-20T18:16:44.515197Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008952617645263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_id_viagem.a786e08594", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.519070Z", "completed_at": "2025-02-20T18:16:44.525422Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.526747Z", "completed_at": "2025-02-20T18:16:44.526755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010159730911254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_end.6be4269aee", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_end\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_end is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.530736Z", "completed_at": "2025-02-20T18:16:44.535805Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.537112Z", "completed_at": "2025-02-20T18:16:44.537120Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008834123611450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_middle.32807232ce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_middle\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_middle is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.540985Z", "completed_at": "2025-02-20T18:16:44.545912Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.547233Z", "completed_at": "2025-02-20T18:16:44.547240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00869131088256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_minuto.157ae1cdaf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_minuto\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_minuto is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.551196Z", "completed_at": "2025-02-20T18:16:44.556143Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.557449Z", "completed_at": "2025-02-20T18:16:44.557456Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008723258972167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_out.0e8817c0b4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_out\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_out is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.561330Z", "completed_at": "2025-02-20T18:16:44.567446Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.568738Z", "completed_at": "2025-02-20T18:16:44.568746Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009839296340942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_shape.e354f14169", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.572631Z", "completed_at": "2025-02-20T18:16:44.577751Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.579072Z", "completed_at": "2025-02-20T18:16:44.579079Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008863449096679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_start.4e1ace515e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_start\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_start is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.583005Z", "completed_at": "2025-02-20T18:16:44.588044Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.589354Z", "completed_at": "2025-02-20T18:16:44.589361Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008840322494506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_n_registros_total.0a1be4060f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_total\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_total is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.593252Z", "completed_at": "2025-02-20T18:16:44.599329Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.600632Z", "completed_at": "2025-02-20T18:16:44.600640Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009818315505981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_aux_viagem_registros_versao_modelo.4e6a36e817", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.604530Z", "completed_at": "2025-02-20T18:16:44.609381Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.610701Z", "completed_at": "2025-02-20T18:16:44.610708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008603096008300781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_aux_viagem_registros_id_viagem.f0eebfdeac", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_viagem as unique_field\n  from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`aux_viagem_registros` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id_viagem is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.614624Z", "completed_at": "2025-02-20T18:16:44.623083Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:44.624412Z", "completed_at": "2025-02-20T18:16:44.624420Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012274742126464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.ordem_pagamento_invalida", "compiled": true, "compiled_code": "\n\nWITH servico_operador_dia_invalida AS (\n  SELECT\n    data_ordem,\n    id_ordem_pagamento,\n    MAX(indicador_captura_invalida) AS indicador_captura_invalida,\n    MAX(indicador_servico_fora_vigencia) AS indicador_servico_fora_vigencia\n  FROM\n    `rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_servico_operador_dia_invalida`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n  GROUP BY\n    1,\n    2\n),\nconsorcio_operador_dia_invalida AS (\n  SELECT DISTINCT\n    data_ordem,\n    id_ordem_pagamento\n  FROM\n    `rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_consorcio_operador_dia_invalida`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\nconsorcio_dia_invalida AS (\n  SELECT DISTINCT\n    data_ordem,\n    id_ordem_pagamento\n  FROM\n    `rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_consorcio_dia_invalida`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\ndia_invalida AS (\n  SELECT\n    data_ordem,\n    id_ordem_pagamento\n  FROM\n    `rj-smtr`.`validacao_dados_jae_staging`.`ordem_pagamento_dia_invalida`\n  \n    WHERE\n      data_ordem = DATE(\"2022-01-01T01:00:00\")\n  \n),\nindicadores AS (\n  SELECT\n    data_ordem,\n    id_ordem_pagamento,\n    CASE\n      WHEN sod.id_ordem_pagamento IS NOT NULL THEN sod.indicador_captura_invalida\n      ELSE FALSE\n    END AS indicador_captura_invalida,\n    CASE\n      WHEN sod.id_ordem_pagamento IS NOT NULL THEN sod.indicador_servico_fora_vigencia\n      ELSE FALSE\n    END AS indicador_servico_fora_vigencia,\n    cod.id_ordem_pagamento IS NOT NULL AS indicador_agregacao_consorcio_operador_dia_invalida,\n    cd.id_ordem_pagamento IS NOT NULL AS indicador_agregacao_consorcio_dia_invalida,\n    d.id_ordem_pagamento IS NOT NULL AS indicador_agregacao_dia_invalida,\n  FROM\n    dia_invalida d\n  FULL OUTER JOIN\n    servico_operador_dia_invalida sod\n  USING(data_ordem, id_ordem_pagamento)\n  FULL OUTER JOIN\n    consorcio_operador_dia_invalida cod\n  USING(data_ordem, id_ordem_pagamento)\n  FULL OUTER JOIN\n    consorcio_dia_invalida cd\n  USING(data_ordem, id_ordem_pagamento)\n)\nSELECT\n  *,\n  '' AS versao\nFROM\n  indicadores\nWHERE\n  indicador_captura_invalida\n  OR indicador_servico_fora_vigencia\n  OR indicador_agregacao_consorcio_operador_dia_invalida\n  OR indicador_agregacao_consorcio_dia_invalida\n  OR indicador_agregacao_dia_invalida", "relation_name": "`rj-smtr`.`validacao_dados_jae`.`ordem_pagamento_invalida`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:44.628400Z", "completed_at": "2025-02-20T18:16:46.440657Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.446268Z", "completed_at": "2025-02-20T18:16:46.446303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8236513137817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_completa", "compiled": true, "compiled_code": "-- depends_on: `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n\n\n\n  \n  \n\n-- 1. Identifica viagens que est\u00e3o dentro do quadro planejado (por\n--    enquanto, consideramos o dia todo).\nwith viagem_periodo as (\n    select distinct\n        p.consorcio,\n        p.vista,\n        p.tipo_dia,\n        v.*,\n        p.inicio_periodo,\n        p.fim_periodo,\n        p.id_tipo_trajeto,\n        0 as tempo_planejado,\n    from (\n        select distinct\n            consorcio,\n            vista,\n            data,\n            tipo_dia,\n            trip_id_planejado as trip_id,\n            servico,\n            inicio_periodo,\n            fim_periodo,\n            id_tipo_trajeto\n        from\n            `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        \n        WHERE\n            data = date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day)\n        \n    ) p\n    inner join (\n        select distinct * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade`\n        \n        WHERE\n            data = date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day)\n        \n    ) v\n    on\n        v.trip_id = p.trip_id\n        and v.data = p.data\n),\nshapes AS (\n  SELECT\n    *\n  FROM\n    `rj-smtr`.`gtfs`.`shapes_geom`\n  WHERE\n    feed_start_date = \"\"\n),\n-- 2. Seleciona viagens completas de acordo com a conformidade\nviagem_comp_conf as (\nselect distinct\n    consorcio,\n    data,\n    tipo_dia,\n    id_empresa,\n    id_veiculo,\n    id_viagem,\n    servico_informado,\n    servico_realizado,\n    vista,\n    trip_id,\n    shape_id,\n    sentido,\n    datetime_partida,\n    datetime_chegada,\n    inicio_periodo,\n    fim_periodo,\n    case\n        when servico_realizado = servico_informado\n        then \"Completa linha correta\"\n        else \"Completa linha incorreta\"\n        end as tipo_viagem,\n    tempo_viagem,\n    tempo_planejado,\n    distancia_planejada,\n    distancia_aferida,\n    n_registros_shape,\n    n_registros_total,\n    n_registros_minuto,\n    velocidade_media,\n    perc_conformidade_shape,\n    perc_conformidade_distancia,\n    perc_conformidade_registros,\n    0 as perc_conformidade_tempo,\n    -- round(100 * tempo_viagem/tempo_planejado, 2) as perc_conformidade_tempo,\n    id_tipo_trajeto,\n    '' as versao_modelo,\n    CURRENT_DATETIME(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom\n    viagem_periodo v\nleft join\n  shapes AS s\nusing\n  (shape_id)\nwhere (\n\n    perc_conformidade_shape >= 80\n)\nand (\n    perc_conformidade_distancia >= 0\n)\nand (\n    perc_conformidade_registros >= 50\n)\n\n),\n-- 3. Filtra viagens com mesma chegada e partida pelo maior % de conformidade do shape\nfiltro_desvio as (\n  SELECT\n    \n    * EXCEPT(rn)\n    \nFROM (\n  SELECT\n    *,\n    \n    ROW_NUMBER() OVER(PARTITION BY id_veiculo, datetime_partida, datetime_chegada ORDER BY perc_conformidade_shape DESC) AS rn\n    \n  FROM\n    viagem_comp_conf )\nWHERE\n  rn = 1\n),\n-- 4. Filtra viagens com partida ou chegada diferentes pela maior distancia percorrida\nfiltro_partida AS (\n  SELECT\n    * EXCEPT(rn)\n  FROM (\n    SELECT\n      *,\n      ROW_NUMBER() OVER(PARTITION BY id_veiculo, datetime_partida ORDER BY distancia_planejada DESC) AS rn\n    FROM\n      filtro_desvio )\n  WHERE\n    rn = 1 )\n-- filtro_chegada\nSELECT\n  * EXCEPT(rn)\nFROM (\n  SELECT\n    *,\n    ROW_NUMBER() OVER(PARTITION BY id_veiculo, datetime_chegada ORDER BY distancia_planejada DESC) AS rn\n  FROM\n    filtro_partida )\nWHERE\n  rn = 1", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.471665Z", "completed_at": "2025-02-20T18:16:46.489400Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.491370Z", "completed_at": "2025-02-20T18:16:46.491382Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030532121658325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_conformidade_sentido__I__V__C.37e4bf801f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.496880Z", "completed_at": "2025-02-20T18:16:46.502531Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.503878Z", "completed_at": "2025-02-20T18:16:46.503886Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010059118270874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_conformidade_sentido_shape__I__V__C.1c6ae2b41d", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido_shape as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido_shape\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.507813Z", "completed_at": "2025-02-20T18:16:46.512646Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.513916Z", "completed_at": "2025-02-20T18:16:46.513925Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008446455001831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_distancia_aferida.14ac42d258", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_aferida <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.517658Z", "completed_at": "2025-02-20T18:16:46.522335Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.523572Z", "completed_at": "2025-02-20T18:16:46.523578Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00823831558227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_distancia_planejada.399d334601", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_planejada <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.527328Z", "completed_at": "2025-02-20T18:16:46.532994Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.534235Z", "completed_at": "2025-02-20T18:16:46.534242Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009304046630859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_n_registros_end.2e79c19e44", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_end <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.537912Z", "completed_at": "2025-02-20T18:16:46.542916Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.544163Z", "completed_at": "2025-02-20T18:16:46.544170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008575916290283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_n_registros_middle.794c022bd1", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_middle <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.548619Z", "completed_at": "2025-02-20T18:16:46.553510Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.554815Z", "completed_at": "2025-02-20T18:16:46.554823Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00914621353149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_n_registros_minuto.44dcb2a328", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_minuto <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.558590Z", "completed_at": "2025-02-20T18:16:46.564637Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.565979Z", "completed_at": "2025-02-20T18:16:46.565988Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010440826416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_n_registros_start.3b4d5df527", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_start <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.572242Z", "completed_at": "2025-02-20T18:16:46.577126Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.578412Z", "completed_at": "2025-02-20T18:16:46.578420Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00851297378540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_n_registros_total.845a3f5e81", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_total <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.582581Z", "completed_at": "2025-02-20T18:16:46.587492Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.588737Z", "completed_at": "2025-02-20T18:16:46.588745Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00867605209350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_perc_conformidade_distancia.947723cc56", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where perc_conformidade_distancia <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.592631Z", "completed_at": "2025-02-20T18:16:46.597515Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.598811Z", "completed_at": "2025-02-20T18:16:46.598819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008634805679321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_perc_conformidade_registros.078f53372c", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where perc_conformidade_registros <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.602523Z", "completed_at": "2025-02-20T18:16:46.608196Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.609424Z", "completed_at": "2025-02-20T18:16:46.609432Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009229898452758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_perc_conformidade_shape.672bafc4f5", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where perc_conformidade_shape <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.613144Z", "completed_at": "2025-02-20T18:16:46.617599Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.618887Z", "completed_at": "2025-02-20T18:16:46.618895Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008045673370361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_conformidade_tempo_viagem.94e16edeba", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where tempo_viagem <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.622621Z", "completed_at": "2025-02-20T18:16:46.627285Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.628527Z", "completed_at": "2025-02-20T18:16:46.628535Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008281707763671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_negative_viagem_conformidade_n_registros_out.05ed52b76e", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_out < 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.632317Z", "completed_at": "2025-02-20T18:16:46.636800Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.638027Z", "completed_at": "2025-02-20T18:16:46.638034Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008064746856689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_negative_viagem_conformidade_n_registros_shape.fa86a62956", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_shape < 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.641815Z", "completed_at": "2025-02-20T18:16:46.647674Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.648907Z", "completed_at": "2025-02-20T18:16:46.648915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009478569030761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_data.dba44f5b88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.652599Z", "completed_at": "2025-02-20T18:16:46.657332Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.658633Z", "completed_at": "2025-02-20T18:16:46.658640Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008369684219360352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_datetime_chegada.72c3aa8bba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_chegada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_chegada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.662592Z", "completed_at": "2025-02-20T18:16:46.667347Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.668601Z", "completed_at": "2025-02-20T18:16:46.668608Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008395910263061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_datetime_partida.fd79047671", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_partida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_partida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.672436Z", "completed_at": "2025-02-20T18:16:46.677334Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.678627Z", "completed_at": "2025-02-20T18:16:46.678634Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008543252944946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_distancia_aferida.f7b56d4343", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_aferida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_aferida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.682404Z", "completed_at": "2025-02-20T18:16:46.688366Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.689597Z", "completed_at": "2025-02-20T18:16:46.689605Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009598016738891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_distancia_planejada.9a5bf3230e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.693257Z", "completed_at": "2025-02-20T18:16:46.697966Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.699226Z", "completed_at": "2025-02-20T18:16:46.699232Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00826263427734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_id_veiculo.4dc76608fb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.702947Z", "completed_at": "2025-02-20T18:16:46.707593Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.708824Z", "completed_at": "2025-02-20T18:16:46.708831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008324384689331055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_id_viagem.52f7dd7469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.712718Z", "completed_at": "2025-02-20T18:16:46.717665Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.718919Z", "completed_at": "2025-02-20T18:16:46.718926Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008551597595214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_end.accb64d6bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_end\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_end is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.722617Z", "completed_at": "2025-02-20T18:16:46.728395Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.729631Z", "completed_at": "2025-02-20T18:16:46.729639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009387016296386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_middle.7965304122", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_middle\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_middle is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.733361Z", "completed_at": "2025-02-20T18:16:46.739146Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.740465Z", "completed_at": "2025-02-20T18:16:46.740474Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00946044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_minuto.a1804e8458", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_minuto\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_minuto is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.744334Z", "completed_at": "2025-02-20T18:16:46.750239Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.751604Z", "completed_at": "2025-02-20T18:16:46.751612Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009788036346435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_out.6dac645a68", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_out\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_out is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.755564Z", "completed_at": "2025-02-20T18:16:46.760456Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.761695Z", "completed_at": "2025-02-20T18:16:46.761703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008515119552612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_shape.567191d3b2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.765448Z", "completed_at": "2025-02-20T18:16:46.771482Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.772717Z", "completed_at": "2025-02-20T18:16:46.772724Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00958395004272461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_start.53a2b2e530", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_start\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_start is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.776689Z", "completed_at": "2025-02-20T18:16:46.781650Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.782947Z", "completed_at": "2025-02-20T18:16:46.782955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008594512939453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_n_registros_total.8514b50af0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_total\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_total is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.786745Z", "completed_at": "2025-02-20T18:16:46.791506Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.792756Z", "completed_at": "2025-02-20T18:16:46.792763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008427143096923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_perc_conformidade_distancia.e95ad3d84b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_conformidade_distancia\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_conformidade_distancia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.796673Z", "completed_at": "2025-02-20T18:16:46.802705Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.803945Z", "completed_at": "2025-02-20T18:16:46.803953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009685277938842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_perc_conformidade_registros.5889951b7b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_conformidade_registros\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_conformidade_registros is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.807835Z", "completed_at": "2025-02-20T18:16:46.812763Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.814036Z", "completed_at": "2025-02-20T18:16:46.814043Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008676528930664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_perc_conformidade_shape.c779adcc22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_conformidade_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_conformidade_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.817834Z", "completed_at": "2025-02-20T18:16:46.822628Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.823939Z", "completed_at": "2025-02-20T18:16:46.823946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00848531723022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_sentido.9ff9017055", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.828426Z", "completed_at": "2025-02-20T18:16:46.833411Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.834699Z", "completed_at": "2025-02-20T18:16:46.834707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008695125579833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_sentido_shape.e828f58e76", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.838594Z", "completed_at": "2025-02-20T18:16:46.844586Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.845884Z", "completed_at": "2025-02-20T18:16:46.845891Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009851694107055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_servico_informado.d130583ad1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_informado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_informado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.849676Z", "completed_at": "2025-02-20T18:16:46.854490Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.855782Z", "completed_at": "2025-02-20T18:16:46.855788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00852513313293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_servico_realizado.3bd70666f8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_realizado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_realizado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.859573Z", "completed_at": "2025-02-20T18:16:46.864309Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.865552Z", "completed_at": "2025-02-20T18:16:46.865559Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008404731750488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_shape_id.2fd4863204", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.869358Z", "completed_at": "2025-02-20T18:16:46.878175Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.879945Z", "completed_at": "2025-02-20T18:16:46.879956Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013388633728027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_tempo_viagem.9d731143cc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tempo_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tempo_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.885405Z", "completed_at": "2025-02-20T18:16:46.893845Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.895341Z", "completed_at": "2025-02-20T18:16:46.895353Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01319575309753418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_conformidade_versao_modelo.ddf040eb5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.900595Z", "completed_at": "2025-02-20T18:16:46.906190Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.907493Z", "completed_at": "2025-02-20T18:16:46.907502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009763717651367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_viagem_conformidade_id_viagem.5aa802e5bf", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_viagem as unique_field\n  from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_conformidade` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id_viagem is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.911374Z", "completed_at": "2025-02-20T18:16:46.917041Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.918354Z", "completed_at": "2025-02-20T18:16:46.918362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009444952011108398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.frota_operante", "compiled": true, "compiled_code": "\n\nSELECT\n  MIN(data) AS data,\n  EXTRACT(YEAR FROM data) AS ano,\n  EXTRACT(MONTH FROM data) AS mes,\n  \"\u00d4nibus\" AS modo,\n  COUNT(DISTINCT id_veiculo) AS quantidade_veiculo_mes,\n  CURRENT_DATE(\"America/Sao_Paulo\") AS data_ultima_atualizacao,\n  '' as versao\nFROM\n  `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n  --rj-smtr.projeto_subsidio_sppo.viagem_completa\nWHERE\n\n  data BETWEEN DATE_TRUNC(DATE(\"2022-01-01T01:00:00\"), MONTH)\n  AND LAST_DAY(DATE(\"2022-01-01T01:00:00\"), MONTH)\n  AND data < DATE_TRUNC(CURRENT_DATE(\"America/Sao_Paulo\"), MONTH)\n\nGROUP BY\n  2,\n  3", "relation_name": "`rj-smtr`.`indicadores_continuados_egp_staging`.`frota_operante`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.922186Z", "completed_at": "2025-02-20T18:16:46.943325Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.944647Z", "completed_at": "2025-02-20T18:16:46.944655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024857044219970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.idade_media_frota_operante_onibus", "compiled": true, "compiled_code": "\n\nWITH\n   __dbt__cte__sppo_licenciamento as (\n\n\nSELECT\n  *\nFROM\n  `rj-smtr`.`veiculo`.`licenciamento`\nWHERE\n  tipo_veiculo NOT LIKE \"%ROD%\"\n  and modo = 'ONIBUS'\n), -- 1. Seleciona a \u00faltima data dispon\u00edvel de cada m\u00eas\n  datas AS (\n  SELECT\n    EXTRACT(MONTH FROM data) AS mes,\n    EXTRACT(YEAR FROM data) AS ano,\n    MAX(data) AS data\n  FROM\n    __dbt__cte__sppo_licenciamento\n    --rj-smtr.veiculo.sppo_licenciamento\n  WHERE\n  \n    data BETWEEN DATE_TRUNC(DATE(\"2022-01-01T01:00:00\"), MONTH)\n    AND LAST_DAY(DATE(\"2022-01-01T01:00:00\"), MONTH)\n    AND data < DATE_TRUNC(CURRENT_DATE(\"America/Sao_Paulo\"), MONTH)\n  \n  GROUP BY\n    1,\n    2),\n  -- 2. Verifica frota operante\n  frota_operante AS (\n  SELECT\n    DISTINCT id_veiculo,\n    EXTRACT(MONTH FROM data) AS mes,\n    EXTRACT(YEAR FROM data) AS ano,\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n    --rj-smtr.projeto_subsidio_sppo.viagem_completa\n  WHERE\n  \n    data BETWEEN DATE_TRUNC(DATE(\"2022-01-01T01:00:00\"), MONTH)\n    AND LAST_DAY(DATE(\"2022-01-01T01:00:00\"), MONTH)\n    AND data < DATE_TRUNC(CURRENT_DATE(\"America/Sao_Paulo\"), MONTH)\n  \n  ),\n  -- 3. Calcula a idade de todos os ve\u00edculos para a data de refer\u00eancia\n  idade_frota AS (\n  SELECT\n    data,\n    EXTRACT(YEAR FROM data) - CAST(ano_fabricacao AS INT64) AS idade\n  FROM\n    datas AS d\n  LEFT JOIN\n    __dbt__cte__sppo_licenciamento\n    --rj-smtr.veiculo.sppo_licenciamento AS l\n  USING\n    (data)\n  LEFT JOIN\n    frota_operante AS f\n  USING\n    (id_veiculo, mes, ano)\n  WHERE\n    f.id_veiculo IS NOT NULL\n  )\n-- 4. Calcula a idade m\u00e9dia\nSELECT\n  data,\n  EXTRACT(YEAR FROM data) AS ano,\n  EXTRACT(MONTH FROM data) AS mes,\n  \"\u00d4nibus\" AS modo,\n  ROUND(AVG(idade),2) AS idade_media_veiculo_mes,\n  CURRENT_DATE(\"America/Sao_Paulo\") AS data_ultima_atualizacao,\n  '' as versao\nFROM\n  idade_frota\nGROUP BY\n  1,\n  2,\n  3", "relation_name": "`rj-smtr`.`indicadores_continuados_egp_staging`.`idade_media_frota_operante_onibus`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.948538Z", "completed_at": "2025-02-20T18:16:46.953470Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.954741Z", "completed_at": "2025-02-20T18:16:46.954748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008645296096801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_dia", "compiled": true, "compiled_code": "WITH\n  planejado AS (\n  SELECT\n    consorcio,\n    data,\n    tipo_dia,\n    trip_id_planejado AS trip_id,\n    servico,\n    sentido,\n    CASE\n      WHEN sentido = \"C\" THEN MAX(distancia_planejada)\n    ELSE\n      SUM(distancia_planejada)\n    END\n    AS distancia_planejada,\n    CASE\n      WHEN sentido = \"C\" THEN MAX(distancia_total_planejada)\n    ELSE\n      SUM(distancia_total_planejada)\n    END AS distancia_total_planejada,\n    NULL AS viagens_planejadas\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n    -- `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n  WHERE\n    data >= \"2022-06-01\"\n    AND data < DATE( \"2023-01-16\" )\n    AND distancia_total_planejada > 0\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6),\n  viagem AS (\n  SELECT\n    data,\n    trip_id,\n    COUNT(id_viagem) AS viagens_realizadas\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n    -- `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n  WHERE\n    data >= \"2022-06-01\"\n    AND data < DATE( \"2023-01-16\" )\n  GROUP BY\n    1,\n    2),\n  sumario AS (\n  SELECT\n    consorcio,\n    data,\n    tipo_dia,\n    servico,\n    distancia_planejada,\n    NULL AS viagens_planejadas,\n    IFNULL(SUM(v.viagens_realizadas), 0) AS viagens_subsidio,\n    distancia_total_planejada,\n    (IFNULL(SUM(v.viagens_realizadas), 0) * distancia_planejada) AS distancia_total_subsidio\n  FROM\n    planejado AS p\n  LEFT JOIN\n    viagem AS v\n  USING\n    (trip_id,\n      data)\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    8 ),\n  sumario_agg AS (\n  SELECT\n    consorcio,\n    data,\n    tipo_dia,\n    servico,\n    NULL AS viagens_planejadas,\n    IFNULL(SUM(viagens_subsidio), 0) AS viagens_subsidio,\n    distancia_total_planejada,\n    ROUND(SUM(distancia_total_subsidio), 3) AS distancia_total_subsidio\n  FROM\n    sumario\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    7 ),\n  valor AS (\n  SELECT\n    s.*,\n    v.valor_subsidio_por_km,\n    ROUND(distancia_total_subsidio * v.valor_subsidio_por_km, 2) AS valor_total_aferido,\n  IF\n    (distancia_total_planejada = 0, NULL, ROUND(100*distancia_total_subsidio/distancia_total_planejada, 2)) AS perc_distancia_total_subsidio\n  FROM\n    sumario_agg s\n  LEFT JOIN (\n    SELECT\n      *\n    FROM\n      `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n      -- `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n    WHERE\n      data >= \"2022-06-01\"\n      AND data < DATE( \"2023-01-16\" )) AS v\n  ON\n    v.data = s.data )\nSELECT\n  *,\n  CASE\n    WHEN (perc_distancia_total_subsidio < 80) OR (perc_distancia_total_subsidio IS NULL) THEN 0\n  ELSE\n  valor_total_aferido\nEND\n  AS valor_total_subsidio\nFROM\n  valor", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`sumario_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.958522Z", "completed_at": "2025-02-20T18:16:46.962375Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.963644Z", "completed_at": "2025-02-20T18:16:46.963652Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00748753547668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_onibus_datario", "compiled": true, "compiled_code": "\nselect\n    data,\n    consorcio,\n    tipo_dia,\n    id_empresa,\n    id_veiculo,\n    id_viagem,\n    servico_realizado as servico,\n    shape_id,\n    sentido,\n    datetime_partida,\n    datetime_chegada,\n    tempo_viagem,\n    distancia_planejada,\n    perc_conformidade_shape,\n    perc_conformidade_registros,\n    versao_modelo\nfrom `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`", "relation_name": "`rj-smtr`.`datario`.`viagem_onibus`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.981530Z", "completed_at": "2025-02-20T18:16:46.986809Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.988075Z", "completed_at": "2025-02-20T18:16:46.988082Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008934497833251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagens_realizadas", "compiled": true, "compiled_code": "SELECT\n  *\nFROM\n  `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\nWHERE\n  data BETWEEN \"2022-06-01\" AND DATE(\"2022-01-01T01:00:00\")", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`viagens_realizadas`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:46.991870Z", "completed_at": "2025-02-20T18:16:46.996659Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:46.997942Z", "completed_at": "2025-02-20T18:16:46.997949Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00845479965209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_completa_sentido__I__V__C.14734d12d7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        sentido as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by sentido\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'I','V','C'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.001716Z", "completed_at": "2025-02-20T18:16:47.006784Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.008093Z", "completed_at": "2025-02-20T18:16:47.008100Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008834600448608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_completa_tipo_dia__Dia_til__Sabado__Domingo.be741d00ee", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_dia as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by tipo_dia\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dia \u00datil','Sabado','Domingo'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.012116Z", "completed_at": "2025-02-20T18:16:47.016964Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.018216Z", "completed_at": "2025-02-20T18:16:47.018223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008493185043334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.accepted_values_viagem_completa_tipo_viagem__Completa_linha_correta__Completa_linha_incorreta.d7777aca98", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_viagem as value_field,\n        count(*) as n_records\n\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by tipo_viagem\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Completa linha correta','Completa linha incorreta'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.021929Z", "completed_at": "2025-02-20T18:16:47.027701Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.028946Z", "completed_at": "2025-02-20T18:16:47.028953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009334325790405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_distancia_aferida.f5d805262a", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_aferida <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.032664Z", "completed_at": "2025-02-20T18:16:47.037174Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.038427Z", "completed_at": "2025-02-20T18:16:47.038433Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008078336715698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_distancia_planejada.a4e65fb078", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where distancia_planejada <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.042162Z", "completed_at": "2025-02-20T18:16:47.046751Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.048029Z", "completed_at": "2025-02-20T18:16:47.048036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00820159912109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_n_registros_minuto.1fa0ffac2f", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_minuto <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.051931Z", "completed_at": "2025-02-20T18:16:47.056581Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.057821Z", "completed_at": "2025-02-20T18:16:47.057828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008454322814941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_n_registros_shape.8fb346344d", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_shape <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.061547Z", "completed_at": "2025-02-20T18:16:47.067437Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.068740Z", "completed_at": "2025-02-20T18:16:47.068747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00958251953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_n_registros_total.25967100b1", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where n_registros_total <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.074197Z", "completed_at": "2025-02-20T18:16:47.078893Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.080135Z", "completed_at": "2025-02-20T18:16:47.080143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009624719619750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_perc_conformidade_distancia.7087a86b2d", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where perc_conformidade_distancia <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.084153Z", "completed_at": "2025-02-20T18:16:47.088774Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.090045Z", "completed_at": "2025-02-20T18:16:47.090053Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00823664665222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_perc_conformidade_registros.8cc9a28202", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where perc_conformidade_registros <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.093949Z", "completed_at": "2025-02-20T18:16:47.098630Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.099874Z", "completed_at": "2025-02-20T18:16:47.099881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008394241333007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_perc_conformidade_shape.1ad412b569", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where perc_conformidade_shape <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.103642Z", "completed_at": "2025-02-20T18:16:47.109542Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.110787Z", "completed_at": "2025-02-20T18:16:47.110794Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009551525115966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.greater_than_zero_viagem_completa_tempo_viagem.6c4c35eea7", "compiled": true, "compiled_code": "\n\n    select *\n    from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    where tempo_viagem <= 0\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.114632Z", "completed_at": "2025-02-20T18:16:47.119336Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.120571Z", "completed_at": "2025-02-20T18:16:47.120577Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00823664665222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_consorcio.ef41dcab9b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consorcio\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere consorcio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.124288Z", "completed_at": "2025-02-20T18:16:47.129096Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.130387Z", "completed_at": "2025-02-20T18:16:47.130395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008423089981079102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_data.60008eec9c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.134116Z", "completed_at": "2025-02-20T18:16:47.139616Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.140876Z", "completed_at": "2025-02-20T18:16:47.140884Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009173870086669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_datetime_chegada.fac30fe07a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_chegada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_chegada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.144715Z", "completed_at": "2025-02-20T18:16:47.151533Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.152802Z", "completed_at": "2025-02-20T18:16:47.152811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010577917098999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_datetime_partida.a62e5f9eac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_partida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere datetime_partida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.157225Z", "completed_at": "2025-02-20T18:16:47.162377Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.163647Z", "completed_at": "2025-02-20T18:16:47.163656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008999109268188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_distancia_aferida.0edb9adb33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_aferida\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_aferida is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.167465Z", "completed_at": "2025-02-20T18:16:47.172663Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.173905Z", "completed_at": "2025-02-20T18:16:47.173913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00888514518737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_distancia_planejada.bbd49d7634", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.177728Z", "completed_at": "2025-02-20T18:16:47.183975Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.185313Z", "completed_at": "2025-02-20T18:16:47.185321Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010005712509155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_id_veiculo.4b31ddd12f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_veiculo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_veiculo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.189166Z", "completed_at": "2025-02-20T18:16:47.194328Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.195630Z", "completed_at": "2025-02-20T18:16:47.195639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008890151977539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_id_viagem.c4481cf0da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.199580Z", "completed_at": "2025-02-20T18:16:47.204714Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.205960Z", "completed_at": "2025-02-20T18:16:47.205974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00890803337097168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_n_registros_minuto.4c23c345c5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_minuto\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_minuto is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.209767Z", "completed_at": "2025-02-20T18:16:47.217733Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.219757Z", "completed_at": "2025-02-20T18:16:47.219770Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012949943542480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_n_registros_shape.9d239e7953", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.226345Z", "completed_at": "2025-02-20T18:16:47.236387Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.238485Z", "completed_at": "2025-02-20T18:16:47.238498Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016190052032470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_n_registros_total.4a103f1249", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect n_registros_total\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere n_registros_total is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.244758Z", "completed_at": "2025-02-20T18:16:47.253250Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.255642Z", "completed_at": "2025-02-20T18:16:47.255657Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015102624893188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_perc_conformidade_distancia.837283bcfc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_conformidade_distancia\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_conformidade_distancia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.261494Z", "completed_at": "2025-02-20T18:16:47.267513Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.269002Z", "completed_at": "2025-02-20T18:16:47.269013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010243654251098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_perc_conformidade_registros.0d86da0376", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_conformidade_registros\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_conformidade_registros is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.273489Z", "completed_at": "2025-02-20T18:16:47.280527Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.282324Z", "completed_at": "2025-02-20T18:16:47.282337Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012019634246826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_perc_conformidade_shape.25bb80e526", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_conformidade_shape\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_conformidade_shape is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.287517Z", "completed_at": "2025-02-20T18:16:47.296490Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.297770Z", "completed_at": "2025-02-20T18:16:47.297779Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013106346130371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_sentido.a8ba9e34e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sentido\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere sentido is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.301839Z", "completed_at": "2025-02-20T18:16:47.307281Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.308637Z", "completed_at": "2025-02-20T18:16:47.308645Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009249210357666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_servico_informado.3aa58feb5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_informado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_informado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.312696Z", "completed_at": "2025-02-20T18:16:47.318210Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.319510Z", "completed_at": "2025-02-20T18:16:47.319519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009345531463623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_servico_realizado.7433281d87", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico_realizado\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico_realizado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.323354Z", "completed_at": "2025-02-20T18:16:47.328219Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.329504Z", "completed_at": "2025-02-20T18:16:47.329511Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008568048477172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_shape_id.cfa5f99155", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect shape_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere shape_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.333348Z", "completed_at": "2025-02-20T18:16:47.339926Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.341199Z", "completed_at": "2025-02-20T18:16:47.341207Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010265827178955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_tempo_viagem.2d2a673c5b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tempo_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tempo_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.345260Z", "completed_at": "2025-02-20T18:16:47.350711Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.351991Z", "completed_at": "2025-02-20T18:16:47.352000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009251832962036133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_tipo_dia.1718470616", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_dia\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.355822Z", "completed_at": "2025-02-20T18:16:47.361033Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.362315Z", "completed_at": "2025-02-20T18:16:47.362323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008875370025634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_tipo_viagem.6bda4a1de6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_viagem\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.366139Z", "completed_at": "2025-02-20T18:16:47.372277Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.373548Z", "completed_at": "2025-02-20T18:16:47.373555Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00982046127319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_trip_id.b9d8d1d6fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trip_id\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere trip_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.377366Z", "completed_at": "2025-02-20T18:16:47.382176Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.383468Z", "completed_at": "2025-02-20T18:16:47.383475Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008513927459716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_versao_modelo.08474ee6c1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect versao_modelo\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere versao_modelo is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.387395Z", "completed_at": "2025-02-20T18:16:47.392428Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.393796Z", "completed_at": "2025-02-20T18:16:47.393805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008953571319580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null_viagem_completa_vista.ace89b5843", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vista\nfrom (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere vista is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.398412Z", "completed_at": "2025-02-20T18:16:47.403831Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.405146Z", "completed_at": "2025-02-20T18:16:47.405155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009427070617675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.unique_viagem_completa_id_viagem.e7a957c7b9", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id_viagem as unique_field\n  from (select * from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n  where id_viagem is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.408997Z", "completed_at": "2025-02-20T18:16:47.416412Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.417684Z", "completed_at": "2025-02-20T18:16:47.417692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011079788208007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.indicadores_mes", "compiled": true, "compiled_code": "\n\n\nSELECT\n    ano,\n    mes,\n    modo AS modo,\n    \"Passageiros pagantes por m\u00eas\" AS nome_indicador,\n    quantidade_passageiro_pagante_mes AS valor,\n    data_ultima_atualizacao\nFROM `rj-smtr`.`indicadores_continuados_egp_staging`.`passageiro_pagante`\nUNION ALL\n\nSELECT\n    ano,\n    mes,\n    modo AS modo,\n    \"Gratuidades por m\u00eas\" AS nome_indicador,\n    quantidade_passageiro_gratuidade_mes AS valor,\n    data_ultima_atualizacao\nFROM `rj-smtr`.`indicadores_continuados_egp_staging`.`passageiro_gratuidade`\nUNION ALL\n\nSELECT\n    ano,\n    mes,\n    modo AS modo,\n    \"Frota operante por m\u00eas\" AS nome_indicador,\n    quantidade_veiculo_mes AS valor,\n    data_ultima_atualizacao\nFROM `rj-smtr`.`indicadores_continuados_egp_staging`.`frota_operante`\nUNION ALL\n\nSELECT\n    ano,\n    mes,\n    modo AS modo,\n    \"Idade m\u00e9dia da frota operante por m\u00eas\" AS nome_indicador,\n    idade_media_veiculo_mes AS valor,\n    data_ultima_atualizacao\nFROM `rj-smtr`.`indicadores_continuados_egp_staging`.`idade_media_frota_operante_onibus`\n\n", "relation_name": "`rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.421488Z", "completed_at": "2025-02-20T18:16:47.428281Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.429563Z", "completed_at": "2025-02-20T18:16:47.429571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010469436645507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.monitoramento_viagem_transacao", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__viagem_transacao_aux as (\n\n\n \n\nwith\n    -- 1. Transa\u00e7\u00f5es Ja\u00e9\n    transacao as (\n        select id_veiculo, datetime_transacao\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`\n        -- from `rj-smtr.br_rj_riodejaneiro_bilhetagem.transacao`\n        where\n            data between date(\"2022-01-01T01:00:00\") and date_add(\n                date(\"2022-01-01T01:00:00\"), interval 1 day\n            )\n            and date(datetime_processamento) - date(datetime_transacao)\n            <= interval 6 day\n    ),\n    -- 2. Transa\u00e7\u00f5es RioCard\n    transacao_riocard as (\n        select id_veiculo, datetime_transacao\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`\n        -- from `rj-smtr.br_rj_riodejaneiro_bilhetagem.transacao_riocard`\n        where\n            data between date(\"2022-01-01T01:00:00\") and date_add(\n                date(\"2022-01-01T01:00:00\"), interval 1 day\n            )\n            and date(datetime_processamento) - date(datetime_transacao)\n            <= interval 6 day\n    ),\n    -- 3. GPS Validador\n    gps_validador as (\n        select\n            data,\n            datetime_gps,\n            id_veiculo,\n            id_validador,\n            estado_equipamento,\n            latitude,\n            longitude\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`\n        -- from `rj-smtr.br_rj_riodejaneiro_bilhetagem.gps_validador`\n        where\n            data between date(\"2022-01-01T01:00:00\") and date_add(\n                date(\"2022-01-01T01:00:00\"), interval 1 day\n            )\n            and (\n                (\n                    data < date(\"2024-11-16\")\n                    and (latitude != 0 or longitude != 0)\n                )\n                or data >= date(\"2024-11-16\")\n            )\n            and date(datetime_captura) - date(datetime_gps) <= interval 6 day\n    ),\n    -- 4. Viagens realizadas\n    viagem as (\n        select\n            data,\n            servico_realizado as servico,\n            datetime_partida,\n            datetime_chegada,\n            id_veiculo,\n            id_viagem,\n            distancia_planejada,\n            sentido\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n        -- from `rj-smtr.projeto_subsidio_sppo.viagem_completa`\n        where\n            data\n            between date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day) and date(\n                \"2022-01-01T01:00:00\"\n            )\n    ),\n    -- 5. Status dos ve\u00edculos\n    veiculos as (\n        select data, id_veiculo, status, tecnologia\n        from `rj-smtr`.`veiculo`.`sppo_veiculo_dia`\n        -- from `rj-smtr.veiculo.sppo_veiculo_dia`\n        where\n            data\n            between date(\"2022-01-01T01:00:00\") and date(\"2022-01-01T01:00:00\")\n    ),\n    -- 6. Viagem, para fins de contagem de passageiros, com toler\u00e2ncia de 30 minutos,\n    -- limitada pela viagem anterior\n    viagem_com_tolerancia_previa as (\n        select\n            v.*,\n            lag(v.datetime_chegada) over (\n                partition by v.id_veiculo order by v.datetime_partida\n            ) as viagem_anterior_chegada,\n            case\n                when\n                    lag(v.datetime_chegada) over (\n                        partition by v.id_veiculo order by v.datetime_partida\n                    )\n                    is null\n                then\n                    datetime(\n                        timestamp_sub(\n                            datetime_partida, interval 30 minute\n                        )\n                    )\n                else\n                    datetime(\n                        timestamp_add(\n                            greatest(\n                                timestamp_sub(\n                                    datetime_partida,\n                                    interval 30 minute\n                                ),\n                                lag(v.datetime_chegada) over (\n                                    partition by v.id_veiculo\n                                    order by v.datetime_partida\n                                )\n                            ),\n                            interval 1 second\n                        )\n                    )\n            end as datetime_partida_com_tolerancia\n        from viagem as v\n    ),\n    -- 7. Considera apenas as viagens realizadas no per\u00edodo de apura\u00e7\u00e3o\n    viagem_com_tolerancia as (\n        select *\n        from viagem_com_tolerancia_previa\n        where\n            data\n            between date(\"2022-01-01T01:00:00\") and date(\"2022-01-01T01:00:00\")\n    ),\n    -- 8. Contagem de transa\u00e7\u00f5es Ja\u00e9\n    transacao_contagem as (\n        select v.data, v.id_viagem, count(t.datetime_transacao) as quantidade_transacao\n        from transacao as t\n        join\n            viagem_com_tolerancia as v\n            on t.id_veiculo = substr(v.id_veiculo, 2)\n            and t.datetime_transacao\n            between v.datetime_partida_com_tolerancia and v.datetime_chegada\n        group by v.data, v.id_viagem\n    ),\n    -- 9. Contagem de transa\u00e7\u00f5es RioCard\n    transacao_riocard_contagem as (\n        select\n            v.data,\n            v.id_viagem,\n            count(tr.datetime_transacao) as quantidade_transacao_riocard\n        from transacao_riocard as tr\n        join\n            viagem_com_tolerancia as v\n            on tr.id_veiculo = substr(v.id_veiculo, 2)\n            and tr.datetime_transacao\n            between v.datetime_partida_com_tolerancia and v.datetime_chegada\n        group by v.data, v.id_viagem\n    ),\n    -- 10. Ajusta estado do equipamento\n    -- Agrupa mesma posi\u00e7\u00e3o para mesmo validador e ve\u00edculo, mantendo preferencialmente\n    -- o estado do equipamento \"ABERTO\" quanto latitude e longitude for diferente de\n    -- (0,0)\n    estado_equipamento_aux as (\n        select *\n        from\n            (\n                (\n                    select\n                        data,\n                        id_validador,\n                        id_veiculo,\n                        latitude,\n                        longitude,\n                        if(\n                            count(case when estado_equipamento = \"ABERTO\" then 1 end)\n                            >= 1,\n                            \"ABERTO\",\n                            \"FECHADO\"\n                        ) as estado_equipamento,\n                        min(datetime_gps) as datetime_gps,\n                    from gps_validador\n                    where\n                        (\n                            data >= date(\"2024-11-16\")\n                            and latitude != 0\n                            and longitude != 0\n                        )\n                        or data < date(\"2024-11-16\")\n                    group by 1, 2, 3, 4, 5\n                )\n                union all\n                (\n                    select\n                        data,\n                        id_validador,\n                        id_veiculo,\n                        latitude,\n                        longitude,\n                        estado_equipamento,\n                        datetime_gps,\n                    from gps_validador\n                    where\n                        data >= date(\"2024-11-16\")\n                        and latitude = 0\n                        and longitude = 0\n                )\n            )\n    ),\n    -- 11. Relacionamento entre estado do equipamento e viagem\n    gps_validador_viagem as (\n        select\n            v.data,\n            e.datetime_gps,\n            v.id_viagem,\n            e.id_validador,\n            e.estado_equipamento,\n            e.latitude,\n            e.longitude\n        from estado_equipamento_aux as e\n        join\n            viagem as v\n            on e.id_veiculo = substr(v.id_veiculo, 2)\n            and e.datetime_gps between v.datetime_partida and v.datetime_chegada\n    ),\n    -- 12. Calcula a porcentagem de estado do equipamento \"ABERTO\" por validador e\n    -- viagem\n    estado_equipamento_perc as (\n        select\n            data,\n            id_viagem,\n            id_validador,\n            countif(estado_equipamento = \"ABERTO\")\n            / count(*) as percentual_estado_equipamento_aberto\n        from gps_validador_viagem\n        group by 1, 2, 3\n    ),\n    -- 13. Considera o validador com maior porcentagem de estado do equipamento\n    -- \"ABERTO\" por viagem\n    estado_equipamento_max_perc as (\n        select\n            data,\n            id_viagem,\n            max_by(id_validador, percentual_estado_equipamento_aberto) as id_validador,\n            max(\n                percentual_estado_equipamento_aberto\n            ) as percentual_estado_equipamento_aberto\n        from estado_equipamento_perc\n        group by 1, 2\n    ),\n    -- 14. Verifica se a viagem possui estado do equipamento \"ABERTO\" em pelo menos\n    -- 80% dos registros\n    estado_equipamento_verificacao as (\n        select\n            data,\n            id_viagem,\n            id_validador,\n            percentual_estado_equipamento_aberto,\n            if(\n                percentual_estado_equipamento_aberto >= 0.8\n                or percentual_estado_equipamento_aberto is null,\n                true,\n                false\n            ) as indicador_estado_equipamento_aberto\n        from viagem\n        left join estado_equipamento_max_perc using (data, id_viagem)\n    )\nselect\n    v.data,\n    v.id_viagem,\n    v.id_veiculo,\n    v.servico,\n    eev.id_validador,\n    case\n        when\n            v.data >= date(\"2024-07-20\")\n            and (\n                (\n                    v.data < date(\"2024-11-16\")\n                    and (\n                        coalesce(tr.quantidade_transacao_riocard, 0) = 0\n                        or coalesce(eev.indicador_estado_equipamento_aberto, false)\n                        = false\n                    )\n                )\n                or (\n                    v.data >= date(\"2024-11-16\")\n                    and (\n                        (\n                            coalesce(tr.quantidade_transacao_riocard, 0) = 0\n                            and coalesce(t.quantidade_transacao, 0) = 0\n                        )\n                        or coalesce(eev.indicador_estado_equipamento_aberto, false)\n                        = false\n                    )\n                )\n            )\n            and ve.status\n            in (\"Licenciado com ar e n\u00e3o autuado\", \"Licenciado sem ar e n\u00e3o autuado\")\n            and v.datetime_partida not between \"2024-10-06 06:00:00\"\n            and \"2024-10-06 20:00:00\"  -- Elei\u00e7\u00e3o (2024-10-06)\n        then \"Sem transa\u00e7\u00e3o\"\n        else ve.status\n    end as tipo_viagem,\n    ve.tecnologia,\n    v.sentido,\n    v.distancia_planejada,\n    coalesce(t.quantidade_transacao, 0) as quantidade_transacao,\n    coalesce(tr.quantidade_transacao_riocard, 0) as quantidade_transacao_riocard,\n    eev.percentual_estado_equipamento_aberto,\n    eev.indicador_estado_equipamento_aberto,\n    v.datetime_partida_com_tolerancia as datetime_partida_bilhetagem,\n    v.datetime_partida,\n    v.datetime_chegada,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom viagem_com_tolerancia as v\nleft join veiculos as ve using (data, id_veiculo)\nleft join transacao_contagem as t using (data, id_viagem)\nleft join transacao_riocard_contagem as tr using (data, id_viagem)\nleft join estado_equipamento_verificacao as eev using (data, id_viagem)\n) select\n    data,\n    id_viagem,\n    id_veiculo,\n    id_validador,\n    servico,\n    tipo_viagem,\n    sentido,\n    distancia_planejada,\n    quantidade_transacao,\n    quantidade_transacao_riocard,\n    percentual_estado_equipamento_aberto,\n    indicador_estado_equipamento_aberto,\n    datetime_partida_bilhetagem,\n    datetime_partida,\n    datetime_chegada,\n    datetime_ultima_atualizacao\nfrom __dbt__cte__viagem_transacao_aux", "relation_name": "`rj-smtr`.`monitoramento`.`monitoramento_viagem_transacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.433386Z", "completed_at": "2025-02-20T18:16:47.440454Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:47.441752Z", "completed_at": "2025-02-20T18:16:47.441760Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010770559310913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagem_transacao", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__viagem_transacao_aux as (\n\n\n \n\nwith\n    -- 1. Transa\u00e7\u00f5es Ja\u00e9\n    transacao as (\n        select id_veiculo, datetime_transacao\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao`\n        -- from `rj-smtr.br_rj_riodejaneiro_bilhetagem.transacao`\n        where\n            data between date(\"2022-01-01T01:00:00\") and date_add(\n                date(\"2022-01-01T01:00:00\"), interval 1 day\n            )\n            and date(datetime_processamento) - date(datetime_transacao)\n            <= interval 6 day\n    ),\n    -- 2. Transa\u00e7\u00f5es RioCard\n    transacao_riocard as (\n        select id_veiculo, datetime_transacao\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`transacao_riocard`\n        -- from `rj-smtr.br_rj_riodejaneiro_bilhetagem.transacao_riocard`\n        where\n            data between date(\"2022-01-01T01:00:00\") and date_add(\n                date(\"2022-01-01T01:00:00\"), interval 1 day\n            )\n            and date(datetime_processamento) - date(datetime_transacao)\n            <= interval 6 day\n    ),\n    -- 3. GPS Validador\n    gps_validador as (\n        select\n            data,\n            datetime_gps,\n            id_veiculo,\n            id_validador,\n            estado_equipamento,\n            latitude,\n            longitude\n        from `rj-smtr`.`br_rj_riodejaneiro_bilhetagem`.`gps_validador`\n        -- from `rj-smtr.br_rj_riodejaneiro_bilhetagem.gps_validador`\n        where\n            data between date(\"2022-01-01T01:00:00\") and date_add(\n                date(\"2022-01-01T01:00:00\"), interval 1 day\n            )\n            and (\n                (\n                    data < date(\"2024-11-16\")\n                    and (latitude != 0 or longitude != 0)\n                )\n                or data >= date(\"2024-11-16\")\n            )\n            and date(datetime_captura) - date(datetime_gps) <= interval 6 day\n    ),\n    -- 4. Viagens realizadas\n    viagem as (\n        select\n            data,\n            servico_realizado as servico,\n            datetime_partida,\n            datetime_chegada,\n            id_veiculo,\n            id_viagem,\n            distancia_planejada,\n            sentido\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n        -- from `rj-smtr.projeto_subsidio_sppo.viagem_completa`\n        where\n            data\n            between date_sub(date(\"2022-01-01T01:00:00\"), interval 1 day) and date(\n                \"2022-01-01T01:00:00\"\n            )\n    ),\n    -- 5. Status dos ve\u00edculos\n    veiculos as (\n        select data, id_veiculo, status, tecnologia\n        from `rj-smtr`.`veiculo`.`sppo_veiculo_dia`\n        -- from `rj-smtr.veiculo.sppo_veiculo_dia`\n        where\n            data\n            between date(\"2022-01-01T01:00:00\") and date(\"2022-01-01T01:00:00\")\n    ),\n    -- 6. Viagem, para fins de contagem de passageiros, com toler\u00e2ncia de 30 minutos,\n    -- limitada pela viagem anterior\n    viagem_com_tolerancia_previa as (\n        select\n            v.*,\n            lag(v.datetime_chegada) over (\n                partition by v.id_veiculo order by v.datetime_partida\n            ) as viagem_anterior_chegada,\n            case\n                when\n                    lag(v.datetime_chegada) over (\n                        partition by v.id_veiculo order by v.datetime_partida\n                    )\n                    is null\n                then\n                    datetime(\n                        timestamp_sub(\n                            datetime_partida, interval 30 minute\n                        )\n                    )\n                else\n                    datetime(\n                        timestamp_add(\n                            greatest(\n                                timestamp_sub(\n                                    datetime_partida,\n                                    interval 30 minute\n                                ),\n                                lag(v.datetime_chegada) over (\n                                    partition by v.id_veiculo\n                                    order by v.datetime_partida\n                                )\n                            ),\n                            interval 1 second\n                        )\n                    )\n            end as datetime_partida_com_tolerancia\n        from viagem as v\n    ),\n    -- 7. Considera apenas as viagens realizadas no per\u00edodo de apura\u00e7\u00e3o\n    viagem_com_tolerancia as (\n        select *\n        from viagem_com_tolerancia_previa\n        where\n            data\n            between date(\"2022-01-01T01:00:00\") and date(\"2022-01-01T01:00:00\")\n    ),\n    -- 8. Contagem de transa\u00e7\u00f5es Ja\u00e9\n    transacao_contagem as (\n        select v.data, v.id_viagem, count(t.datetime_transacao) as quantidade_transacao\n        from transacao as t\n        join\n            viagem_com_tolerancia as v\n            on t.id_veiculo = substr(v.id_veiculo, 2)\n            and t.datetime_transacao\n            between v.datetime_partida_com_tolerancia and v.datetime_chegada\n        group by v.data, v.id_viagem\n    ),\n    -- 9. Contagem de transa\u00e7\u00f5es RioCard\n    transacao_riocard_contagem as (\n        select\n            v.data,\n            v.id_viagem,\n            count(tr.datetime_transacao) as quantidade_transacao_riocard\n        from transacao_riocard as tr\n        join\n            viagem_com_tolerancia as v\n            on tr.id_veiculo = substr(v.id_veiculo, 2)\n            and tr.datetime_transacao\n            between v.datetime_partida_com_tolerancia and v.datetime_chegada\n        group by v.data, v.id_viagem\n    ),\n    -- 10. Ajusta estado do equipamento\n    -- Agrupa mesma posi\u00e7\u00e3o para mesmo validador e ve\u00edculo, mantendo preferencialmente\n    -- o estado do equipamento \"ABERTO\" quanto latitude e longitude for diferente de\n    -- (0,0)\n    estado_equipamento_aux as (\n        select *\n        from\n            (\n                (\n                    select\n                        data,\n                        id_validador,\n                        id_veiculo,\n                        latitude,\n                        longitude,\n                        if(\n                            count(case when estado_equipamento = \"ABERTO\" then 1 end)\n                            >= 1,\n                            \"ABERTO\",\n                            \"FECHADO\"\n                        ) as estado_equipamento,\n                        min(datetime_gps) as datetime_gps,\n                    from gps_validador\n                    where\n                        (\n                            data >= date(\"2024-11-16\")\n                            and latitude != 0\n                            and longitude != 0\n                        )\n                        or data < date(\"2024-11-16\")\n                    group by 1, 2, 3, 4, 5\n                )\n                union all\n                (\n                    select\n                        data,\n                        id_validador,\n                        id_veiculo,\n                        latitude,\n                        longitude,\n                        estado_equipamento,\n                        datetime_gps,\n                    from gps_validador\n                    where\n                        data >= date(\"2024-11-16\")\n                        and latitude = 0\n                        and longitude = 0\n                )\n            )\n    ),\n    -- 11. Relacionamento entre estado do equipamento e viagem\n    gps_validador_viagem as (\n        select\n            v.data,\n            e.datetime_gps,\n            v.id_viagem,\n            e.id_validador,\n            e.estado_equipamento,\n            e.latitude,\n            e.longitude\n        from estado_equipamento_aux as e\n        join\n            viagem as v\n            on e.id_veiculo = substr(v.id_veiculo, 2)\n            and e.datetime_gps between v.datetime_partida and v.datetime_chegada\n    ),\n    -- 12. Calcula a porcentagem de estado do equipamento \"ABERTO\" por validador e\n    -- viagem\n    estado_equipamento_perc as (\n        select\n            data,\n            id_viagem,\n            id_validador,\n            countif(estado_equipamento = \"ABERTO\")\n            / count(*) as percentual_estado_equipamento_aberto\n        from gps_validador_viagem\n        group by 1, 2, 3\n    ),\n    -- 13. Considera o validador com maior porcentagem de estado do equipamento\n    -- \"ABERTO\" por viagem\n    estado_equipamento_max_perc as (\n        select\n            data,\n            id_viagem,\n            max_by(id_validador, percentual_estado_equipamento_aberto) as id_validador,\n            max(\n                percentual_estado_equipamento_aberto\n            ) as percentual_estado_equipamento_aberto\n        from estado_equipamento_perc\n        group by 1, 2\n    ),\n    -- 14. Verifica se a viagem possui estado do equipamento \"ABERTO\" em pelo menos\n    -- 80% dos registros\n    estado_equipamento_verificacao as (\n        select\n            data,\n            id_viagem,\n            id_validador,\n            percentual_estado_equipamento_aberto,\n            if(\n                percentual_estado_equipamento_aberto >= 0.8\n                or percentual_estado_equipamento_aberto is null,\n                true,\n                false\n            ) as indicador_estado_equipamento_aberto\n        from viagem\n        left join estado_equipamento_max_perc using (data, id_viagem)\n    )\nselect\n    v.data,\n    v.id_viagem,\n    v.id_veiculo,\n    v.servico,\n    eev.id_validador,\n    case\n        when\n            v.data >= date(\"2024-07-20\")\n            and (\n                (\n                    v.data < date(\"2024-11-16\")\n                    and (\n                        coalesce(tr.quantidade_transacao_riocard, 0) = 0\n                        or coalesce(eev.indicador_estado_equipamento_aberto, false)\n                        = false\n                    )\n                )\n                or (\n                    v.data >= date(\"2024-11-16\")\n                    and (\n                        (\n                            coalesce(tr.quantidade_transacao_riocard, 0) = 0\n                            and coalesce(t.quantidade_transacao, 0) = 0\n                        )\n                        or coalesce(eev.indicador_estado_equipamento_aberto, false)\n                        = false\n                    )\n                )\n            )\n            and ve.status\n            in (\"Licenciado com ar e n\u00e3o autuado\", \"Licenciado sem ar e n\u00e3o autuado\")\n            and v.datetime_partida not between \"2024-10-06 06:00:00\"\n            and \"2024-10-06 20:00:00\"  -- Elei\u00e7\u00e3o (2024-10-06)\n        then \"Sem transa\u00e7\u00e3o\"\n        else ve.status\n    end as tipo_viagem,\n    ve.tecnologia,\n    v.sentido,\n    v.distancia_planejada,\n    coalesce(t.quantidade_transacao, 0) as quantidade_transacao,\n    coalesce(tr.quantidade_transacao_riocard, 0) as quantidade_transacao_riocard,\n    eev.percentual_estado_equipamento_aberto,\n    eev.indicador_estado_equipamento_aberto,\n    v.datetime_partida_com_tolerancia as datetime_partida_bilhetagem,\n    v.datetime_partida,\n    v.datetime_chegada,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom viagem_com_tolerancia as v\nleft join veiculos as ve using (data, id_veiculo)\nleft join transacao_contagem as t using (data, id_viagem)\nleft join transacao_riocard_contagem as tr using (data, id_viagem)\nleft join estado_equipamento_verificacao as eev using (data, id_viagem)\n) select\n    data,\n    id_viagem,\n    id_veiculo,\n    servico,\n    id_validador,\n    tipo_viagem,\n    tecnologia,\n    distancia_planejada,\n    quantidade_transacao,\n    quantidade_transacao_riocard,\n    percentual_estado_equipamento_aberto,\n    indicador_estado_equipamento_aberto,\n    datetime_partida_bilhetagem,\n    datetime_partida,\n    datetime_chegada,\n    datetime_ultima_atualizacao\nfrom __dbt__cte__viagem_transacao_aux", "relation_name": "`rj-smtr`.`subsidio`.`viagem_transacao`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:47.446147Z", "completed_at": "2025-02-20T18:16:49.322223Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:49.328140Z", "completed_at": "2025-02-20T18:16:49.328175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.887885332107544, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.indicadores_mes_pivot", "compiled": true, "compiled_code": "\n\n\n    \n    \n    \n    \n        \n        \n        \n            \n        \n        \n    \n        \n        \n        \n            \n        \n        \n    \n        \n        \n        \n            \n        \n        \n    \n        \n        \n        \n            \n        \n        \n    \n        \n        \n        \n            \n        \n        \n    \n        \n        \n        \n            \n        \n        \n    \n\n    \n\n\n\n\n    \n    \n    SELECT\n        \"Frota operante por m\u00eas\" AS indicador,\n        \"\u00d4nibus\" AS modo,\n        *\n    FROM (\n        SELECT\n            *\n        FROM (\n            SELECT\n                ano,\n                mes,\n                valor\n            FROM\n                `rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`\n                --rj-smtr.indicadores_continuados_egp.indicadores_mes\n            WHERE\n                nome_indicador = \"Frota operante por m\u00eas\"\n                AND modo = \"\u00d4nibus\"\n        ) PIVOT ( MAX(valor) FOR mes IN (\n            1 Janeiro,\n            2 Fevereiro,\n            3 Marco,\n            4 Abril,\n            5 Maio,\n            6 Junho,\n            7 Julho,\n            8 Agosto,\n            9 Setembro,\n            10 Outubro,\n            11 Novembro,\n            12 Dezembro )\n        )\n    )\n    UNION ALL\n    \n\n    \n    \n    SELECT\n        \"Gratuidades por m\u00eas\" AS indicador,\n        \"BRT\" AS modo,\n        *\n    FROM (\n        SELECT\n            *\n        FROM (\n            SELECT\n                ano,\n                mes,\n                valor\n            FROM\n                `rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`\n                --rj-smtr.indicadores_continuados_egp.indicadores_mes\n            WHERE\n                nome_indicador = \"Gratuidades por m\u00eas\"\n                AND modo = \"BRT\"\n        ) PIVOT ( MAX(valor) FOR mes IN (\n            1 Janeiro,\n            2 Fevereiro,\n            3 Marco,\n            4 Abril,\n            5 Maio,\n            6 Junho,\n            7 Julho,\n            8 Agosto,\n            9 Setembro,\n            10 Outubro,\n            11 Novembro,\n            12 Dezembro )\n        )\n    )\n    UNION ALL\n    \n    \n    SELECT\n        \"Gratuidades por m\u00eas\" AS indicador,\n        \"\u00d4nibus\" AS modo,\n        *\n    FROM (\n        SELECT\n            *\n        FROM (\n            SELECT\n                ano,\n                mes,\n                valor\n            FROM\n                `rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`\n                --rj-smtr.indicadores_continuados_egp.indicadores_mes\n            WHERE\n                nome_indicador = \"Gratuidades por m\u00eas\"\n                AND modo = \"\u00d4nibus\"\n        ) PIVOT ( MAX(valor) FOR mes IN (\n            1 Janeiro,\n            2 Fevereiro,\n            3 Marco,\n            4 Abril,\n            5 Maio,\n            6 Junho,\n            7 Julho,\n            8 Agosto,\n            9 Setembro,\n            10 Outubro,\n            11 Novembro,\n            12 Dezembro )\n        )\n    )\n    UNION ALL\n    \n\n    \n    \n    SELECT\n        \"Passageiros pagantes por m\u00eas\" AS indicador,\n        \"\u00d4nibus\" AS modo,\n        *\n    FROM (\n        SELECT\n            *\n        FROM (\n            SELECT\n                ano,\n                mes,\n                valor\n            FROM\n                `rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`\n                --rj-smtr.indicadores_continuados_egp.indicadores_mes\n            WHERE\n                nome_indicador = \"Passageiros pagantes por m\u00eas\"\n                AND modo = \"\u00d4nibus\"\n        ) PIVOT ( MAX(valor) FOR mes IN (\n            1 Janeiro,\n            2 Fevereiro,\n            3 Marco,\n            4 Abril,\n            5 Maio,\n            6 Junho,\n            7 Julho,\n            8 Agosto,\n            9 Setembro,\n            10 Outubro,\n            11 Novembro,\n            12 Dezembro )\n        )\n    )\n    UNION ALL\n    \n    \n    SELECT\n        \"Passageiros pagantes por m\u00eas\" AS indicador,\n        \"BRT\" AS modo,\n        *\n    FROM (\n        SELECT\n            *\n        FROM (\n            SELECT\n                ano,\n                mes,\n                valor\n            FROM\n                `rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`\n                --rj-smtr.indicadores_continuados_egp.indicadores_mes\n            WHERE\n                nome_indicador = \"Passageiros pagantes por m\u00eas\"\n                AND modo = \"BRT\"\n        ) PIVOT ( MAX(valor) FOR mes IN (\n            1 Janeiro,\n            2 Fevereiro,\n            3 Marco,\n            4 Abril,\n            5 Maio,\n            6 Junho,\n            7 Julho,\n            8 Agosto,\n            9 Setembro,\n            10 Outubro,\n            11 Novembro,\n            12 Dezembro )\n        )\n    )\n    UNION ALL\n    \n\n    \n    \n    SELECT\n        \"Idade m\u00e9dia da frota operante por m\u00eas\" AS indicador,\n        \"\u00d4nibus\" AS modo,\n        *\n    FROM (\n        SELECT\n            *\n        FROM (\n            SELECT\n                ano,\n                mes,\n                valor\n            FROM\n                `rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes`\n                --rj-smtr.indicadores_continuados_egp.indicadores_mes\n            WHERE\n                nome_indicador = \"Idade m\u00e9dia da frota operante por m\u00eas\"\n                AND modo = \"\u00d4nibus\"\n        ) PIVOT ( MAX(valor) FOR mes IN (\n            1 Janeiro,\n            2 Fevereiro,\n            3 Marco,\n            4 Abril,\n            5 Maio,\n            6 Junho,\n            7 Julho,\n            8 Agosto,\n            9 Setembro,\n            10 Outubro,\n            11 Novembro,\n            12 Dezembro )\n        )\n    )\n    \n    \n", "relation_name": "`rj-smtr`.`indicadores_continuados_egp`.`indicadores_mes_pivot`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:49.345577Z", "completed_at": "2025-02-20T18:16:49.364055Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:49.366097Z", "completed_at": "2025-02-20T18:16:49.366110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028349637985229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_faixa_servico_dia", "compiled": true, "compiled_code": "\n\nwith\n    -- 1. Viagens planejadas\n    planejado as (\n        select distinct\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            distancia_total_planejada as km_planejada\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        -- from `rj-smtr.projeto_subsidio_sppo.viagem_planejada`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and distancia_total_planejada > 0\n    ),\n    -- 2. Viagens realizadas\n    viagem as (\n        select\n            data, servico, id_viagem, tipo_viagem, datetime_partida, distancia_planejada\n        from `rj-smtr`.`subsidio`.`viagem_transacao`\n        -- from `rj-smtr.subsidio.viagem_transacao`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    -- 3. Apura\u00e7\u00e3o de km realizado e Percentual de Opera\u00e7\u00e3o por faixa\n    servico_km_apuracao as (\n        select\n            p.data,\n            p.tipo_dia,\n            p.faixa_horaria_inicio,\n            p.faixa_horaria_fim,\n            p.consorcio,\n            p.servico,\n            safe_cast(p.km_planejada as numeric) as km_planejada_faixa,\n            safe_cast(coalesce(count(v.id_viagem), 0) as int64) as viagens_faixa,\n            safe_cast(\n                coalesce(sum(v.distancia_planejada), 0) as numeric\n            ) as km_apurada_faixa,\n            safe_cast(\n                coalesce(\n                    round(\n                        100 * sum(\n                            if(\n                                v.tipo_viagem\n                                not in (\"N\u00e3o licenciado\", \"N\u00e3o vistoriado\"),\n                                v.distancia_planejada,\n                                0\n                            )\n                        )\n                        / p.km_planejada,\n                        2\n                    ),\n                    0\n                ) as numeric\n            ) as pof\n        from planejado as p\n        left join\n            viagem as v\n            on p.data = v.data\n            and p.servico = v.servico\n            and v.datetime_partida\n            between p.faixa_horaria_inicio and p.faixa_horaria_fim\n        group by\n            p.data,\n            p.tipo_dia,\n            p.faixa_horaria_inicio,\n            p.faixa_horaria_fim,\n            p.consorcio,\n            p.servico,\n            p.km_planejada\n    )\nselect\n    data,\n    tipo_dia,\n    faixa_horaria_inicio,\n    faixa_horaria_fim,\n    consorcio,\n    servico,\n    viagens_faixa,\n    km_apurada_faixa,\n    km_planejada_faixa,\n    pof,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom servico_km_apuracao", "relation_name": "`rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:49.371700Z", "completed_at": "2025-02-20T18:16:51.406965Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:51.411317Z", "completed_at": "2025-02-20T18:16:51.411371Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.044527530670166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.viagens_remuneradas", "compiled": true, "compiled_code": "\n    with\n    -- Viagens planejadas (agrupadas por data e servi\u00e7o)\n    planejado as (\n        select distinct\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            partidas_total_planejada,\n            distancia_total_planejada as km_planejada,\n            if(sentido = \"C\", true, false) as indicador_circular\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        -- from `rj-smtr.projeto_subsidio_sppo.viagem_planejada`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and (distancia_total_planejada > 0 or distancia_total_planejada is null)\n            and (id_tipo_trajeto = 0 or id_tipo_trajeto is null)\n    ),\n    viagens_planejadas as (\n        select\n            feed_start_date,\n            servico,\n            tipo_dia,\n            viagens_planejadas,\n            partidas_ida,\n            partidas_volta,\n            tipo_os,\n        from `rj-smtr`.`gtfs`.`ordem_servico`\n        -- from `rj-smtr.gtfs.ordem_servico`\n        where feed_start_date in ('')\n    ),\n    data_versao_efetiva as (\n        select\n            data,\n            tipo_dia,\n            tipo_os,\n            coalesce(\n                feed_start_date,\n                data_versao_trips,\n                data_versao_shapes,\n                data_versao_frequencies\n            ) as feed_start_date\n        from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n        -- from `rj-smtr.projeto_subsidio_sppo.subsidio_data_versao_efetiva`\n        -- (alterar tamb\u00e9m query no bloco execute)\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    viagem_planejada as (\n        select\n            p.data,\n            p.tipo_dia,\n            p.consorcio,\n            p.servico,\n            p.faixa_horaria_inicio,\n            p.faixa_horaria_fim,\n            v.viagens_planejadas,\n            p.km_planejada,\n            if(\n                p.data >= date('2024-08-16'),\n                p.partidas_total_planejada,\n                v.partidas_ida + v.partidas_volta\n            ) as viagens_planejadas_ida_volta,\n            p.indicador_circular\n        from planejado as p\n        left join data_versao_efetiva as d using (data, tipo_dia)\n        left join\n            viagens_planejadas as v\n            on d.feed_start_date = v.feed_start_date\n            and p.tipo_dia = v.tipo_dia\n            and p.servico = v.servico\n            and (d.tipo_os = v.tipo_os or (d.tipo_os is null and v.tipo_os = \"Regular\"))\n    ),\n    -- Par\u00e2metros de subs\u00eddio\n    subsidio_parametros as (\n        select distinct\n            data_inicio,\n            data_fim,\n            status,\n            tecnologia,\n            subsidio_km,\n            case\n                when tecnologia is null\n                then\n                    max(subsidio_km) over (\n                        partition by date_trunc(data_inicio, year), data_fim\n                    )\n                when tecnologia is not null\n                then\n                    max(subsidio_km) over (\n                        partition by date_trunc(data_inicio, year), data_fim, tecnologia\n                    )\n            end as subsidio_km_teto,\n            indicador_penalidade_judicial\n        from `rj-smtr`.`subsidio`.`valor_km_tipo_viagem`\n    -- from `rj-smtr.subsidio.valor_km_tipo_viagem`\n    ),\n    tecnologias as (\n        select\n            servico,\n            case\n                when substring(codigo_tecnologia, 4, 1) = \"1\"\n                then \"PADRON\"\n                when substring(codigo_tecnologia, 3, 1) = \"1\"\n                then \"BASICO\"\n                when substring(codigo_tecnologia, 2, 1) = \"1\"\n                then \"MIDI\"\n                when substring(codigo_tecnologia, 1, 1) = \"1\"\n                then \"MINI\"\n                else null\n            end as maior_tecnologia_permitida,\n            case\n                when substring(codigo_tecnologia, 1, 1) = \"1\"\n                then \"MINI\"\n                when substring(codigo_tecnologia, 2, 1) = \"1\"\n                then \"MIDI\"\n                when substring(codigo_tecnologia, 3, 1) = \"1\"\n                then \"BASICO\"\n                when substring(codigo_tecnologia, 4, 1) = \"1\"\n                then \"PADRON\"\n                else null\n            end as menor_tecnologia_permitida,\n        from `rj-smtr`.`planejamento`.`tecnologia_servico`\n    ),\n    prioridade_tecnologia as (\n        select \"MINI\" as tecnologia, 1 as prioridade\n        union all\n        select \"MIDI\" as tecnologia, 2 as prioridade\n        union all\n        select \"BASICO\" as tecnologia, 3 as prioridade\n        union all\n        select \"PADRON\" as tecnologia, 4 as prioridade\n    ),\n    -- Viagens com quantidades de transa\u00e7\u00f5es\n    viagem_transacao as (\n        select *\n        from `rj-smtr`.`subsidio`.`viagem_transacao`\n        -- from `rj-smtr.subsidio.viagem_transacao`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    -- Viagens com tipo e valor de subs\u00eddio por km\n    viagem_tecnologia as (\n        select distinct\n            vt.data,\n            vt.servico,\n            vt.tipo_viagem,\n            vt.tecnologia as tecnologia_apurada,\n            case\n                when p.prioridade > p_maior.prioridade\n                then t.maior_tecnologia_permitida\n                when\n                    p.prioridade < p_menor.prioridade\n                    and data >= date('2025-07-01')\n                then null\n                else vt.tecnologia\n            end as tecnologia_remunerada,\n            vt.id_viagem,\n            vt.datetime_partida,\n            vt.distancia_planejada,\n            case\n                when p.prioridade < p_menor.prioridade then true else false\n            end as indicador_penalidade_tecnologia\n        from viagem_transacao as vt\n        left join tecnologias as t on vt.servico = t.servico\n        left join prioridade_tecnologia as p on vt.tecnologia = p.tecnologia\n        left join\n            prioridade_tecnologia as p_maior\n            on t.maior_tecnologia_permitida = p_maior.tecnologia\n        left join\n            prioridade_tecnologia as p_menor\n            on t.menor_tecnologia_permitida = p_menor.tecnologia\n    ),\n    -- Apura\u00e7\u00e3o de km realizado e Percentual de Opera\u00e7\u00e3o por Faixa Hor\u00e1ria (POF)\n    servico_faixa_km_apuracao as (\n        select\n            p.data,\n            p.tipo_dia,\n            p.faixa_horaria_inicio,\n            p.faixa_horaria_fim,\n            p.consorcio,\n            p.servico,\n            p.km_planejada as km_planejada,\n            coalesce(\n                round(\n                    100 * sum(\n                        if(\n                            v.tipo_viagem not in (\"N\u00e3o licenciado\", \"N\u00e3o vistoriado\"),\n                            v.distancia_planejada,\n                            0\n                        )\n                    )\n                    / p.km_planejada,\n                    2\n                ),\n                0\n            ) as pof\n        from viagem_planejada as p\n        left join\n            viagem_tecnologia as v\n            on p.data = v.data\n            and p.servico = v.servico\n            and v.datetime_partida\n            between p.faixa_horaria_inicio and p.faixa_horaria_fim\n        group by 1, 2, 3, 4, 5, 6, 7\n    ),\n    viagem_km_tipo as (\n        select distinct\n            vt.data,\n            vt.servico,\n            vt.tipo_viagem,\n            vt.tecnologia_apurada,\n            vt.tecnologia_remunerada,\n            vt.id_viagem,\n            vt.datetime_partida,\n            vt.distancia_planejada,\n            sp.subsidio_km,\n            sp.subsidio_km_teto,\n            case\n                when\n                    vt.data >= date('2025-01-05')\n                    and s.pof >= 80\n                    and vt.tipo_viagem in (\n                        \"Licenciado com ar e n\u00e3o autuado\",\n                        \"Licenciado sem ar e n\u00e3o autuado\"\n                    )\n                then\n                    safe_cast(\n                        - (\n                            ta.subsidio_km * vt.distancia_planejada\n                            - sp.subsidio_km * vt.distancia_planejada\n                        ) as numeric\n                    )\n                else safe_cast(0 as numeric)\n            end as valor_glosado_tecnologia,\n            vt.indicador_penalidade_tecnologia,\n            sp.indicador_penalidade_judicial\n        from viagem_tecnologia as vt\n        left join\n            subsidio_parametros as sp\n            on vt.data between sp.data_inicio and sp.data_fim\n            and vt.tipo_viagem = sp.status\n            and (\n                (\n                    vt.data >= date('2025-01-05')\n                    and (\n                        vt.tecnologia_remunerada = sp.tecnologia\n                        or (vt.tecnologia_remunerada is null and sp.tecnologia is null)\n                    )\n                )\n                or (\n                    vt.data < date('2025-01-05')\n                    and sp.tecnologia is null\n                )\n            )\n        left join\n            subsidio_parametros as ta\n            on vt.data between ta.data_inicio and ta.data_fim\n            and vt.tipo_viagem = ta.status\n            and (\n                vt.data >= date('2025-01-05')\n                and (\n                    vt.tecnologia_apurada = ta.tecnologia\n                    or (vt.tecnologia_apurada is null and ta.tecnologia is null)\n                )\n            )\n        left join\n            servico_faixa_km_apuracao as s\n            on s.data = vt.data\n            and s.servico = vt.servico\n            and vt.datetime_partida\n            between s.faixa_horaria_inicio and s.faixa_horaria_fim\n\n    )\n-- Flag de viagens que ser\u00e3o consideradas ou n\u00e3o para fins de remunera\u00e7\u00e3o (apura\u00e7\u00e3o de\n-- valor de subs\u00eddio) - RESOLU\u00c7\u00c3O SMTR N\u00ba 3645/2023\nselect\n    v.* except (\n        rn,\n        datetime_partida,\n        viagens_planejadas,\n        viagens_planejadas_ida_volta,\n        km_planejada,\n        tipo_dia,\n        consorcio,\n        faixa_horaria_inicio,\n        faixa_horaria_fim,\n        indicador_circular\n    ),\n    case\n        when\n            v.data >= date('2024-11-01')\n            and v.tipo_dia = \"Dia \u00datil\"\n            and viagens_planejadas < 10\n            and viagens_planejadas > 5\n            and pof > 100\n            and rn > (viagens_planejadas_ida_volta + if(indicador_circular, 1, 2))\n        then false\n        when\n            v.data >= date('2024-11-01')\n            and v.tipo_dia = \"Dia \u00datil\"\n            and viagens_planejadas >= 10\n            and pof > 110\n            and rn > viagens_planejadas_ida_volta * 1.1\n        then false\n        when\n            v.data >= date('2024-11-01')\n            and v.tipo_dia = \"Dia \u00datil\"\n            and viagens_planejadas <= 5\n            and pof > 200\n            and rn > viagens_planejadas_ida_volta * 2\n        then false\n        when\n            v.data >= date('2024-11-01')\n            and v.tipo_dia != \"Dia \u00datil\"\n            and viagens_planejadas < 5\n            and pof > 100\n            and rn > (viagens_planejadas_ida_volta + if(indicador_circular, 1, 2))\n        then false\n        when\n            v.data >= date('2024-11-01')\n            and v.tipo_dia != \"Dia \u00datil\"\n            and viagens_planejadas >= 5\n            and pof > 120\n            and rn > viagens_planejadas_ida_volta * 1.2\n        then false\n        when\n            v.data >= date('2023-09-16')\n            and v.tipo_dia = \"Dia \u00datil\"\n            and viagens_planejadas > 10\n            and pof > 120\n            and rn > viagens_planejadas_ida_volta * 1.2\n        then false\n        when\n            v.data >= date('2023-09-16')\n            and v.tipo_dia = \"Dia \u00datil\"\n            and viagens_planejadas <= 10\n            and pof > 200\n            and rn > viagens_planejadas_ida_volta * 2\n        then false\n        when\n            v.data >= date('2023-09-16')\n            and (\n                v.tipo_dia = \"Dia \u00datil\"\n                and (viagens_planejadas is null or pof is null or rn is null)\n            )\n        then null\n        else true\n    end as indicador_viagem_dentro_limite,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom\n    (\n        select\n            v.*,\n            p.* except (data, servico),\n            row_number() over (\n                partition by v.data, v.servico, faixa_horaria_inicio, faixa_horaria_fim\n                order by subsidio_km * distancia_planejada desc\n            ) as rn\n        from viagem_km_tipo as v\n        left join\n            viagem_planejada as p\n            on p.data = v.data\n            and p.servico = v.servico\n            and v.datetime_partida\n            between p.faixa_horaria_inicio and p.faixa_horaria_fim\n    ) as v\nleft join\n    servico_faixa_km_apuracao as s\n    on s.data = v.data\n    and s.servico = v.servico\n    and v.datetime_partida between s.faixa_horaria_inicio and s.faixa_horaria_fim", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:51.421352Z", "completed_at": "2025-02-20T18:16:51.433624Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:51.435216Z", "completed_at": "2025-02-20T18:16:51.435227Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018296241760253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_penalidade_servico_faixa", "compiled": true, "compiled_code": "\n\nwith\n    subsidio_dia as (\n        select\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            case\n                when data < date('2025-01-05') and rn = 1\n                then min_pof\n                when data >= date('2025-01-05')\n                then pof\n                else null\n            end as min_pof\n        from\n            (\n                select\n                    *,\n                    min(pof) over (\n                        partition by data, tipo_dia, consorcio, servico\n                    ) as min_pof,\n                    row_number() over (\n                        partition by data, tipo_dia, consorcio, servico\n                        order by pof, faixa_horaria_inicio\n                    ) as rn\n                from `rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`\n                -- from `rj-smtr.financeiro_staging.subsidio_faixa_servico_dia`\n                \n                    where\n                        data between date('2022-01-01T01:00:00') and date(\n                            '2022-01-01T01:00:00'\n                        )\n                \n            )\n    ),\n    penalidade as (\n        select\n            data_inicio,\n            data_fim,\n            perc_km_inferior,\n            perc_km_superior,\n            ifnull(- valor, 0) as valor_penalidade\n        from `rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade`\n    -- from `rj-smtr.dashboard_subsidio_sppo.valor_tipo_penalidade`\n    )\nselect\n    s.data,\n    s.tipo_dia,\n    s.consorcio,\n    s.servico,\n    faixa_horaria_inicio,\n    faixa_horaria_fim,\n    safe_cast(coalesce(pe.valor_penalidade, 0) as numeric) as valor_penalidade,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom subsidio_dia as s\nleft join\n    penalidade as pe\n    on s.data between pe.data_inicio and pe.data_fim\n    and s.min_pof >= pe.perc_km_inferior\n    and s.min_pof < pe.perc_km_superior", "relation_name": "`rj-smtr`.`financeiro`.`subsidio_penalidade_servico_faixa`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:51.439793Z", "completed_at": "2025-02-20T18:16:51.451421Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:51.452943Z", "completed_at": "2025-02-20T18:16:51.452954Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016051054000854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_faixa_servico_dia_tipo_viagem", "compiled": true, "compiled_code": "\n\nwith\n    subsidio_faixa_dia as (\n        select\n            data,\n            tipo_dia,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            consorcio,\n            servico,\n            pof\n        from `rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`\n        -- from `rj-smtr.financeiro_staging.subsidio_faixa_servico_dia`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    servico_km_apuracao as (\n        select\n            data,\n            servico,\n            case\n                when tipo_viagem = \"Nao licenciado\"\n                then \"N\u00e3o licenciado\"\n                when tipo_viagem = \"Licenciado com ar e autuado (023.II)\"\n                then \"Autuado por ar inoperante\"\n                when tipo_viagem = \"Licenciado sem ar\"\n                then \"Licenciado sem ar e n\u00e3o autuado\"\n                when tipo_viagem = \"Licenciado com ar e n\u00e3o autuado (023.II)\"\n                then \"Licenciado com ar e n\u00e3o autuado\"\n                else tipo_viagem\n            end as tipo_viagem,\n            tecnologia_apurada,\n            tecnologia_remunerada,\n            id_viagem,\n            distancia_planejada,\n            subsidio_km,\n            subsidio_km_teto,\n            valor_glosado_tecnologia,\n            indicador_penalidade_judicial,\n            indicador_viagem_dentro_limite\n        from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas`\n        -- `rj-smtr.dashboard_subsidio_sppo.viagens_remuneradas`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    indicador_ar as (\n        select\n            data,\n            id_veiculo,\n            status,\n            safe_cast(\n                json_value(indicadores, \"$.indicador_ar_condicionado\") as bool\n            ) as indicador_ar_condicionado\n        from `rj-smtr`.`veiculo`.`sppo_veiculo_dia`\n        -- from `rj-smtr.veiculo.sppo_veiculo_dia`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    viagem as (\n        select\n            data, servico_realizado as servico, id_veiculo, id_viagem, datetime_partida\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n        -- from `rj-smtr.projeto_subsidio_sppo.viagem_completa`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    ar_viagem as (\n        select\n            v.data,\n            v.servico,\n            v.id_viagem,\n            v.datetime_partida,\n            coalesce(ia.indicador_ar_condicionado, false) as indicador_ar_condicionado\n        from viagem v\n        left join indicador_ar ia on ia.data = v.data and ia.id_veiculo = v.id_veiculo\n    ),\n    subsidio_servico_ar as (\n        select\n            sfd.data,\n            sfd.tipo_dia,\n            sfd.faixa_horaria_inicio,\n            sfd.faixa_horaria_fim,\n            sfd.consorcio,\n            sfd.servico,\n            sfd.pof,\n            coalesce(s.tipo_viagem, \"Sem viagem apurada\") as tipo_viagem,\n            s.tecnologia_apurada,\n            s.tecnologia_remunerada,\n            s.id_viagem,\n            safe_cast(s.distancia_planejada as numeric) as distancia_planejada,\n            safe_cast(s.subsidio_km as numeric) as subsidio_km,\n            safe_cast(s.subsidio_km_teto as numeric) as subsidio_km_teto,\n            coalesce(s.valor_glosado_tecnologia, 0) as valor_glosado_tecnologia,\n            s.indicador_viagem_dentro_limite,\n            case\n                when sfd.pof < 60 then true else s.indicador_penalidade_judicial\n            end as indicador_penalidade_judicial,\n            coalesce(av.indicador_ar_condicionado, false) as indicador_ar_condicionado\n        from subsidio_faixa_dia as sfd\n        left join\n            ar_viagem as av\n            on sfd.data = av.data\n            and sfd.servico = av.servico\n            and av.datetime_partida\n            between sfd.faixa_horaria_inicio and sfd.faixa_horaria_fim\n        left join\n            servico_km_apuracao as s\n            on sfd.data = s.data\n            and sfd.servico = s.servico\n            and s.id_viagem = av.id_viagem\n    )\nselect\n    data,\n    tipo_dia,\n    faixa_horaria_inicio,\n    faixa_horaria_fim,\n    consorcio,\n    servico,\n    indicador_ar_condicionado,\n    indicador_penalidade_judicial,\n    indicador_viagem_dentro_limite,\n    tipo_viagem,\n    tecnologia_apurada,\n    tecnologia_remunerada,\n    safe_cast(coalesce(count(id_viagem), 0) as int64) as viagens_faixa,\n    safe_cast(coalesce(sum(distancia_planejada), 0) as numeric) as km_apurada_faixa,\n    safe_cast(\n        coalesce(\n            sum(\n                if(\n                    indicador_viagem_dentro_limite = true\n                    and pof >= 80\n                    and subsidio_km > 0,\n                    distancia_planejada,\n                    0\n                )\n            ),\n            0\n        ) as numeric\n    ) as km_subsidiada_faixa,\n    safe_cast(\n        sum(\n            if(\n                indicador_viagem_dentro_limite = true and pof >= 80,\n                distancia_planejada * subsidio_km,\n                0\n            )\n        ) as numeric\n    ) as valor_apurado,\n    safe_cast(sum(valor_glosado_tecnologia) as numeric) as valor_glosado_tecnologia,\n    safe_cast(\n        - coalesce(\n            sum(\n                if(\n                    indicador_viagem_dentro_limite = true,\n                    0,\n                    distancia_planejada * subsidio_km\n                )\n            ),\n            0\n        ) as numeric\n    ) as valor_acima_limite,\n    safe_cast(\n        sum(\n            if(\n                pof >= 80 and tipo_viagem != \"N\u00e3o licenciado\",\n                distancia_planejada * subsidio_km_teto,\n                0\n            )\n        ) - coalesce(\n            sum(\n                if(\n                    indicador_viagem_dentro_limite = true,\n                    0,\n                    distancia_planejada * subsidio_km\n                )\n            ),\n            0\n        ) as numeric\n    ) as valor_total_sem_glosa,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom subsidio_servico_ar\ngroup by\n    data,\n    tipo_dia,\n    faixa_horaria_inicio,\n    faixa_horaria_fim,\n    consorcio,\n    servico,\n    indicador_ar_condicionado,\n    indicador_penalidade_judicial,\n    indicador_viagem_dentro_limite,\n    tipo_viagem,\n    tecnologia_apurada,\n    tecnologia_remunerada", "relation_name": "`rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:51.458072Z", "completed_at": "2025-02-20T18:16:51.466875Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:51.469661Z", "completed_at": "2025-02-20T18:16:51.469674Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01468205451965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_servico_dia", "compiled": true, "compiled_code": "\n\n\nWITH\n-- 1. Viagens planejadas (agrupadas por data e servi\u00e7o)\n  planejado AS (\n  SELECT\n    DISTINCT DATA,\n    tipo_dia,\n    consorcio,\n    servico,\n    distancia_total_planejada AS km_planejada,\n  FROM\n    -- `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n  WHERE\n    DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n    AND DATE( \"2022-01-01T01:00:00\" )\n    AND ( distancia_total_planejada > 0\n      OR distancia_total_planejada IS NULL )\n  ),\n-- 2. Viagens realizadas\n  viagem AS (\n  SELECT\n    DATA,\n    servico_realizado AS servico,\n    id_veiculo,\n    id_viagem,\n    distancia_planejada\n FROM\n    -- `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n  WHERE\n    DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n    AND DATE( \"2022-01-01T01:00:00\" ) ),\n-- 3. Apura\u00e7\u00e3o de km realizado e Percentual de Opera\u00e7\u00e3o Di\u00e1rio (POD)\n  servico_km_apuracao AS (\n  SELECT\n    p.data,\n    p.tipo_dia,\n    p.consorcio,\n    p.servico,\n    p.km_planejada AS km_planejada,\n    COALESCE(COUNT(v.id_viagem), 0) AS viagens,\n    COALESCE(SUM(v.distancia_planejada), 0) AS km_apurada,\n    COALESCE(ROUND(100 * SUM(v.distancia_planejada) / p.km_planejada,2), 0) AS perc_km_planejada\n  FROM\n    planejado AS p\n  LEFT JOIN\n    viagem AS v\n  USING\n    (DATA,\n      servico)\n  GROUP BY\n    1,\n    2,\n    3,\n    4,\n    5 ),\n-- 4. Apura\u00e7\u00e3o de valor de subs\u00eddio por data e servi\u00e7o\n  viagens_remuneradas AS (\n    SELECT\n      DATA,\n      servico,\n      distancia_planejada,\n      subsidio_km\n    FROM\n      `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas`\n      -- `rj-smtr.dashboard_subsidio_sppo.viagens_remuneradas`\n    WHERE\n      DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n      AND DATE( \"2022-01-01T01:00:00\" )\n      AND indicador_viagem_dentro_limite IS TRUE),\n  servico_subsidio_apuracao AS (\n  SELECT\n    DATA,\n    servico,\n    SUM(distancia_planejada*subsidio_km) AS valor_subsidio_apurado\n  FROM\n    viagens_remuneradas\n  GROUP BY\n    1,\n    2)\nSELECT\n  s.*,\n  IF(p.valor IS NULL, COALESCE(st.valor_subsidio_apurado, 0), 0) AS valor_subsidio_pago,\n  IFNULL(-p.valor, 0) AS valor_penalidade\nFROM\n  servico_km_apuracao AS s\nLEFT JOIN\n  `rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade` AS p\n  -- `rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade` AS p\nON\n  s.data BETWEEN p.data_inicio\n  AND p.data_fim\n  AND s.perc_km_planejada >= p.perc_km_inferior\n  AND s.perc_km_planejada < p.perc_km_superior\nLEFT JOIN\n  servico_subsidio_apuracao AS st\nUSING\n  (DATA,\n    servico)", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:51.474882Z", "completed_at": "2025-02-20T18:16:51.481094Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:51.482447Z", "completed_at": "2025-02-20T18:16:51.482457Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010585308074951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.check_viagem_completa__viagens_remuneradas.535da5d880", "compiled": true, "compiled_code": "WITH\n    data_versao_efetiva AS (\n    SELECT\n        *\n    FROM\n        -- rj-smtr.projeto_subsidio_sppo.subsidio_data_versao_efetiva\n        `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n    WHERE\n        DATA >= \"2024-04-01\"\n        AND DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")),\n    viagem_completa AS (\n    SELECT\n        *\n    FROM\n        -- rj-smtr.projeto_subsidio_sppo.viagem_completa\n        `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n    WHERE\n        DATA >= \"2024-04-01\"\n        AND DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")),\n    feed_info AS (\n    SELECT\n        *\n    FROM\n        -- rj-smtr.gtfs.feed_info\n        `rj-smtr`.`gtfs`.`feed_info`\n    WHERE\n        feed_version IN (\n        SELECT\n        feed_version\n        FROM\n        data_versao_efetiva) )\n    SELECT\n    DISTINCT DATA\n    FROM\n    viagem_completa\n    LEFT JOIN\n    data_versao_efetiva AS d\n    USING\n    (DATA)\n    LEFT JOIN\n    feed_info AS i\n    ON\n    (DATA BETWEEN i.feed_start_date\n        AND i.feed_end_date\n        OR (DATA >= i.feed_start_date\n        AND i.feed_end_date IS NULL))\n    WHERE\n    i.feed_start_date != d.feed_start_date\n    OR datetime_ultima_atualizacao < feed_update_datetime", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:51.486682Z", "completed_at": "2025-02-20T18:16:53.248661Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.250439Z", "completed_at": "2025-02-20T18:16:53.250452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7667479515075684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart__viagens_remuneradas.520ea4e481", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-01-01T00:00:00' as datetime ) as datetime),\n        interval (row_number() over (order by 1) - 1) day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-01-02 01:00:00' as datetime )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(data as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n\n        count(*) as row_cnt\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00')) f\n    \n    where 1=1\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.255300Z", "completed_at": "2025-02-20T18:16:53.260703Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.261986Z", "completed_at": "2025-02-20T18:16:53.261993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009351491928100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__distancia_planejada__viagens_remuneradas.40a0e38e27", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not distancia_planejada > 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.265673Z", "completed_at": "2025-02-20T18:16:53.270298Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.271530Z", "completed_at": "2025-02-20T18:16:53.271537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008159637451171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__subsidio_km__viagens_remuneradas.bd99d0e4fc", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not subsidio_km >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.275370Z", "completed_at": "2025-02-20T18:16:53.280088Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.281466Z", "completed_at": "2025-02-20T18:16:53.281474Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008515357971191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__viagens_remuneradas.15ac5dacfd", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_viagem\n    from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by id_viagem\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.285267Z", "completed_at": "2025-02-20T18:16:53.293095Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.294389Z", "completed_at": "2025-02-20T18:16:53.294398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011466264724731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__data__viagens_remuneradas.18cb97bfb1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.298267Z", "completed_at": "2025-02-20T18:16:53.303310Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.304536Z", "completed_at": "2025-02-20T18:16:53.304544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008764505386352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__distancia_planejada__viagens_remuneradas.fc5c9b8752", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_planejada\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.308403Z", "completed_at": "2025-02-20T18:16:53.313661Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.314913Z", "completed_at": "2025-02-20T18:16:53.314921Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008908748626708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__id_viagem__viagens_remuneradas.ef2d03a18b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_viagem\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere id_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.318683Z", "completed_at": "2025-02-20T18:16:53.323576Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.324817Z", "completed_at": "2025-02-20T18:16:53.324824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008464813232421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__indicador_viagem_dentro_limite__viagens_remuneradas.fa3b913bef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect indicador_viagem_dentro_limite\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere indicador_viagem_dentro_limite is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.328504Z", "completed_at": "2025-02-20T18:16:53.334473Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.335713Z", "completed_at": "2025-02-20T18:16:53.335720Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00952458381652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__servico__viagens_remuneradas.ac5b5c62b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.339439Z", "completed_at": "2025-02-20T18:16:53.344053Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.345297Z", "completed_at": "2025-02-20T18:16:53.345305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008205890655517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__subsidio_km__viagens_remuneradas.2858795323", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidio_km\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere subsidio_km is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.349033Z", "completed_at": "2025-02-20T18:16:53.353913Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.355288Z", "completed_at": "2025-02-20T18:16:53.355297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008643150329589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__subsidio_km_teto__viagens_remuneradas.3c99799f65", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subsidio_km_teto\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere subsidio_km_teto is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.359190Z", "completed_at": "2025-02-20T18:16:53.365245Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.366670Z", "completed_at": "2025-02-20T18:16:53.366678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009888648986816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__tipo_viagem__viagens_remuneradas.88dd6f13cc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_viagem\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_viagem is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.485791Z", "completed_at": "2025-02-20T18:16:53.493299Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.494731Z", "completed_at": "2025-02-20T18:16:53.494739Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011275529861450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.subsidio_sumario_servico_dia_pagamento", "compiled": true, "compiled_code": "\n    \n\n\nwith\n    subsidio_dia as (\n        select\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            sum(viagens_faixa) as viagens_dia,\n            sum(km_planejada_faixa) as km_planejada_dia\n        from `rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`\n        -- from `rj-smtr.financeiro_staging.subsidio_faixa_servico_dia`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n        group by data, tipo_dia, consorcio, servico\n    ),\n    subsidio_parametros as (\n        select distinct\n            data_inicio,\n            data_fim,\n            status,\n            subsidio_km,\n            max(subsidio_km) over (\n                partition by data_inicio, data_fim\n            ) as subsidio_km_teto\n        from `rj-smtr`.`subsidio`.`valor_km_tipo_viagem`\n    -- from `rj-smtr.subsidio.valor_km_tipo_viagem`\n    ),\n    penalidade as (\n        select\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            sum(valor_penalidade) as valor_penalidade\n        from `rj-smtr`.`financeiro`.`subsidio_penalidade_servico_faixa`\n        -- from `rj-smtr.financeiro.subsidio_penalidade_servico_faixa`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n        group by data, tipo_dia, consorcio, servico\n    ),\n    subsidio_dia_tipo_viagem as (\n        select *\n        from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n        -- from `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n    ),\n    valores_calculados as (\n        select\n            s.data,\n            s.tipo_dia,\n            s.consorcio,\n            s.servico,\n            pe.valor_penalidade,\n            sum(s.km_apurada_faixa) as km_apurada_dia,\n            sum(s.km_subsidiada_faixa) as km_subsidiada_dia,\n            coalesce(sum(s.valor_acima_limite), 0) as valor_acima_limite,\n            coalesce(sum(s.valor_total_sem_glosa), 0) as valor_total_sem_glosa,\n            sum(s.valor_apurado) + pe.valor_penalidade as valor_total_com_glosa,\n            case\n                when pe.valor_penalidade != 0\n                then - pe.valor_penalidade\n                else\n                    safe_cast(\n                        (\n                            sum(\n                                if(\n                                    indicador_viagem_dentro_limite = true\n                                    and indicador_penalidade_judicial = true,\n                                    km_apurada_faixa * subsidio_km_teto,\n                                    0\n                                )\n                            ) - sum(\n                                if(\n                                    indicador_viagem_dentro_limite = true\n                                    and indicador_penalidade_judicial = true,\n                                    km_apurada_faixa * subsidio_km,\n                                    0\n                                )\n                            )\n                        ) as numeric\n                    )\n            end as valor_judicial,\n        from subsidio_dia_tipo_viagem as s\n        left join penalidade as pe using (data, tipo_dia, consorcio, servico)\n        left join\n            subsidio_parametros as sp\n            on s.data between sp.data_inicio and sp.data_fim\n            and s.tipo_viagem = sp.status\n        group by s.data, s.tipo_dia, s.consorcio, s.servico, pe.valor_penalidade\n    )\nselect\n    sd.data,\n    sd.tipo_dia,\n    sd.consorcio,\n    sd.servico,\n    sd.viagens_dia,\n    vc.km_apurada_dia,\n    vc.km_subsidiada_dia,\n    sd.km_planejada_dia,\n    vc.valor_total_com_glosa as valor_a_pagar,\n    vc.valor_total_com_glosa - vc.valor_total_sem_glosa as valor_glosado,\n    vc.valor_acima_limite,\n    vc.valor_total_sem_glosa,\n    vc.valor_acima_limite\n    + vc.valor_penalidade\n    + vc.valor_total_sem_glosa as valor_total_apurado,\n    vc.valor_judicial,\n    vc.valor_penalidade,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom subsidio_dia as sd\nleft join valores_calculados as vc using (data, tipo_dia, consorcio, servico)", "relation_name": "`rj-smtr`.`financeiro`.`subsidio_sumario_servico_dia_pagamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.498511Z", "completed_at": "2025-02-20T18:16:53.505895Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.507203Z", "completed_at": "2025-02-20T18:16:53.507210Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01107931137084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_faixa_servico_dia", "compiled": true, "compiled_code": "\n    \n\n\nwith\n    subsidio_faixa as (\n        select\n            data,\n            tipo_dia,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            consorcio,\n            servico,\n            viagens_faixa,\n            km_planejada_faixa,\n            pof\n        from `rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`\n        -- from `rj-smtr.financeiro_staging.subsidio_faixa_servico_dia`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n    ),\n    subsidio_faixa_agg as (\n        select\n            data,\n            tipo_dia,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            consorcio,\n            servico,\n            sum(km_apurada_faixa) as km_apurada_faixa,\n            sum(km_subsidiada_faixa) as km_subsidiada_faixa,\n            sum(valor_apurado) as valor_apurado,\n            sum(valor_acima_limite) as valor_acima_limite,\n            sum(valor_total_sem_glosa) as valor_total_sem_glosa\n        from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n        -- from `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n        group by\n            data, tipo_dia, faixa_horaria_inicio, faixa_horaria_fim, consorcio, servico\n    ),\n    pivot_data as (\n        select *\n        from\n            (\n                select\n                    data,\n                    tipo_dia,\n                    faixa_horaria_inicio,\n                    faixa_horaria_fim,\n                    consorcio,\n                    servico,\n                    tipo_viagem,\n                    km_apurada_faixa\n                from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n                -- from `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem`\n                where\n                    data between date('2022-01-01T01:00:00') and date(\n                        '2022-01-01T01:00:00'\n                    )\n                    and data < date(\"2025-01-05\")\n            ) pivot (\n                sum(km_apurada_faixa) as km_apurada for tipo_viagem in (\n                    \"Registrado com ar inoperante\" as registrado_com_ar_inoperante,\n                    \"N\u00e3o licenciado\" as n_licenciado,\n                    \"Autuado por ar inoperante\" as autuado_ar_inoperante,\n                    \"Autuado por seguran\u00e7a\" as autuado_seguranca,\n                    \"Autuado por limpeza/equipamento\" as autuado_limpezaequipamento,\n                    \"Licenciado sem ar e n\u00e3o autuado\" as licenciado_sem_ar_n_autuado,\n                    \"Licenciado com ar e n\u00e3o autuado\" as licenciado_com_ar_n_autuado,\n                    \"N\u00e3o vistoriado\" as n_vistoriado,\n                    \"Sem transa\u00e7\u00e3o\" as sem_transacao\n                )\n            )\n    )\nselect\n    s.data,\n    s.tipo_dia,\n    s.faixa_horaria_inicio,\n    s.faixa_horaria_fim,\n    s.consorcio,\n    s.servico,\n    s.viagens_faixa,\n    agg.km_apurada_faixa,\n    agg.km_subsidiada_faixa,\n    s.km_planejada_faixa,\n    s.pof,\n    coalesce(\n        km_apurada_registrado_com_ar_inoperante, 0\n    ) as km_apurada_registrado_com_ar_inoperante,\n    coalesce(km_apurada_n_licenciado, 0) as km_apurada_n_licenciado,\n    coalesce(km_apurada_autuado_ar_inoperante, 0) as km_apurada_autuado_ar_inoperante,\n    coalesce(km_apurada_autuado_seguranca, 0) as km_apurada_autuado_seguranca,\n    coalesce(\n        km_apurada_autuado_limpezaequipamento, 0\n    ) as km_apurada_autuado_limpezaequipamento,\n    coalesce(\n        km_apurada_licenciado_sem_ar_n_autuado, 0\n    ) as km_apurada_licenciado_sem_ar_n_autuado,\n    coalesce(\n        km_apurada_licenciado_com_ar_n_autuado, 0\n    ) as km_apurada_licenciado_com_ar_n_autuado,\n    coalesce(km_apurada_n_vistoriado, 0) as km_apurada_n_vistoriado,\n    coalesce(km_apurada_sem_transacao, 0) as km_apurada_sem_transacao,\n    agg.valor_apurado,\n    agg.valor_acima_limite,\n    agg.valor_total_sem_glosa,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom subsidio_faixa as s\nleft join\n    subsidio_faixa_agg as agg using (\n        data, tipo_dia, faixa_horaria_inicio, faixa_horaria_fim, consorcio, servico\n    )\nleft join\n    pivot_data as pd using (\n        data, tipo_dia, faixa_horaria_inicio, faixa_horaria_fim, consorcio, servico\n    )", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.511034Z", "completed_at": "2025-02-20T18:16:53.519773Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.521017Z", "completed_at": "2025-02-20T18:16:53.521024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01242685317993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_faixa_servico_dia_pagamento", "compiled": true, "compiled_code": "\n\nwith\n    subsidio_faixa as (\n        select\n            data,\n            tipo_dia,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            consorcio,\n            servico,\n            viagens_faixa,\n            km_planejada_faixa,\n            pof\n        from `rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`\n        -- from `rj-smtr.financeiro_staging.subsidio_faixa_servico_dia`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    penalidade as (\n        select\n            data,\n            tipo_dia,\n            servico,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            valor_penalidade\n        from `rj-smtr`.`financeiro`.`subsidio_penalidade_servico_faixa`\n        -- from `rj-smtr.financeiro.subsidio_penalidade_servico_faixa`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n    ),\n    subsidio_parametros as (\n        select distinct\n            data_inicio,\n            data_fim,\n            status,\n            tecnologia,\n            subsidio_km,\n            case\n                when tecnologia is null\n                then\n                    max(subsidio_km) over (\n                        partition by date_trunc(data_inicio, year), data_fim\n                    )\n                when tecnologia is not null\n                then\n                    max(subsidio_km) over (\n                        partition by date_trunc(data_inicio, year), data_fim, tecnologia\n                    )\n            end as subsidio_km_teto\n        from `rj-smtr`.`subsidio`.`valor_km_tipo_viagem`\n    -- from `rj-smtr.subsidio.valor_km_tipo_viagem`\n    ),\n    subsidio_faixa_agg as (\n        select\n            data,\n            tipo_dia,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            consorcio,\n            servico,\n            sum(km_apurada_faixa) as km_apurada_faixa,\n            sum(km_subsidiada_faixa) as km_subsidiada_faixa,\n            sum(valor_apurado) as valor_apurado,\n            sum(valor_glosado_tecnologia) as valor_glosado_tecnologia,\n            sum(valor_acima_limite) as valor_acima_limite,\n            sum(\n                valor_total_sem_glosa - valor_glosado_tecnologia\n            ) as valor_total_sem_glosa,\n            sum(valor_apurado) + p.valor_penalidade as valor_total_com_glosa,\n            case\n                when p.valor_penalidade != 0\n                then - p.valor_penalidade\n                else\n                    safe_cast(\n                        (\n                            sum(\n                                if(\n                                    indicador_viagem_dentro_limite = true\n                                    and indicador_penalidade_judicial = true,\n                                    km_apurada_faixa * sp.subsidio_km_teto,\n                                    0\n                                )\n                            ) - sum(\n                                if(\n                                    indicador_viagem_dentro_limite = true\n                                    and indicador_penalidade_judicial = true,\n                                    km_apurada_faixa * sp.subsidio_km,\n                                    0\n                                )\n                            )\n                        ) as numeric\n                    )\n            end as valor_judicial,\n            p.valor_penalidade\n        from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem` as s\n        -- from `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem` as s\n        left join\n            penalidade as p using (\n                data, tipo_dia, faixa_horaria_inicio, faixa_horaria_fim, servico\n            )\n        left join\n            subsidio_parametros as sp\n            on s.data between sp.data_inicio and sp.data_fim\n            and s.tipo_viagem = sp.status\n            and (\n                (\n                    s.data >= date('2025-01-05')\n                    and (\n                        s.tecnologia_remunerada = sp.tecnologia\n                        or (s.tecnologia_remunerada is null and sp.tecnologia is null)\n                    )\n                )\n                or (\n                    s.data < date('2025-01-05')\n                    and sp.tecnologia is null\n                )\n            )\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n        group by\n            data,\n            tipo_dia,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            consorcio,\n            servico,\n            valor_penalidade\n    ),\n    pivot_data as (\n        select *\n        from\n            (\n                select\n                    data,\n                    tipo_dia,\n                    faixa_horaria_inicio,\n                    faixa_horaria_fim,\n                    consorcio,\n                    servico,\n                    case\n                        when\n                            tipo_viagem in (\n                                \"Licenciado sem ar e n\u00e3o autuado\",\n                                \"Licenciado com ar e n\u00e3o autuado\"\n                            )\n                            and tecnologia_apurada is not null\n                        then concat(tipo_viagem, ' - ', tecnologia_apurada)\n                        else tipo_viagem\n                    end as tipo_viagem_tecnologia,\n                    km_apurada_faixa\n                from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n                -- from `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem`\n                where\n                    data between date('2022-01-01T01:00:00') and date(\n                        '2022-01-01T01:00:00'\n                    )\n            ) pivot (\n                sum(km_apurada_faixa) as km_apurada for tipo_viagem_tecnologia in (\n                    \"Registrado com ar inoperante\" as registrado_com_ar_inoperante,\n                    \"N\u00e3o licenciado\" as n_licenciado,\n                    \"Autuado por ar inoperante\" as autuado_ar_inoperante,\n                    \"Autuado por seguran\u00e7a\" as autuado_seguranca,\n                    \"Autuado por limpeza/equipamento\" as autuado_limpezaequipamento,\n                    \"Licenciado sem ar e n\u00e3o autuado\" as licenciado_sem_ar_n_autuado,\n                    \"Licenciado com ar e n\u00e3o autuado\" as licenciado_com_ar_n_autuado,\n                    \"Licenciado sem ar e n\u00e3o autuado - MINI\"\n                    as licenciado_sem_ar_n_autuado_mini,\n                    \"Licenciado com ar e n\u00e3o autuado - MINI\"\n                    as licenciado_com_ar_n_autuado_mini,\n                    \"Licenciado sem ar e n\u00e3o autuado - MIDI\"\n                    as licenciado_sem_ar_n_autuado_midi,\n                    \"Licenciado com ar e n\u00e3o autuado - MIDI\"\n                    as licenciado_com_ar_n_autuado_midi,\n                    \"Licenciado sem ar e n\u00e3o autuado - BASICO\"\n                    as licenciado_sem_ar_n_autuado_basico,\n                    \"Licenciado com ar e n\u00e3o autuado - BASICO\"\n                    as licenciado_com_ar_n_autuado_basico,\n                    \"Licenciado sem ar e n\u00e3o autuado - PADRON\"\n                    as licenciado_sem_ar_n_autuado_padron,\n                    \"Licenciado com ar e n\u00e3o autuado - PADRON\"\n                    as licenciado_com_ar_n_autuado_padron,\n                    \"N\u00e3o vistoriado\" as n_vistoriado,\n                    \"Sem transa\u00e7\u00e3o\" as sem_transacao\n                )\n            )\n    )\nselect\n    s.data,\n    s.tipo_dia,\n    s.faixa_horaria_inicio,\n    s.faixa_horaria_fim,\n    s.consorcio,\n    s.servico,\n    s.viagens_faixa,\n    agg.km_apurada_faixa,\n    agg.km_subsidiada_faixa,\n    s.km_planejada_faixa,\n    s.pof,\n    coalesce(\n        km_apurada_registrado_com_ar_inoperante, 0\n    ) as km_apurada_registrado_com_ar_inoperante,\n    coalesce(km_apurada_n_licenciado, 0) as km_apurada_n_licenciado,\n    coalesce(km_apurada_autuado_ar_inoperante, 0) as km_apurada_autuado_ar_inoperante,\n    coalesce(km_apurada_autuado_seguranca, 0) as km_apurada_autuado_seguranca,\n    coalesce(\n        km_apurada_autuado_limpezaequipamento, 0\n    ) as km_apurada_autuado_limpezaequipamento,\n    coalesce(km_apurada_n_vistoriado, 0) as km_apurada_n_vistoriado,\n    coalesce(km_apurada_sem_transacao, 0) as km_apurada_sem_transacao,\n    coalesce(\n        km_apurada_licenciado_sem_ar_n_autuado_mini, 0\n    ) as km_apurada_licenciado_sem_ar_n_autuado_mini,\n    coalesce(\n        km_apurada_licenciado_com_ar_n_autuado_mini, 0\n    ) as km_apurada_licenciado_com_ar_n_autuado_mini,\n    coalesce(\n        km_apurada_licenciado_sem_ar_n_autuado_midi, 0\n    ) as km_apurada_licenciado_sem_ar_n_autuado_midi,\n    coalesce(\n        km_apurada_licenciado_com_ar_n_autuado_midi, 0\n    ) as km_apurada_licenciado_com_ar_n_autuado_midi,\n    coalesce(\n        km_apurada_licenciado_sem_ar_n_autuado_basico, 0\n    ) as km_apurada_licenciado_sem_ar_n_autuado_basico,\n    coalesce(\n        km_apurada_licenciado_com_ar_n_autuado_basico, 0\n    ) as km_apurada_licenciado_com_ar_n_autuado_basico,\n    coalesce(\n        km_apurada_licenciado_sem_ar_n_autuado_padron, 0\n    ) as km_apurada_licenciado_sem_ar_n_autuado_padron,\n    coalesce(\n        km_apurada_licenciado_com_ar_n_autuado_padron, 0\n    ) as km_apurada_licenciado_com_ar_n_autuado_padron,\n    case\n        when s.data >= date('2025-01-05')\n        then\n            coalesce(km_apurada_licenciado_sem_ar_n_autuado_mini, 0)\n            + coalesce(km_apurada_licenciado_sem_ar_n_autuado_midi, 0)\n            + coalesce(km_apurada_licenciado_sem_ar_n_autuado_basico, 0)\n            + coalesce(km_apurada_licenciado_sem_ar_n_autuado_padron, 0)\n        else coalesce(km_apurada_licenciado_sem_ar_n_autuado, 0)\n    end as km_apurada_total_licenciado_sem_ar_n_autuado,\n    case\n        when s.data >= date('2025-01-05')\n        then\n            coalesce(km_apurada_licenciado_com_ar_n_autuado_mini, 0)\n            + coalesce(km_apurada_licenciado_com_ar_n_autuado_midi, 0)\n            + coalesce(km_apurada_licenciado_com_ar_n_autuado_basico, 0)\n            + coalesce(km_apurada_licenciado_com_ar_n_autuado_padron, 0)\n        else coalesce(km_apurada_licenciado_com_ar_n_autuado, 0)\n    end as km_apurada_total_licenciado_com_ar_n_autuado,\n    agg.valor_total_com_glosa as valor_a_pagar,\n    agg.valor_glosado_tecnologia,\n    agg.valor_total_com_glosa - agg.valor_total_sem_glosa as valor_total_glosado,\n    agg.valor_acima_limite,\n    agg.valor_total_sem_glosa,\n    agg.valor_acima_limite\n    + agg.valor_penalidade\n    + agg.valor_total_sem_glosa as valor_total_apurado,\n    agg.valor_judicial,\n    agg.valor_penalidade,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom subsidio_faixa as s\nleft join\n    subsidio_faixa_agg as agg using (\n        data, tipo_dia, faixa_horaria_inicio, faixa_horaria_fim, consorcio, servico\n    )\nleft join\n    pivot_data as pd using (\n        data, tipo_dia, faixa_horaria_inicio, faixa_horaria_fim, consorcio, servico\n    )", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.524714Z", "completed_at": "2025-02-20T18:16:53.533234Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:53.534483Z", "completed_at": "2025-02-20T18:16:53.534491Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012084722518920898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_servico_dia_tipo", "compiled": true, "compiled_code": "\n\nWITH\n  planejado AS (\n  SELECT\n    DISTINCT DATA,\n    tipo_dia,\n    consorcio,\n    servico,\n    distancia_total_planejada AS km_planejada\n  FROM\n    -- rj-smtr.projeto_subsidio_sppo.viagem_planejada\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n  WHERE\n    DATA >= DATE( \"2023-01-16\" )\n    \n      AND DATA BETWEEN DATE(\"2022-01-01T01:00:00\" )\n      AND DATE( \"2022-01-01T01:00:00\" )\n    \n    AND (distancia_total_planejada > 0\n    OR distancia_total_planejada IS NOT NULL)\n  ),\n  viagem AS (\n  SELECT\n    data,\n    servico,\n    id_veiculo,\n    id_viagem,\n    tipo_viagem,\n    distancia_planejada\n  FROM\n    -- rj-smtr.subsidio.viagem_transacao\n    `rj-smtr`.`subsidio`.`viagem_transacao`\n  WHERE\n    DATA >= DATE( \"2023-01-16\" )\n    \n      AND DATA BETWEEN DATE(\"2022-01-01T01:00:00\" )\n      AND DATE( \"2022-01-01T01:00:00\" )\n    \n  ),\n  servico_km_tipo AS (\n  SELECT\n    data,\n    servico,\n    tipo_viagem,\n    COUNT(id_viagem) AS viagens,\n    ROUND(SUM(distancia_planejada), 2) AS km_apurada\n  FROM\n    viagem v\n  GROUP BY\n    1,\n    2,\n    3 ),\n  servico_km_tipo_atualizado AS (\n  SELECT\n    * EXCEPT(tipo_viagem),\n    CASE\n      WHEN tipo_viagem = \"Nao licenciado\" THEN \"N\u00e3o licenciado\"\n      WHEN tipo_viagem = \"Licenciado com ar e autuado (023.II)\" THEN \"Autuado por ar inoperante\"\n      WHEN tipo_viagem = \"Licenciado sem ar\" THEN \"Licenciado sem ar e n\u00e3o autuado\"\n      WHEN tipo_viagem = \"Licenciado com ar e n\u00e3o autuado (023.II)\" THEN \"Licenciado com ar e n\u00e3o autuado\"\n    ELSE tipo_viagem\n    END AS tipo_viagem\n  FROM\n    servico_km_tipo\n  ),\n  servico_km AS (\n  SELECT\n    p.data,\n    p.tipo_dia,\n    p.consorcio,\n    p.servico,\n    v.tipo_viagem,\n    IFNULL(v.viagens, 0) AS viagens,\n    IFNULL(v.km_apurada, 0) AS km_apurada,\n  FROM\n    planejado AS p\n  LEFT JOIN\n    servico_km_tipo_atualizado v\n  ON\n    p.data = v.data\n    AND p.servico = v.servico ),\n  pivot_data AS (\n  SELECT\n    *\n  FROM (\n    SELECT\n      data,\n      tipo_dia,\n      consorcio,\n      servico,\n      tipo_viagem,\n      viagens,\n      km_apurada,\n    FROM\n      servico_km ) PIVOT(SUM(viagens) AS viagens,\n      SUM(km_apurada) AS km_apurada FOR tipo_viagem IN (\n          \"Registrado com ar inoperante\" AS registrado_com_ar_inoperante,\n          \"N\u00e3o licenciado\" AS n_licenciado,\n          \"Autuado por ar inoperante\" AS autuado_ar_inoperante,\n          \"Autuado por seguran\u00e7a\" AS autuado_seguranca,\n          \"Autuado por limpeza/equipamento\" AS autuado_limpezaequipamento,\n          \"Licenciado sem ar e n\u00e3o autuado\" AS licenciado_sem_ar_n_autuado,\n          \"Licenciado com ar e n\u00e3o autuado\" AS licenciado_com_ar_n_autuado,\n          \"N\u00e3o vistoriado\" AS n_vistoriado,\n          \"Sem transa\u00e7\u00e3o\" AS sem_transacao\n        )))\nSELECT\n  sd.*,\n  pd.* EXCEPT(data,\n    tipo_dia,\n    servico,\n    consorcio)\nFROM\n  `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` AS sd\n  -- rj-smtr.dashboard_subsidio_sppo.sumario_servico_dia AS sd\nLEFT JOIN\n  pivot_data AS pd\nON\n  sd.data = pd.data\n  AND sd.servico = pd.servico\n\n  WHERE\n    sd.data BETWEEN DATE(\"2022-01-01T01:00:00\" )\n    AND DATE( \"2022-01-01T01:00:00\" )\n", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:53.538530Z", "completed_at": "2025-02-20T18:16:55.552952Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.560224Z", "completed_at": "2025-02-20T18:16:55.560261Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.029508352279663, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart__sumario_servico_dia.087030789c", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-01-01T00:00:00' as datetime ) as datetime),\n        interval (row_number() over (order by 1) - 1) day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-01-02 01:00:00' as datetime )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(data as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n\n        count(*) as row_cnt\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00')) f\n    \n    where 1=1\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.578679Z", "completed_at": "2025-02-20T18:16:55.594895Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.596632Z", "completed_at": "2025-02-20T18:16:55.596641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022803783416748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__sumario_servico_dia.e54ebc1617", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        valor_penalidade as col_1,\n        \n        count(distinct valor_penalidade) as expression\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where 1=1)\n    where\n        DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00') AND valor_penalidade IS NOT null AND valor_penalidade != 0\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        -valor as col_1,\n        \n        count(distinct valor) as expression\n    from\n        `rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade`\n    where\n        valor IS NOT null AND valor != 0\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.601140Z", "completed_at": "2025-02-20T18:16:55.606330Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.607599Z", "completed_at": "2025-02-20T18:16:55.607607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009070873260498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada__sumario_servico_dia.172a0f345a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.611364Z", "completed_at": "2025-02-20T18:16:55.616049Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.617288Z", "completed_at": "2025-02-20T18:16:55.617295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008294343948364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_planejada__sumario_servico_dia.0e99ab8335", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_planejada >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.621023Z", "completed_at": "2025-02-20T18:16:55.625744Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.627046Z", "completed_at": "2025-02-20T18:16:55.627053Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008343696594238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__perc_km_planejada__sumario_servico_dia.9301f3eb89", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not perc_km_planejada >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.630802Z", "completed_at": "2025-02-20T18:16:55.636574Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.637806Z", "completed_at": "2025-02-20T18:16:55.637813Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009375333786010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__valor_subsidio_pago__sumario_servico_dia.7a92b3139d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not valor_subsidio_pago >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.641492Z", "completed_at": "2025-02-20T18:16:55.646186Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.647417Z", "completed_at": "2025-02-20T18:16:55.647423Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008237600326538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens__sumario_servico_dia.75f8eaaf9c", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.651089Z", "completed_at": "2025-02-20T18:16:55.655762Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.656998Z", "completed_at": "2025-02-20T18:16:55.657005Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008215188980102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__sumario_servico_dia.0fda0fed0f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data, servico\n    from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by data, servico\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.660870Z", "completed_at": "2025-02-20T18:16:55.665573Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.666843Z", "completed_at": "2025-02-20T18:16:55.666850Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008274555206298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__consorcio__sumario_servico_dia.8cf8486de8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consorcio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere consorcio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.670907Z", "completed_at": "2025-02-20T18:16:55.676820Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.678203Z", "completed_at": "2025-02-20T18:16:55.678213Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009866476058959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__data__sumario_servico_dia.7691f000ee", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.681919Z", "completed_at": "2025-02-20T18:16:55.686987Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.688252Z", "completed_at": "2025-02-20T18:16:55.688259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008626461029052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada__sumario_servico_dia.b97717d371", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.692645Z", "completed_at": "2025-02-20T18:16:55.697432Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.698759Z", "completed_at": "2025-02-20T18:16:55.698767Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009232759475708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_planejada__sumario_servico_dia.1210da42e2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_planejada\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.703014Z", "completed_at": "2025-02-20T18:16:55.707918Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.709136Z", "completed_at": "2025-02-20T18:16:55.709148Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008575201034545898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__perc_km_planejada__sumario_servico_dia.0904733500", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_km_planejada\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_km_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.712956Z", "completed_at": "2025-02-20T18:16:55.718979Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.720192Z", "completed_at": "2025-02-20T18:16:55.720200Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009658336639404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__servico__sumario_servico_dia.1971e7d642", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.723886Z", "completed_at": "2025-02-20T18:16:55.728699Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.729946Z", "completed_at": "2025-02-20T18:16:55.729953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008409976959228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__tipo_dia__sumario_servico_dia.c27d3c6ac3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.733680Z", "completed_at": "2025-02-20T18:16:55.738613Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.739900Z", "completed_at": "2025-02-20T18:16:55.739910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008587121963500977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__valor_subsidio_pago__sumario_servico_dia.9bd140fec1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valor_subsidio_pago\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere valor_subsidio_pago is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.743916Z", "completed_at": "2025-02-20T18:16:55.749180Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.750490Z", "completed_at": "2025-02-20T18:16:55.750499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009189367294311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens__sumario_servico_dia.60fdd46c5e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.754321Z", "completed_at": "2025-02-20T18:16:55.762032Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.763337Z", "completed_at": "2025-02-20T18:16:55.763345Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01139974594116211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.teto_pagamento_valor_subsidio_pago__sumario_servico_dia.33be1e96ab", "compiled": true, "compiled_code": "WITH\nsumario_servico_dia AS (\n    SELECT\n        *,\n    FROM\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    WHERE\n        DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")),\nsubsidio_valor_km_tipo_viagem AS (\n    SELECT\n        data_inicio,\n        data_fim,\n        MAX(subsidio_km) AS subsidio_km_teto\n    FROM\n        -- `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n        `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n    WHERE\n        subsidio_km > 0\n    GROUP BY\n        1,\n        2)\nSELECT\n    *\nFROM\n    sumario_servico_dia AS s\nLEFT JOIN\n    subsidio_valor_km_tipo_viagem AS p\nON\n    s.data BETWEEN p.data_inicio\n    AND p.data_fim\nWHERE\n    NOT(ROUND(valor_subsidio_pago/subsidio_km_teto,2) <= ROUND(km_apurada+0.01,2))", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.767121Z", "completed_at": "2025-02-20T18:16:55.774777Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.776128Z", "completed_at": "2025-02-20T18:16:55.776136Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011449813842773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_servico_dia_pagamento", "compiled": true, "compiled_code": "\n    \n\n\nwith\n    subsidio_dia as (\n        select\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            safe_cast(avg(pof) as numeric) as media_pof,\n            safe_cast(coalesce(stddev(pof), 0) as numeric) as desvp_pof\n        from `rj-smtr`.`financeiro_staging`.`subsidio_faixa_servico_dia`\n        -- from `rj-smtr.financeiro_staging.subsidio_faixa_servico_dia`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n        group by data, tipo_dia, consorcio, servico\n    ),\n    valores_subsidio as (\n        select *\n        from `rj-smtr`.`financeiro`.`subsidio_sumario_servico_dia_pagamento`\n        -- from `rj-smtr.financeiro.subsidio_sumario_servico_dia_pagamento`\n        where\n            data\n            between date('2022-01-01T01:00:00') and date('2022-01-01T01:00:00')\n            and data < date(\"2025-01-05\")\n    ),\n    pivot_data as (\n        select *\n        from\n            (\n                select data, tipo_dia, consorcio, servico, tipo_viagem, km_apurada_faixa\n                from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n                -- from `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem`\n                where\n                    data between date('2022-01-01T01:00:00') and date(\n                        '2022-01-01T01:00:00'\n                    )\n                    and data < date(\"2025-01-05\")\n            ) pivot (\n                sum(km_apurada_faixa) as km_apurada for tipo_viagem in (\n                    \"Registrado com ar inoperante\" as registrado_com_ar_inoperante,\n                    \"N\u00e3o licenciado\" as n_licenciado,\n                    \"Autuado por ar inoperante\" as autuado_ar_inoperante,\n                    \"Autuado por seguran\u00e7a\" as autuado_seguranca,\n                    \"Autuado por limpeza/equipamento\" as autuado_limpezaequipamento,\n                    \"Licenciado sem ar e n\u00e3o autuado\" as licenciado_sem_ar_n_autuado,\n                    \"Licenciado com ar e n\u00e3o autuado\" as licenciado_com_ar_n_autuado,\n                    \"N\u00e3o vistoriado\" as n_vistoriado,\n                    \"Sem transa\u00e7\u00e3o\" as sem_transacao\n                )\n            )\n    )\nselect\n    vs.data,\n    vs.tipo_dia,\n    vs.consorcio,\n    vs.servico,\n    vs.viagens_dia,\n    vs.km_apurada_dia,\n    vs.km_subsidiada_dia,\n    vs.km_planejada_dia,\n    sd.media_pof,\n    sd.desvp_pof,\n    coalesce(\n        km_apurada_registrado_com_ar_inoperante, 0\n    ) as km_apurada_registrado_com_ar_inoperante,\n    coalesce(km_apurada_n_licenciado, 0) as km_apurada_n_licenciado,\n    coalesce(km_apurada_autuado_ar_inoperante, 0) as km_apurada_autuado_ar_inoperante,\n    coalesce(km_apurada_autuado_seguranca, 0) as km_apurada_autuado_seguranca,\n    coalesce(\n        km_apurada_autuado_limpezaequipamento, 0\n    ) as km_apurada_autuado_limpezaequipamento,\n    coalesce(\n        km_apurada_licenciado_sem_ar_n_autuado, 0\n    ) as km_apurada_licenciado_sem_ar_n_autuado,\n    coalesce(\n        km_apurada_licenciado_com_ar_n_autuado, 0\n    ) as km_apurada_licenciado_com_ar_n_autuado,\n    coalesce(km_apurada_n_vistoriado, 0) as km_apurada_n_vistoriado,\n    coalesce(km_apurada_sem_transacao, 0) as km_apurada_sem_transacao,\n    vs.valor_a_pagar,\n    vs.valor_glosado,\n    vs.valor_acima_limite,\n    vs.valor_total_sem_glosa,\n    vs.valor_total_apurado,\n    vs.valor_judicial,\n    vs.valor_penalidade,\n    '' as versao,\n    current_datetime(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nfrom valores_subsidio as vs\nleft join subsidio_dia as sd using (data, tipo_dia, consorcio, servico)\nleft join pivot_data as pd using (data, tipo_dia, consorcio, servico)", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.780066Z", "completed_at": "2025-02-20T18:16:55.785404Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.786704Z", "completed_at": "2025-02-20T18:16:55.786711Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008974552154541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.check_km_planejada__sumario_faixa_servico_dia.8e9f5bc694", "compiled": true, "compiled_code": "with\n        viagem_planejada as (\n            select distinct\n                data,\n                servico,\n                faixa_horaria_inicio,\n                round(distancia_total_planejada, 3) as distancia_total_planejada\n            from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n            -- `rj-smtr.projeto_subsidio_sppo.viagem_planejada`\n            where\n                data between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        ),\n        os_faixa as (\n            select\n                date(\n                    datetime(data) + interval cast(\n                        split(faixa_horaria_inicio, ':')[safe_offset(0)] as int64\n                    ) hour\n                ) as data,\n                servico,\n                datetime(data) + interval cast(\n                    split(faixa_horaria_inicio, ':')[safe_offset(0)] as int64\n                ) hour as faixa_horaria_inicio,\n                round(sum(quilometragem), 3) as quilometragem\n            from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n            -- `rj-smtr.projeto_subsidio_sppo.subsidio_data_versao_efetiva`\n            left join\n                `rj-smtr`.`planejamento`.`ordem_servico_faixa_horaria`\n                -- `rj-smtr.planejamento.ordem_servico_faixa_horaria`\n                using (feed_start_date, tipo_os, tipo_dia)\n            where\n                data between date_sub(\n                    date(\"2022-01-01T00:00:00\"), interval 1 day\n                ) and date(\"2022-01-01T01:00:00\")\n            group by 1, 2, 3\n        ),\n        sumario as (\n            select data, servico, faixa_horaria_inicio, km_planejada_faixa\n            from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n            -- `rj-smtr.dashboard_subsidio_sppo_v2.sumario_faixa_servico_dia_pagamento`\n            where\n                data between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        )\n    select *\n    from sumario\n    full join viagem_planejada p using (data, servico, faixa_horaria_inicio)\n    full join os_faixa using (data, servico, faixa_horaria_inicio)\n    where\n        km_planejada_faixa != distancia_total_planejada\n        or quilometragem != km_planejada_faixa", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.803411Z", "completed_at": "2025-02-20T18:16:55.808102Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:55.809347Z", "completed_at": "2025-02-20T18:16:55.809354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008314847946166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.check_km_planejada__sumario_faixa_servico_dia_pagamento.d52702b9b0", "compiled": true, "compiled_code": "with\n        viagem_planejada as (\n            select distinct\n                data,\n                servico,\n                faixa_horaria_inicio,\n                round(distancia_total_planejada, 3) as distancia_total_planejada\n            from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n            -- `rj-smtr.projeto_subsidio_sppo.viagem_planejada`\n            where\n                data between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        ),\n        os_faixa as (\n            select\n                date(\n                    datetime(data) + interval cast(\n                        split(faixa_horaria_inicio, ':')[safe_offset(0)] as int64\n                    ) hour\n                ) as data,\n                servico,\n                datetime(data) + interval cast(\n                    split(faixa_horaria_inicio, ':')[safe_offset(0)] as int64\n                ) hour as faixa_horaria_inicio,\n                round(sum(quilometragem), 3) as quilometragem\n            from `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva`\n            -- `rj-smtr.projeto_subsidio_sppo.subsidio_data_versao_efetiva`\n            left join\n                `rj-smtr`.`planejamento`.`ordem_servico_faixa_horaria`\n                -- `rj-smtr.planejamento.ordem_servico_faixa_horaria`\n                using (feed_start_date, tipo_os, tipo_dia)\n            where\n                data between date_sub(\n                    date(\"2022-01-01T00:00:00\"), interval 1 day\n                ) and date(\"2022-01-01T01:00:00\")\n            group by 1, 2, 3\n        ),\n        sumario as (\n            select data, servico, faixa_horaria_inicio, km_planejada_faixa\n            from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n            -- `rj-smtr.dashboard_subsidio_sppo_v2.sumario_faixa_servico_dia_pagamento`\n            where\n                data between date(\"2022-01-01T00:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        )\n    select *\n    from sumario\n    full join viagem_planejada p using (data, servico, faixa_horaria_inicio)\n    full join os_faixa using (data, servico, faixa_horaria_inicio)\n    where\n        km_planejada_faixa != distancia_total_planejada\n        or quilometragem != km_planejada_faixa", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:55.813121Z", "completed_at": "2025-02-20T18:16:57.566234Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.572101Z", "completed_at": "2025-02-20T18:16:57.572135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7647686004638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart__sumario_faixa_servico_dia_pagamento.4684c05b29", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-01-01T00:00:00' as datetime ) as datetime),\n        interval (row_number() over (order by 1) - 1) day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-01-02 01:00:00' as datetime )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(data as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n\n        count(*) as row_cnt\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00')) f\n    \n    where 1=1\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.589010Z", "completed_at": "2025-02-20T18:16:57.605668Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.607988Z", "completed_at": "2025-02-20T18:16:57.608000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026510000228881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__sumario_faixa_servico_dia_pagamento.a6186e5da1", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        valor_penalidade as col_1,\n        \n        count(distinct valor_penalidade) as expression\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where 1=1)\n    where\n        DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00') AND valor_penalidade IS NOT null AND valor_penalidade != 0\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        -valor as col_1,\n        \n        count(distinct valor) as expression\n    from\n        `rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade`\n    where\n        valor IS NOT null AND valor != 0 and data_fim >= DATE('2022-01-01T00:00:00') and data_inicio <= DATE('2022-01-01T01:00:00')\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.614114Z", "completed_at": "2025-02-20T18:16:57.622588Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.623908Z", "completed_at": "2025-02-20T18:16:57.623916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012561798095703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_faixa__sumario_faixa_servico_dia_pagamento.54283799e2", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_faixa >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.627713Z", "completed_at": "2025-02-20T18:16:57.632475Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.633759Z", "completed_at": "2025-02-20T18:16:57.633766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008689403533935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_planejada_faixa__sumario_faixa_servico_dia_pagamento.39b6b7ff3e", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_planejada_faixa > 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.637773Z", "completed_at": "2025-02-20T18:16:57.642524Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.643810Z", "completed_at": "2025-02-20T18:16:57.643817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008363485336303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_subsidiada_faixa__sumario_faixa_servico_dia_pagamento.a3406e56dd", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_subsidiada_faixa >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.647534Z", "completed_at": "2025-02-20T18:16:57.652185Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.653572Z", "completed_at": "2025-02-20T18:16:57.653578Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008391141891479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__pof__sumario_faixa_servico_dia_pagamento.e5cecce3cc", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pof >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.657371Z", "completed_at": "2025-02-20T18:16:57.663897Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.666502Z", "completed_at": "2025-02-20T18:16:57.666511Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012389183044433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_faixa__sumario_faixa_servico_dia_pagamento.2a408a264e", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_faixa >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.672592Z", "completed_at": "2025-02-20T18:16:57.677417Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.678726Z", "completed_at": "2025-02-20T18:16:57.678733Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00850057601928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__sumario_faixa_servico_dia_pagamento.7607b98895", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data, servico, faixa_horaria_inicio\n    from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by data, servico, faixa_horaria_inicio\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.682485Z", "completed_at": "2025-02-20T18:16:57.687536Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.689213Z", "completed_at": "2025-02-20T18:16:57.689226Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00941920280456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.expression_is_true__sumario_faixa_servico_dia_pagamento.7c26352693", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n\nwhere not((valor_a_pagar - valor_penalidade) IS NOT NULL AND (valor_a_pagar - valor_penalidade) >= 0)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.693283Z", "completed_at": "2025-02-20T18:16:57.699316Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.700595Z", "completed_at": "2025-02-20T18:16:57.700603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009668588638305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__consorcio__sumario_faixa_servico_dia_pagamento.3e7d8466bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consorcio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere consorcio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.704409Z", "completed_at": "2025-02-20T18:16:57.709092Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.710348Z", "completed_at": "2025-02-20T18:16:57.710355Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008260488510131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__data__sumario_faixa_servico_dia_pagamento.2f0281dff5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.714049Z", "completed_at": "2025-02-20T18:16:57.718864Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.720104Z", "completed_at": "2025-02-20T18:16:57.720111Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008369684219360352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_faixa__sumario_faixa_servico_dia_pagamento.33bf15c625", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_faixa\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_faixa is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.723933Z", "completed_at": "2025-02-20T18:16:57.728753Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.729992Z", "completed_at": "2025-02-20T18:16:57.730000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00857234001159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_planejada_faixa__sumario_faixa_servico_dia_pagamento.b08a7658f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_planejada_faixa\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_planejada_faixa is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.733869Z", "completed_at": "2025-02-20T18:16:57.740169Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.741426Z", "completed_at": "2025-02-20T18:16:57.741434Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010000228881835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_subsidiada_faixa__sumario_faixa_servico_dia_pagamento.2a9554910c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_subsidiada_faixa\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_subsidiada_faixa is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.745311Z", "completed_at": "2025-02-20T18:16:57.750537Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.751780Z", "completed_at": "2025-02-20T18:16:57.751789Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008858203887939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__pof__sumario_faixa_servico_dia_pagamento.fbd5b1913f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pof\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere pof is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.755596Z", "completed_at": "2025-02-20T18:16:57.760649Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.761884Z", "completed_at": "2025-02-20T18:16:57.761892Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008776664733886719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__servico__sumario_faixa_servico_dia_pagamento.1e7c9ecefe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.767197Z", "completed_at": "2025-02-20T18:16:57.774062Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.775912Z", "completed_at": "2025-02-20T18:16:57.775922Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01245880126953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__tipo_dia__sumario_faixa_servico_dia_pagamento.d8c213f5d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.779816Z", "completed_at": "2025-02-20T18:16:57.786422Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.787678Z", "completed_at": "2025-02-20T18:16:57.787686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01024770736694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__valor_a_pagar__sumario_faixa_servico_dia_pagamento.5f117f23fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valor_a_pagar\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere valor_a_pagar is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.791445Z", "completed_at": "2025-02-20T18:16:57.796319Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.797554Z", "completed_at": "2025-02-20T18:16:57.797561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008550167083740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__valor_penalidade__sumario_faixa_servico_dia_pagamento.6e095d7f70", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valor_penalidade\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere valor_penalidade is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.801326Z", "completed_at": "2025-02-20T18:16:57.806398Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.807657Z", "completed_at": "2025-02-20T18:16:57.807664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008686065673828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_faixa__sumario_faixa_servico_dia_pagamento.ba55805fd1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_faixa\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_faixa is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.811471Z", "completed_at": "2025-02-20T18:16:57.816071Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.817328Z", "completed_at": "2025-02-20T18:16:57.817335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00829172134399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.sumario_servico_dia_tipo_soma_km__km_apurada_dia__sumario_faixa_servico_dia_pagamento.2a1ef31841", "compiled": true, "compiled_code": "with\n        kms as (\n            select\n                * except (km_apurada_faixa),\n                km_apurada_faixa,\n                round(\n                    coalesce(km_apurada_registrado_com_ar_inoperante, 0)\n                    + coalesce(km_apurada_n_licenciado, 0)\n                    + coalesce(km_apurada_autuado_ar_inoperante, 0)\n                    + coalesce(km_apurada_autuado_seguranca, 0)\n                    + coalesce(km_apurada_autuado_limpezaequipamento, 0)\n                    \n                        + coalesce(km_apurada_total_licenciado_sem_ar_n_autuado, 0)\n                        + coalesce(km_apurada_total_licenciado_com_ar_n_autuado, 0)\n                    \n                    + coalesce(km_apurada_n_vistoriado, 0)\n                    + coalesce(km_apurada_sem_transacao, 0),\n                    2\n                ) as km_apurada2\n            from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n            where\n                data between date(\"2022-01-01T01:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        )\n    select *, abs(km_apurada2 -km_apurada_faixa) as dif\n    from kms\n    where abs(km_apurada2 -km_apurada_faixa) > 0.02", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.821189Z", "completed_at": "2025-02-20T18:16:57.827583Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.828842Z", "completed_at": "2025-02-20T18:16:57.828850Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009998798370361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.teto_pagamento_valor_subsidio_pago__sumario_faixa_servico_dia_pagamento.1bb8870fc3", "compiled": true, "compiled_code": "WITH\nsumario_faixa_servico_dia_pagamento AS (\n    SELECT\n        *,\n    FROM\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    WHERE\n        DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")),\nsubsidio_valor_km_tipo_viagem AS (\n    SELECT\n        data_inicio,\n        data_fim,\n        MAX(subsidio_km) AS subsidio_km_teto\n    FROM\n        -- `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n        `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n    WHERE\n        subsidio_km > 0\n    GROUP BY\n        1,\n        2)\nSELECT\n    *\nFROM\n    sumario_faixa_servico_dia_pagamento AS s\nLEFT JOIN\n    subsidio_valor_km_tipo_viagem AS p\nON\n    s.data BETWEEN p.data_inicio\n    AND p.data_fim\nWHERE\n    NOT(ROUND((valor_a_pagar - valor_penalidade)/subsidio_km_teto,2) <= ROUND(km_apurada_faixa+0.01,2))", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.832619Z", "completed_at": "2025-02-20T18:16:57.839939Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.841188Z", "completed_at": "2025-02-20T18:16:57.841195Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010926008224487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_servico_dia_historico", "compiled": true, "compiled_code": "\n\nWITH\n  viagem_planejada AS (\n    (\n      SELECT\n        DISTINCT v.data,\n        v.servico,\n        o.vista\n      FROM\n        `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` AS v\n        -- `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada` AS v\n      LEFT JOIN\n        `rj-smtr`.`projeto_subsidio_sppo`.`subsidio_data_versao_efetiva` AS sdve\n        -- rj-smtr.projeto_subsidio_sppo.subsidio_data_versao_efetiva AS sdve\n      USING\n        (data)\n      LEFT JOIN\n        `rj-smtr`.`gtfs`.`ordem_servico` AS o\n        -- rj-smtr.gtfs.ordem_servico AS o\n      ON v.feed_start_date = o.feed_start_date\n        AND v.servico = o.servico\n        AND sdve.tipo_os = o.tipo_os\n      WHERE\n        data >= \"2024-05-01\"\n    )\n  UNION ALL\n    (\n      SELECT\n        DISTINCT `data`,\n        servico,\n        vista\n      FROM\n        `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        -- `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n      WHERE\n        (id_tipo_trajeto = 0\n        OR id_tipo_trajeto IS NULL)\n        AND data < \"2024-05-01\"\n    )\n  ),\n  -- v1: Valor do subs\u00eddio pr\u00e9 glosa por tipos de viagem (Antes de 2023-01-16)\n  sumario_sem_glosa AS (\n  SELECT\n    `data`,\n    tipo_dia,\n    consorcio,\n    servico,\n    vista,\n    viagens_subsidio AS viagens,\n    distancia_total_subsidio AS km_apurada,\n    distancia_total_planejada AS km_planejada,\n    perc_distancia_total_subsidio AS perc_km_planejada,\n    valor_total_subsidio AS valor_subsidio_pago,\n    NULL AS valor_penalidade\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_dia`\n    -- `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_dia`\n  LEFT JOIN\n    viagem_planejada\n  USING\n    ( `data`,\n      servico ) ),\n  -- v2: Valor do subs\u00eddio p\u00f3s glosa por tipos de viagem (2023-01-16 a 2023-07-15 e ap\u00f3s de 2023-09-01)\n  sumario_com_glosa AS (\n  SELECT\n    `data`,\n    tipo_dia,\n    consorcio,\n    servico,\n    vista,\n    viagens,\n    km_apurada,\n    km_planejada,\n    perc_km_planejada,\n    valor_subsidio_pago,\n    valor_penalidade\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia`\n    -- `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia`\n  LEFT JOIN\n    viagem_planejada\n  USING\n    ( `data`,\n      servico )),\n  -- Valor do subs\u00eddio sem glosas - Suspenso por Decis\u00e3o Judicial (Entre 2023-07-16 e 2023-08-31) (R$ 2.81/km em 2023)\n  subsidio_total_glosa_suspensa AS (\n  SELECT\n    DATA,\n    servico,\n    CASE\n      WHEN perc_km_planejada >= 80 THEN ROUND((COALESCE(km_apurada_autuado_ar_inoperante, 0) + COALESCE(km_apurada_autuado_seguranca, 0) + COALESCE(km_apurada_autuado_limpezaequipamento, 0) + COALESCE(km_apurada_licenciado_sem_ar_n_autuado, 0) + COALESCE(km_apurada_licenciado_com_ar_n_autuado, 0)) * 2.81, 2)\n    ELSE\n    0\n  END\n    AS valor_subsidio_pago,\n    0 AS valor_penalidade\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo`\n    -- `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo`\n  WHERE\n    DATA BETWEEN \"2023-07-16\"\n    AND \"2023-08-31\"),\n  -- v3: Sum\u00e1rio subs\u00eddio sem glosas - Suspenso por Decis\u00e3o Judicial (Entre 2023-07-16 e 2023-08-31)\n  sumario_glosa_suspensa AS (\n  SELECT\n    s.* EXCEPT (valor_subsidio_pago,\n      valor_penalidade),\n    g.valor_subsidio_pago,\n    g.valor_penalidade\n  FROM\n    subsidio_total_glosa_suspensa AS g\n  LEFT JOIN\n    sumario_com_glosa AS s\n  USING\n    ( `data`,\n      servico )),\ndados_completos AS (\n  SELECT\n  *\n  FROM\n    sumario_sem_glosa\n  UNION ALL (\n    SELECT\n      *\n    FROM\n      sumario_com_glosa\n    WHERE\n      `data` < \"2023-07-16\"\n      OR `data` > \"2023-08-31\" )\n  UNION ALL (\n    SELECT\n      *\n    FROM\n      sumario_glosa_suspensa )\n)\nSELECT\n  *,\n  CURRENT_DATETIME(\"America/Sao_Paulo\") as datetime_ultima_atualizacao\nFROM\n  dados_completos\n\n  WHERE\n    data BETWEEN DATE(\"2022-01-01T01:00:00\" )\n    AND DATE( \"2022-01-01T01:00:00\" )\n", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.845062Z", "completed_at": "2025-02-20T18:16:57.849599Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.850894Z", "completed_at": "2025-02-20T18:16:57.850901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008152484893798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_servico_dia_tipo_sem_glosa", "compiled": true, "compiled_code": "WITH\n  parametros AS (\n  SELECT\n    data_inicio,\n    data_fim,\n    MAX(IF(status = \"Licenciado sem ar e n\u00e3o autuado\", subsidio_km, NULL)) AS subsidio_km_sem_ar_n_autuado,\n    MAX(IF(status = \"Licenciado com ar e n\u00e3o autuado\", subsidio_km, NULL)) AS subsidio_km_sem_glosa\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n  WHERE\n    data_inicio >= \"2023-07-04\"\n    AND status IN (\"Licenciado sem ar e n\u00e3o autuado\", \"Licenciado com ar e n\u00e3o autuado\")\n  GROUP BY\n    1,\n    2 )\nSELECT\n  consorcio,\n  data,\n  tipo_dia,\n  servico,\n  viagens AS viagens_subsidio,\n  km_planejada AS distancia_total_planejada,\n  km_apurada AS distancia_total_subsidio,\n  NULL AS valor_total_aferido, -- TODO: Excluir essa coluna? \u00e9 utilizada?\n  perc_km_planejada AS perc_distancia_total_subsidio,\n  -- Valor total sem glosas: quando existe subsidio (POD>80%),  adiciona o valor glosado por tipo de viagem ao total\n  CASE\n    WHEN perc_km_planejada >= 80 THEN ROUND(COALESCE(valor_subsidio_pago, 0) + COALESCE(km_apurada_registrado_com_ar_inoperante * subsidio_km_sem_glosa, 0) + COALESCE(km_apurada_autuado_ar_inoperante * subsidio_km_sem_glosa, 0) + COALESCE(km_apurada_autuado_seguranca * subsidio_km_sem_glosa, 0) + COALESCE(km_apurada_autuado_limpezaequipamento * subsidio_km_sem_glosa, 0) + COALESCE(km_apurada_licenciado_sem_ar_n_autuado * (subsidio_km_sem_glosa - subsidio_km_sem_ar_n_autuado), 0) + COALESCE(km_apurada_n_vistoriado * subsidio_km_sem_glosa, 0) + COALESCE(km_apurada_sem_transacao * subsidio_km_sem_glosa, 0), 2)\n  ELSE\n  0\nEND\n  AS valor_total_subsidio,\n  COALESCE(viagens_n_licenciado, 0) AS viagens_n_licenciado,\n  COALESCE(km_apurada_n_licenciado, 0) AS km_apurada_n_licenciado,\n  COALESCE(viagens_autuado_ar_inoperante, 0) AS viagens_autuado_ar_inoperante,\n  COALESCE(km_apurada_autuado_ar_inoperante, 0) AS km_apurada_autuado_ar_inoperante,\n  COALESCE(viagens_autuado_seguranca, 0) AS viagens_autuado_seguranca,\n  COALESCE(km_apurada_autuado_seguranca, 0) AS km_apurada_autuado_seguranca,\n  COALESCE(viagens_autuado_limpezaequipamento, 0) AS viagens_autuado_limpezaequipamento,\n  COALESCE(km_apurada_autuado_limpezaequipamento, 0) AS km_apurada_autuado_limpezaequipamento,\n  COALESCE(viagens_licenciado_sem_ar_n_autuado, 0) AS viagens_licenciado_sem_ar_n_autuado,\n  COALESCE(km_apurada_licenciado_sem_ar_n_autuado, 0) AS km_apurada_licenciado_sem_ar_n_autuado,\n  COALESCE(viagens_licenciado_com_ar_n_autuado, 0) AS viagens_licenciado_com_ar_n_autuado,\n  COALESCE(km_apurada_licenciado_com_ar_n_autuado, 0) AS km_apurada_licenciado_com_ar_n_autuado,\n  COALESCE(viagens_registrado_com_ar_inoperante, 0) AS viagens_registrado_com_ar_inoperante,\n  COALESCE(km_apurada_registrado_com_ar_inoperante, 0) AS km_apurada_registrado_com_ar_inoperante,\n  COALESCE(viagens_n_vistoriado, 0) AS viagens_n_vistoriado,\n  COALESCE(km_apurada_n_vistoriado, 0) AS km_apurada_n_vistoriado,\n  COALESCE(viagens_sem_transacao, 0) AS viagens_sem_transacao,\n  COALESCE(km_apurada_sem_transacao, 0) AS km_apurada_sem_transacao\nFROM\n  `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo` -- `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo`\nLEFT JOIN\n  parametros\nON\n  DATA BETWEEN data_inicio\n  AND data_fim", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.854608Z", "completed_at": "2025-02-20T18:16:57.859419Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:57.860676Z", "completed_at": "2025-02-20T18:16:57.860683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008402109146118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.sumario_servico_dia_tipo_soma_km__km_apurada__sumario_servico_dia_tipo.4bb58da962", "compiled": true, "compiled_code": "with\n        kms as (\n            select\n                * except (km_apurada),\n                km_apurada,\n                round(\n                    coalesce(km_apurada_registrado_com_ar_inoperante, 0)\n                    + coalesce(km_apurada_n_licenciado, 0)\n                    + coalesce(km_apurada_autuado_ar_inoperante, 0)\n                    + coalesce(km_apurada_autuado_seguranca, 0)\n                    + coalesce(km_apurada_autuado_limpezaequipamento, 0)\n                    \n                        + coalesce(km_apurada_licenciado_sem_ar_n_autuado, 0)\n                        + coalesce(km_apurada_licenciado_com_ar_n_autuado, 0)\n                    \n                    + coalesce(km_apurada_n_vistoriado, 0)\n                    + coalesce(km_apurada_sem_transacao, 0),\n                    2\n                ) as km_apurada2\n            from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n            where\n                data between date(\"2022-01-01T01:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        )\n    select *, abs(km_apurada2 -km_apurada) as dif\n    from kms\n    where abs(km_apurada2 -km_apurada) > 0.02", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:57.865862Z", "completed_at": "2025-02-20T18:16:59.541864Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.543231Z", "completed_at": "2025-02-20T18:16:59.543241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.679880142211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart__sumario_servico_dia_pagamento.4bb5500f4e", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-01-01T00:00:00' as datetime ) as datetime),\n        interval (row_number() over (order by 1) - 1) day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-01-02 01:00:00' as datetime )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(data as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n\n        count(*) as row_cnt\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00')) f\n    \n    where 1=1\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.547250Z", "completed_at": "2025-02-20T18:16:59.555975Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.557279Z", "completed_at": "2025-02-20T18:16:59.557288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012553215026855469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_table_aggregation_to_equal_other_table__sumario_servico_dia_pagamento.1a829f0dd8", "compiled": true, "compiled_code": "\n    with a as (\n        \n    select\n        \n        valor_penalidade as col_1,\n        \n        count(distinct valor_penalidade) as expression\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where 1=1)\n    where\n        DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00') AND valor_penalidade IS NOT null AND valor_penalidade != 0\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    b as (\n        \n    select\n        \n        -valor as col_1,\n        \n        count(distinct valor) as expression\n    from\n        `rj-smtr`.`dashboard_subsidio_sppo`.`valor_tipo_penalidade`\n    where\n        valor IS NOT null AND valor != 0 and data_fim >= DATE('2022-01-01T00:00:00') and data_inicio <= DATE('2022-01-01T01:00:00')\n    \n    \n    group by\n        1\n        \n    \n\n    ),\n    final as (\n\n        select\n            coalesce(a.col_1, b.col_1) as col_1,\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a\n            full outer join\n            b on\n            a.col_1 = b.col_1 \n            \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0\n        ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.561302Z", "completed_at": "2025-02-20T18:16:59.566482Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.567756Z", "completed_at": "2025-02-20T18:16:59.567766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009006977081298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_dia__sumario_servico_dia_pagamento.2ccde1224d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_dia >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.571631Z", "completed_at": "2025-02-20T18:16:59.585816Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.588313Z", "completed_at": "2025-02-20T18:16:59.588323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019177675247192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_planejada_dia__sumario_servico_dia_pagamento.002322de29", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_planejada_dia >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.592324Z", "completed_at": "2025-02-20T18:16:59.598178Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.599564Z", "completed_at": "2025-02-20T18:16:59.599573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009744405746459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_subsidiada_dia__sumario_servico_dia_pagamento.bd3242d3df", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_subsidiada_dia >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.603609Z", "completed_at": "2025-02-20T18:16:59.609064Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.610426Z", "completed_at": "2025-02-20T18:16:59.610434Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009364604949951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__media_pof__sumario_servico_dia_pagamento.9948a4ecb7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not media_pof >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.614667Z", "completed_at": "2025-02-20T18:16:59.620836Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.622121Z", "completed_at": "2025-02-20T18:16:59.622129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00994110107421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_dia__sumario_servico_dia_pagamento.353674609b", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_dia >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.625937Z", "completed_at": "2025-02-20T18:16:59.631033Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.632441Z", "completed_at": "2025-02-20T18:16:59.632450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008893966674804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__sumario_servico_dia_pagamento.a77ef609f7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data, servico\n    from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by data, servico\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.636338Z", "completed_at": "2025-02-20T18:16:59.642412Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.643676Z", "completed_at": "2025-02-20T18:16:59.643685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009760618209838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.expression_is_true__sumario_servico_dia_pagamento.1ab4ec7a1e", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n\nwhere not((valor_a_pagar - valor_penalidade) IS NOT NULL AND (valor_a_pagar - valor_penalidade) >= 0)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.647574Z", "completed_at": "2025-02-20T18:16:59.652695Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.653944Z", "completed_at": "2025-02-20T18:16:59.653952Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008800029754638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__consorcio__sumario_servico_dia_pagamento.fb7227f2bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consorcio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere consorcio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.657720Z", "completed_at": "2025-02-20T18:16:59.664092Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.665334Z", "completed_at": "2025-02-20T18:16:59.665343Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010047435760498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__data__sumario_servico_dia_pagamento.c81ae32615", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.669267Z", "completed_at": "2025-02-20T18:16:59.674476Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.675769Z", "completed_at": "2025-02-20T18:16:59.675777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009729385375976562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_dia__sumario_servico_dia_pagamento.af98784d94", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.683684Z", "completed_at": "2025-02-20T18:16:59.691797Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.693118Z", "completed_at": "2025-02-20T18:16:59.693127Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013570785522460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_planejada_dia__sumario_servico_dia_pagamento.ef08e1dfc6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_planejada_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_planejada_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.697253Z", "completed_at": "2025-02-20T18:16:59.702834Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.704208Z", "completed_at": "2025-02-20T18:16:59.704217Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009598970413208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_subsidiada_dia__sumario_servico_dia_pagamento.c766036eb0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_subsidiada_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_subsidiada_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.708470Z", "completed_at": "2025-02-20T18:16:59.715418Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.716837Z", "completed_at": "2025-02-20T18:16:59.716846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011063575744628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__media_pof__sumario_servico_dia_pagamento.27af89cc4f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_pof\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere media_pof is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.721222Z", "completed_at": "2025-02-20T18:16:59.727207Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.728535Z", "completed_at": "2025-02-20T18:16:59.728544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009903907775878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__servico__sumario_servico_dia_pagamento.309ea06bae", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.732303Z", "completed_at": "2025-02-20T18:16:59.737813Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.739434Z", "completed_at": "2025-02-20T18:16:59.739443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009620904922485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__tipo_dia__sumario_servico_dia_pagamento.42ae76844b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.745501Z", "completed_at": "2025-02-20T18:16:59.753523Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.754871Z", "completed_at": "2025-02-20T18:16:59.754881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013509988784790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__valor_a_pagar__sumario_servico_dia_pagamento.a0f1678a6c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valor_a_pagar\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere valor_a_pagar is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.759477Z", "completed_at": "2025-02-20T18:16:59.767018Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.768314Z", "completed_at": "2025-02-20T18:16:59.768323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012047290802001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__valor_penalidade__sumario_servico_dia_pagamento.6a3888f539", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valor_penalidade\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere valor_penalidade is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.772199Z", "completed_at": "2025-02-20T18:16:59.777987Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.779576Z", "completed_at": "2025-02-20T18:16:59.779587Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009848833084106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_dia__sumario_servico_dia_pagamento.7acd2868eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.783772Z", "completed_at": "2025-02-20T18:16:59.790047Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.791448Z", "completed_at": "2025-02-20T18:16:59.791458Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010469436645507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.sumario_servico_dia_tipo_soma_km__km_apurada_dia__sumario_servico_dia_pagamento.8051dbf445", "compiled": true, "compiled_code": "with\n        kms as (\n            select\n                * except (km_apurada_dia),\n                km_apurada_dia,\n                round(\n                    coalesce(km_apurada_registrado_com_ar_inoperante, 0)\n                    + coalesce(km_apurada_n_licenciado, 0)\n                    + coalesce(km_apurada_autuado_ar_inoperante, 0)\n                    + coalesce(km_apurada_autuado_seguranca, 0)\n                    + coalesce(km_apurada_autuado_limpezaequipamento, 0)\n                    \n                        + coalesce(km_apurada_licenciado_sem_ar_n_autuado, 0)\n                        + coalesce(km_apurada_licenciado_com_ar_n_autuado, 0)\n                    \n                    + coalesce(km_apurada_n_vistoriado, 0)\n                    + coalesce(km_apurada_sem_transacao, 0),\n                    2\n                ) as km_apurada2\n            from (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n            where\n                data between date(\"2022-01-01T01:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n        )\n    select *, abs(km_apurada2 -km_apurada_dia) as dif\n    from kms\n    where abs(km_apurada2 -km_apurada_dia) > 0.02", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.795708Z", "completed_at": "2025-02-20T18:16:59.800818Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.802075Z", "completed_at": "2025-02-20T18:16:59.802083Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008972406387329102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.teto_pagamento_valor_subsidio_pago__sumario_servico_dia_pagamento.34fc02a9e2", "compiled": true, "compiled_code": "WITH\nsumario_servico_dia_pagamento AS (\n    SELECT\n        *,\n    FROM\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_servico_dia_pagamento` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    WHERE\n        DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")),\nsubsidio_valor_km_tipo_viagem AS (\n    SELECT\n        data_inicio,\n        data_fim,\n        MAX(subsidio_km) AS subsidio_km_teto\n    FROM\n        -- `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n        `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n    WHERE\n        subsidio_km > 0\n    GROUP BY\n        1,\n        2)\nSELECT\n    *\nFROM\n    sumario_servico_dia_pagamento AS s\nLEFT JOIN\n    subsidio_valor_km_tipo_viagem AS p\nON\n    s.data BETWEEN p.data_inicio\n    AND p.data_fim\nWHERE\n    NOT(ROUND((valor_a_pagar - valor_penalidade)/subsidio_km_teto,2) <= ROUND(km_apurada_dia+0.01,2))", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.805936Z", "completed_at": "2025-02-20T18:16:59.813214Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.814533Z", "completed_at": "2025-02-20T18:16:59.814542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011034011840820312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.balanco_servico_dia", "compiled": true, "compiled_code": "\n-- 0. Lista servicos e dias at\u00edpicos (pagos por recurso)\nWITH\n  recursos AS (\n  SELECT\n    data,\n    id_recurso,\n    tipo_recurso,\n    -- consorcio,\n    servico,\n    SUM(valor_pago) AS valor_pago\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_servico_dia_pago`\n    -- `rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_servico_dia_pago`\n  GROUP BY\n    1,\n    2,\n    3,\n    4),\nservico_dia_atipico as (\nSELECT\n  DISTINCT data, servico\nFROM\n  recursos\nWHERE\n  -- Quando o valor do recurso pago for R$ 0, desconsidera-se o recurso, pois:\n    -- Recurso pode ter sido cancelado (pago e depois revertido)\n    -- Problema reporto n\u00e3o gerou impacto na opera\u00e7\u00e3o (quando aparece apenas 1 vez)\n  valor_pago != 0\n  -- Desconsideram-se recursos do tipo \"Algoritmo\" (igual a apura\u00e7\u00e3o em produ\u00e7\u00e3o, levantado pela TR/SUBTT/CMO)\n  -- Desconsideram-se recursos do tipo \"Viagem Individual\" (n\u00e3o afeta servi\u00e7o-dia)\n  AND tipo_recurso NOT IN (\"Algoritmo\", \"Viagem Individual\")\n  -- Desconsideram-se recursos de reprocessamento que j\u00e1 constam em produ\u00e7\u00e3o\n  AND NOT (data BETWEEN \"2022-06-01\" AND \"2022-06-30\"\n            AND tipo_recurso = \"Reprocessamento\")\n),\n\n-- 1. Calcula a km subsidiada por servico e dia\nsumario_dia AS (  -- Km apurada por servico e dia\n  SELECT\n    DATA,\n    consorcio,\n    servico,\n    SUM(km_apurada) AS km_subsidiada,\n    sum(valor_subsidio_pago) as subsidio_pago\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico`\n    -- `rj-smtr.dashboard_subsidio_sppo.sumario_servico_dia_historico`\n  WHERE\n    DATA BETWEEN \"2022-06-01\"\n    AND \"2023-12-31\"\n    and valor_subsidio_pago > 0\n  GROUP BY\n    1,\n    2,\n    3),\n  viagem_remunerada AS ( -- Km subsidiada pos regra do teto de 120% por servico e dia\n  SELECT\n    DATA,\n    servico,\n    SUM(distancia_planejada) AS km_subsidiada\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`viagens_remuneradas`\n    -- `rj-smtr.dashboard_subsidio_sppo.viagens_remuneradas`\n  WHERE\n    DATA BETWEEN \"2023-09-16\"\n    AND \"2023-12-31\"\n    AND indicador_viagem_dentro_limite = TRUE -- useless\n  GROUP BY\n    1,\n    2 ),\nkm_subsidiada_dia as (\n  SELECT\n  sd.* except(km_subsidiada),\n    ifnull(case when data >= \"2023-09-16\" then vr.km_subsidiada else sd.km_subsidiada end, 0) as km_subsidiada\n  FROM\n    sumario_dia sd\n  LEFT JOIN\n    viagem_remunerada as vr\n  using\n    (data, servico)\n),\n\n-- 2. Filtra km subsidiada apenas em dias t\u00edpicos (remove servicos e dias pagos por recurso)\nkm_subsidiada_filtrada as (\n  select\n    ksd.*\n  from km_subsidiada_dia ksd\n  left join servico_dia_atipico sda\n  using (data, servico)\n  where sda.data is null\n  -- Demais dias que n\u00e3o foi considerada a km apurada via GPS:\n  and ksd.data NOT IN (\"2022-10-02\", \"2022-10-30\", '2023-02-07', '2023-02-08', '2023-02-10', '2023-02-13', '2023-02-17', '2023-02-18', '2023-02-19', '2023-02-20', '2023-02-21', '2023-02-22')\n),\n\n\n-- 3. Calcula a receita tarifaria por servico e dia\nrdo AS (\n  SELECT\n    data,\n    consorcio,\n    CASE\n      WHEN LENGTH(linha) < 3 THEN LPAD(linha, 3, \"0\")\n    ELSE\n    CONCAT( IFNULL(REGEXP_EXTRACT(linha, r\"[B-Z]+\"), \"\"), IFNULL(REGEXP_EXTRACT(linha, r\"[0-9]+\"), \"\") )\n  END\n    AS servico,\n    round(SUM(receita_buc) + SUM(receita_buc_supervia) + SUM(receita_cartoes_perna_unica_e_demais) + SUM(receita_especie), 0) AS receita_tarifaria_aferida\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_registros`\n    -- `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_registros`\n  WHERE\n    DATA BETWEEN \"2022-06-01\" AND \"2023-12-31\"\n    AND DATA NOT IN (\"2022-10-02\", \"2022-10-30\", '2023-02-07', '2023-02-08', '2023-02-10', '2023-02-13', '2023-02-17', '2023-02-18', '2023-02-19', '2023-02-20', '2023-02-21', '2023-02-22')\n    and consorcio in (\"Internorte\", \"Intersul\", \"Santa Cruz\", \"Transcarioca\")\n  group by 1,2,3\n),\nparametros as (\n  SELECT\n    DISTINCT data_inicio,\n    data_fim,\n    irk,\n    case\n      when data_fim <= \"2022-12-31\" then irk - subsidio_km  -- subsidio varia ao longo dos meses\n      else coalesce(irk_tarifa_publica, irk - (subsidio_km + desconto_subsidio_km)) end as irk_tarifa_publica,\n    (subsidio_km + desconto_subsidio_km) as subsidio_km\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`parametros_km`\n  where data_inicio >= \"2022-06-01\" and data_fim <= \"2023-12-31\"\n)\n  select\n    *,\n    ifnull(receita_total_aferida, 0) - ifnull(receita_total_esperada - subsidio_glosado, 0) as saldo\n  from (\n    select\n      ks.* except(subsidio_pago),\n      ks.km_subsidiada * par.irk as receita_total_esperada,\n      ks.km_subsidiada * par.irk_tarifa_publica as receita_tarifaria_esperada,\n      ks.km_subsidiada * par.subsidio_km as subsidio_esperado,\n      case when data >= \"2023-01-01\" then (ks.km_subsidiada * par.subsidio_km - subsidio_pago) else 0 end as subsidio_glosado,\n      ifnull(rdo.receita_tarifaria_aferida, 0) + ifnull(ks.subsidio_pago, 0) as receita_total_aferida,\n      rdo.receita_tarifaria_aferida,\n      ks.subsidio_pago\n    from\n      km_subsidiada_filtrada ks\n    left join\n      rdo\n    using\n      (data, servico, consorcio)\n    left join\n      parametros par\n    on\n      ks.data between data_inicio and data_fim\n  )\n", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.827163Z", "completed_at": "2025-02-20T18:16:59.832980Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.834286Z", "completed_at": "2025-02-20T18:16:59.834294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009509801864624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.sumario_servico_tipo_viagem_dia", "compiled": true, "compiled_code": "WITH\n  planejado AS (\n  SELECT\n    DISTINCT `data`,\n    tipo_dia,\n    consorcio,\n    servico\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico`\n  WHERE\n    `data` <= DATE( \"2022-01-01T01:00:00\" )),\n  sumario_v1 AS ( -- Viagens v1\n  SELECT\n    `data`,\n    servico,\n    \"N\u00e3o classificado\" AS tipo_viagem,\n    NULL AS indicador_ar_condicionado,\n    viagens,\n    km_apurada\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico`\n  WHERE\n    `data` < DATE( \"2023-01-16\" ) ),\n  tipo_viagem_v2 AS ( -- Classifica os tipos de viagem (v2)\n  SELECT\n    `data`,\n    id_veiculo,\n    status,\n    SAFE_CAST(JSON_VALUE(indicadores,\"$.indicador_ar_condicionado\") AS BOOL) AS indicador_ar_condicionado\n  FROM\n    `rj-smtr`.`veiculo`.`sppo_veiculo_dia` -- `rj-smtr`.`veiculo`.`sppo_veiculo_dia`\n  WHERE\n    `data` BETWEEN DATE( \"2023-01-16\" )\n    AND DATE( \"2022-01-01T01:00:00\" ) ),\n  viagem_v2 AS (\n  SELECT\n    `data`,\n    servico_realizado AS servico,\n    id_veiculo,\n    id_viagem,\n    distancia_planejada\n  FROM\n    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa` --`rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n  WHERE\n    `data` BETWEEN DATE( \"2023-01-16\" )\n    AND DATE( \"2022-01-01T01:00:00\" ) ),\n  tipo_viagem_v2_atualizado AS (\n  SELECT\n    * EXCEPT(status),\n    CASE\n      WHEN status = \"Nao licenciado\" THEN \"N\u00e3o licenciado\"\n      WHEN status = \"Licenciado com ar e autuado (023.II)\" THEN \"Autuado por ar inoperante\"\n      WHEN status = \"Licenciado sem ar\" THEN \"Licenciado sem ar e n\u00e3o autuado\"\n      WHEN status = \"Licenciado com ar e n\u00e3o autuado (023.II)\" THEN \"Licenciado com ar e n\u00e3o autuado\"\n    ELSE status\n    END AS status\n  FROM\n    tipo_viagem_v2),\n  sumario_v2 AS (\n  SELECT\n    v.`data`,\n    v.servico,\n    ve.status AS tipo_viagem,\n    ve.indicador_ar_condicionado,\n    COUNT(id_viagem) AS viagens,\n    ROUND(SUM(distancia_planejada), 2) AS km_apurada\n  FROM\n    viagem_v2 v\n  LEFT JOIN\n    tipo_viagem_v2_atualizado ve\n  ON\n    ve.`data` = v.`data`\n    AND ve.id_veiculo = v.id_veiculo\n  GROUP BY\n    1,\n    2,\n    3,\n    4 )\n(\nSELECT\n  v1.`data`,\n  p.tipo_dia,\n  p.consorcio,\n  v1.servico,\n  COALESCE(v1.tipo_viagem, \"Sem viagem apurada\") AS tipo_viagem,\n  SAFE_CAST(indicador_ar_condicionado AS BOOL) AS indicador_ar_condicionado,\n  COALESCE(v1.viagens, 0) AS viagens,\n  COALESCE(v1.km_apurada, 0) AS km_apurada\nFROM\n  sumario_v1 v1\nINNER JOIN\n  planejado p\nON\n  p.`data` = v1.`data`\n  AND p.servico = v1.servico\nWHERE\n  p.`data` < DATE( \"2023-01-16\" ))\nUNION ALL (\nSELECT\n  v2.`data`,\n  p.tipo_dia,\n  p.consorcio,\n  v2.servico,\n  COALESCE(v2.tipo_viagem, \"Sem viagem apurada\") AS tipo_viagem,\n  v2.indicador_ar_condicionado,\n  COALESCE(v2.viagens, 0) AS viagens,\n  COALESCE(v2.km_apurada, 0) AS km_apurada\nFROM\n  sumario_v2 v2\nINNER JOIN\n  planejado p\nON\n  p.`data` = v2.`data`\n  AND p.servico = v2.servico\nWHERE\n  p.`data` >= DATE( \"2023-01-16\" ))", "relation_name": "`rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_tipo_viagem_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.838111Z", "completed_at": "2025-02-20T18:16:59.842914Z"}, {"name": "execute", "started_at": "2025-02-20T18:16:59.844178Z", "completed_at": "2025-02-20T18:16:59.844185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008430957794189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.subsidio_viagens_atualizadas__sumario_servico_dia_historico.684c124ab4", "compiled": true, "compiled_code": "WITH\n                viagem_completa AS (\n                SELECT\n                    data,\n                    datetime_ultima_atualizacao\n                FROM\n                    -- rj-smtr.projeto_subsidio_sppo.viagem_completa\n                    `rj-smtr`.`projeto_subsidio_sppo`.`viagem_completa`\n                WHERE\n                    DATA >= \"2024-04-01\"\n                    AND DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n                    AND DATE(\"2022-01-01T01:00:00\")),\n                sumario_servico_dia_historico AS (\n                SELECT\n                    data,\n                    datetime_ultima_atualizacao\n                FROM\n                    (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n                WHERE\n                    DATA BETWEEN DATE(\"2022-01-01T01:00:00\")\n                    AND DATE(\"2022-01-01T01:00:00\"))\n                SELECT\n                DISTINCT DATA\n                FROM\n                viagem_completa as c\n                LEFT JOIN\n                sumario_servico_dia_historico AS h\n                USING\n                (DATA)\n                WHERE\n                c.datetime_ultima_atualizacao > h.datetime_ultima_atualizacao", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:16:59.847958Z", "completed_at": "2025-02-20T18:17:01.607418Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.614034Z", "completed_at": "2025-02-20T18:17:01.614071Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7720122337341309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart__sumario_servico_dia_tipo_sem_glosa.87e364b470", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-01-01T00:00:00' as datetime ) as datetime),\n        interval (row_number() over (order by 1) - 1) day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-01-02 01:00:00' as datetime )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(data as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n\n        count(*) as row_cnt\n    from\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00')) f\n    \n    where 1=1\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.630242Z", "completed_at": "2025-02-20T18:17:01.641009Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.643152Z", "completed_at": "2025-02-20T18:17:01.643164Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01932382583618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__distancia_total_planejada__sumario_servico_dia_tipo_sem_glosa.48627673be", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not distancia_total_subsidio >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.648976Z", "completed_at": "2025-02-20T18:17:01.654958Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.656451Z", "completed_at": "2025-02-20T18:17:01.656460Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010437726974487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__distancia_total_planejada__sumario_servico_dia_tipo_sem_glosa.767878ed88", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not distancia_total_planejada >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.660541Z", "completed_at": "2025-02-20T18:17:01.668202Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.669450Z", "completed_at": "2025-02-20T18:17:01.669458Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011381864547729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_autuado_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.84241b30cf", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_autuado_ar_inoperante >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.673200Z", "completed_at": "2025-02-20T18:17:01.677963Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.679243Z", "completed_at": "2025-02-20T18:17:01.679250Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00837564468383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_autuado_limpezaequipamento__sumario_servico_dia_tipo_sem_glosa.f889200f31", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_autuado_limpezaequipamento >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.683560Z", "completed_at": "2025-02-20T18:17:01.688691Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.689936Z", "completed_at": "2025-02-20T18:17:01.689961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00961756706237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_autuado_seguranca__sumario_servico_dia_tipo_sem_glosa.044be58c37", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_autuado_seguranca >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.694434Z", "completed_at": "2025-02-20T18:17:01.699280Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.700521Z", "completed_at": "2025-02-20T18:17:01.700529Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008820772171020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_licenciado_com_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.01b62149d9", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_licenciado_com_ar_n_autuado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.704317Z", "completed_at": "2025-02-20T18:17:01.710351Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.711594Z", "completed_at": "2025-02-20T18:17:01.711602Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00960397720336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_licenciado_sem_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.9946b0763d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_licenciado_sem_ar_n_autuado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.715355Z", "completed_at": "2025-02-20T18:17:01.720041Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.721329Z", "completed_at": "2025-02-20T18:17:01.721336Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008419990539550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_n_licenciado__sumario_servico_dia_tipo_sem_glosa.93591162eb", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_n_licenciado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.725153Z", "completed_at": "2025-02-20T18:17:01.729881Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.731141Z", "completed_at": "2025-02-20T18:17:01.731148Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008351802825927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_n_vistoriado__sumario_servico_dia_tipo_sem_glosa.1f59e49f60", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_n_vistoriado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.735046Z", "completed_at": "2025-02-20T18:17:01.740055Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.741370Z", "completed_at": "2025-02-20T18:17:01.741379Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008783578872680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__km_apurada_registrado_com_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.3e6c16efab", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not km_apurada_registrado_com_ar_inoperante >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.745456Z", "completed_at": "2025-02-20T18:17:01.751907Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.753172Z", "completed_at": "2025-02-20T18:17:01.753181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010314226150512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__perc_distancia_total_subsidio__sumario_servico_dia_tipo_sem_glosa.71797e8d96", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not perc_distancia_total_subsidio >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.756916Z", "completed_at": "2025-02-20T18:17:01.761776Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.763094Z", "completed_at": "2025-02-20T18:17:01.763102Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008504867553710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__valor_total_subsidio__sumario_servico_dia_tipo_sem_glosa.e4c39de108", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not valor_total_subsidio >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.766868Z", "completed_at": "2025-02-20T18:17:01.771669Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.772909Z", "completed_at": "2025-02-20T18:17:01.772916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008424520492553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_autuado_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.4a144f4251", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_autuado_ar_inoperante >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.776754Z", "completed_at": "2025-02-20T18:17:01.781582Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.782840Z", "completed_at": "2025-02-20T18:17:01.782847Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00841832160949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_autuado_limpezaequipamento__sumario_servico_dia_tipo_sem_glosa.0c03dc567b", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_autuado_limpezaequipamento >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.786561Z", "completed_at": "2025-02-20T18:17:01.792574Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.793811Z", "completed_at": "2025-02-20T18:17:01.793818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009618043899536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_autuado_seguranca__sumario_servico_dia_tipo_sem_glosa.c9e023a6f4", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_autuado_seguranca >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.797616Z", "completed_at": "2025-02-20T18:17:01.802450Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.803707Z", "completed_at": "2025-02-20T18:17:01.803714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00848078727722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_licenciado_com_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.335fbe7038", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_licenciado_com_ar_n_autuado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.807514Z", "completed_at": "2025-02-20T18:17:01.812389Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.813649Z", "completed_at": "2025-02-20T18:17:01.813656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008773326873779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_licenciado_sem_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.00a8ef805d", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_licenciado_sem_ar_n_autuado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.817639Z", "completed_at": "2025-02-20T18:17:01.823349Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.824644Z", "completed_at": "2025-02-20T18:17:01.824651Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009347677230834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_n_vistoriado__sumario_servico_dia_tipo_sem_glosa.25f314845c", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_n_vistoriado >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.828381Z", "completed_at": "2025-02-20T18:17:01.833060Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.834369Z", "completed_at": "2025-02-20T18:17:01.834378Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008337259292602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_registrado_com_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.694489aba6", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_registrado_com_ar_inoperante >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.838133Z", "completed_at": "2025-02-20T18:17:01.842921Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.844182Z", "completed_at": "2025-02-20T18:17:01.844190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008443355560302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.accepted_range__viagens_subsidio__sumario_servico_dia_tipo_sem_glosa.9b2e7681d8", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not viagens_subsidio >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.848012Z", "completed_at": "2025-02-20T18:17:01.852676Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.853914Z", "completed_at": "2025-02-20T18:17:01.853921Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008258581161499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.dbt_utils.unique_combination_of_columns__sumario_servico_dia_tipo_sem_glosa.4450792064", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        data, servico\n    from (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    group by data, servico\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.857805Z", "completed_at": "2025-02-20T18:17:01.863599Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.864863Z", "completed_at": "2025-02-20T18:17:01.864870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009519100189208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__consorcio__sumario_servico_dia_tipo_sem_glosa.574cd85070", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect consorcio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere consorcio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.868581Z", "completed_at": "2025-02-20T18:17:01.873250Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.874534Z", "completed_at": "2025-02-20T18:17:01.874541Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008397579193115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__data__sumario_servico_dia_tipo_sem_glosa.8a201f4cea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect data\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere data is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.878407Z", "completed_at": "2025-02-20T18:17:01.883096Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.884397Z", "completed_at": "2025-02-20T18:17:01.884403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008311033248901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__distancia_total_planejada__sumario_servico_dia_tipo_sem_glosa.b22579fec3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_total_planejada\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_total_planejada is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.888437Z", "completed_at": "2025-02-20T18:17:01.893570Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.895158Z", "completed_at": "2025-02-20T18:17:01.895172Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010017633438110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__distancia_total_subsidio__sumario_servico_dia_tipo_sem_glosa.76186b1aa5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distancia_total_subsidio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere distancia_total_subsidio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.900112Z", "completed_at": "2025-02-20T18:17:01.906717Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.908165Z", "completed_at": "2025-02-20T18:17:01.908173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010743141174316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_autuado_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.d53ee6849a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_autuado_ar_inoperante\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_autuado_ar_inoperante is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.912013Z", "completed_at": "2025-02-20T18:17:01.917087Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.918396Z", "completed_at": "2025-02-20T18:17:01.918403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008753061294555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_autuado_limpezaequipamento__sumario_servico_dia_tipo_sem_glosa.7a189cdcd0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_autuado_limpezaequipamento\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_autuado_limpezaequipamento is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.922403Z", "completed_at": "2025-02-20T18:17:01.927321Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.928552Z", "completed_at": "2025-02-20T18:17:01.928561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008664369583129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_autuado_seguranca__sumario_servico_dia_tipo_sem_glosa.07706022f7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_autuado_seguranca\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_autuado_seguranca is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.932359Z", "completed_at": "2025-02-20T18:17:01.937142Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.938435Z", "completed_at": "2025-02-20T18:17:01.938441Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008408784866333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_licenciado_com_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.4bf6b75697", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_licenciado_com_ar_n_autuado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_licenciado_com_ar_n_autuado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.942531Z", "completed_at": "2025-02-20T18:17:01.948601Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.949841Z", "completed_at": "2025-02-20T18:17:01.949848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00989532470703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_licenciado_sem_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.ea6ba787b2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_licenciado_sem_ar_n_autuado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_licenciado_sem_ar_n_autuado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.953631Z", "completed_at": "2025-02-20T18:17:01.958527Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.959798Z", "completed_at": "2025-02-20T18:17:01.959805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00849151611328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_n_licenciado__sumario_servico_dia_tipo_sem_glosa.bb3d117500", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_n_licenciado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_n_licenciado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.963878Z", "completed_at": "2025-02-20T18:17:01.968584Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.969815Z", "completed_at": "2025-02-20T18:17:01.969822Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008594274520874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_n_vistoriado__sumario_servico_dia_tipo_sem_glosa.f471d79d5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_n_vistoriado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_n_vistoriado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.973718Z", "completed_at": "2025-02-20T18:17:01.978726Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.980019Z", "completed_at": "2025-02-20T18:17:01.980028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008827924728393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__km_apurada_registrado_com_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.904b577166", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect km_apurada_registrado_com_ar_inoperante\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere km_apurada_registrado_com_ar_inoperante is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.984765Z", "completed_at": "2025-02-20T18:17:01.992293Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:01.993561Z", "completed_at": "2025-02-20T18:17:01.993570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011614561080932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__perc_distancia_total_subsidio__sumario_servico_dia_tipo_sem_glosa.91924ab210", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perc_distancia_total_subsidio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere perc_distancia_total_subsidio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:01.997461Z", "completed_at": "2025-02-20T18:17:02.002563Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.003814Z", "completed_at": "2025-02-20T18:17:02.003821Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00870203971862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__servico__sumario_servico_dia_tipo_sem_glosa.10994f6b11", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect servico\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere servico is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.007647Z", "completed_at": "2025-02-20T18:17:02.012556Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.013825Z", "completed_at": "2025-02-20T18:17:02.013832Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008617162704467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__tipo_dia__sumario_servico_dia_tipo_sem_glosa.5f1e348d3a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tipo_dia\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere tipo_dia is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.017658Z", "completed_at": "2025-02-20T18:17:02.023722Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.025022Z", "completed_at": "2025-02-20T18:17:02.025029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00973200798034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__valor_total_subsidio__sumario_servico_dia_tipo_sem_glosa.60cc7877c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valor_total_subsidio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere valor_total_subsidio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.028844Z", "completed_at": "2025-02-20T18:17:02.033525Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.034747Z", "completed_at": "2025-02-20T18:17:02.034754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008236408233642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_autuado_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.22dfaa99a3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_autuado_ar_inoperante\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_autuado_ar_inoperante is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.038510Z", "completed_at": "2025-02-20T18:17:02.043323Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.044591Z", "completed_at": "2025-02-20T18:17:02.044597Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008458614349365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_autuado_limpezaequipamento__sumario_servico_dia_tipo_sem_glosa.9e65814996", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_autuado_limpezaequipamento\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_autuado_limpezaequipamento is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.048401Z", "completed_at": "2025-02-20T18:17:02.053122Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.054399Z", "completed_at": "2025-02-20T18:17:02.054406Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008374929428100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_autuado_seguranca__sumario_servico_dia_tipo_sem_glosa.842981e47b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_autuado_seguranca\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_autuado_seguranca is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.058352Z", "completed_at": "2025-02-20T18:17:02.064625Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.065928Z", "completed_at": "2025-02-20T18:17:02.065937Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010112762451171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_licenciado_com_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.9c15be0725", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_licenciado_com_ar_n_autuado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_licenciado_com_ar_n_autuado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.069662Z", "completed_at": "2025-02-20T18:17:02.074706Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.075947Z", "completed_at": "2025-02-20T18:17:02.075954Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008604288101196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_licenciado_sem_ar_n_autuado__sumario_servico_dia_tipo_sem_glosa.35621a359e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_licenciado_sem_ar_n_autuado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_licenciado_sem_ar_n_autuado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.079716Z", "completed_at": "2025-02-20T18:17:02.084540Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.085844Z", "completed_at": "2025-02-20T18:17:02.085851Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008750677108764648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_n_vistoriado__sumario_servico_dia_tipo_sem_glosa.515d40db58", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_n_vistoriado\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_n_vistoriado is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.091099Z", "completed_at": "2025-02-20T18:17:02.095966Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.097250Z", "completed_at": "2025-02-20T18:17:02.097257Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009305715560913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_registrado_com_ar_inoperante__sumario_servico_dia_tipo_sem_glosa.d1d3ede74d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_registrado_com_ar_inoperante\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_registrado_com_ar_inoperante is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.101195Z", "completed_at": "2025-02-20T18:17:02.107436Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.108695Z", "completed_at": "2025-02-20T18:17:02.108703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009998083114624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.not_null__viagens_subsidio__sumario_servico_dia_tipo_sem_glosa.ec78cdaecb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viagens_subsidio\nfrom (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\nwhere viagens_subsidio is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.112504Z", "completed_at": "2025-02-20T18:17:02.117344Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.118635Z", "completed_at": "2025-02-20T18:17:02.118643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008515596389770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.rj_smtr.teto_pagamento_valor_subsidio_pago__sumario_servico_dia_tipo_sem_glosa.7181810de9", "compiled": true, "compiled_code": "WITH\nsumario_servico_dia_tipo_sem_glosa AS (\n    SELECT\n        *,\n    FROM\n        (select * from `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_tipo_sem_glosa` where DATA BETWEEN DATE('2022-01-01T00:00:00') AND DATE('2022-01-01T01:00:00'))\n    WHERE\n        DATA BETWEEN DATE(\"2022-01-01T00:00:00\")\n        AND DATE(\"2022-01-01T01:00:00\")),\nsubsidio_valor_km_tipo_viagem AS (\n    SELECT\n        data_inicio,\n        data_fim,\n        MAX(subsidio_km) AS subsidio_km_teto\n    FROM\n        -- `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n        `rj-smtr`.`dashboard_subsidio_sppo_staging`.`subsidio_valor_km_tipo_viagem`\n    WHERE\n        subsidio_km > 0\n    GROUP BY\n        1,\n        2)\nSELECT\n    *\nFROM\n    sumario_servico_dia_tipo_sem_glosa AS s\nLEFT JOIN\n    subsidio_valor_km_tipo_viagem AS p\nON\n    s.data BETWEEN p.data_inicio\n    AND p.data_fim\nWHERE\n    NOT(ROUND(valor_total_subsidio/subsidio_km_teto,2) <= ROUND(distancia_total_subsidio+0.01,2))", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.131278Z", "completed_at": "2025-02-20T18:17:02.135601Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.136893Z", "completed_at": "2025-02-20T18:17:02.136900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008020639419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.balanco_consorcio_ano", "compiled": true, "compiled_code": "\n\nselect\n  extract(year from data) as ano,\n  consorcio,\n  sum(km_subsidiada) as km_subsidiada,\n  sum(receita_total_esperada) as receita_total_esperada,\n  sum(receita_tarifaria_esperada) as receita_tarifaria_esperada,\n  sum(subsidio_esperado) as subsidio_esperado,\n  sum(subsidio_glosado) as subsidio_glosado,\n  sum(receita_total_aferida) as receita_total_aferida,\n  sum(receita_tarifaria_aferida) as receita_tarifaria_aferida,\n  sum(subsidio_pago) as subsidio_pago,\n  sum(saldo) as saldo\nfrom `rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_dia`\ngroup by 1,2\norder by 1,2", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_consorcio_ano`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.140749Z", "completed_at": "2025-02-20T18:17:02.147335Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.148590Z", "completed_at": "2025-02-20T18:17:02.148598Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01028752326965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.balanco_consorcio_dia", "compiled": true, "compiled_code": "\n\nselect\n  data,\n  consorcio,\n  sum(km_subsidiada) as km_subsidiada,\n  sum(receita_total_esperada) as receita_total_esperada,\n  sum(receita_tarifaria_esperada) as receita_tarifaria_esperada,\n  sum(subsidio_esperado) as subsidio_esperado,\n  sum(subsidio_glosado) as subsidio_glosado,\n  sum(receita_total_aferida) as receita_total_aferida,\n  sum(receita_tarifaria_aferida) as receita_tarifaria_aferida,\n  sum(subsidio_pago) as subsidio_pago,\n  sum(saldo) as saldo\nfrom `rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_dia`\ngroup by 1,2\norder by 1,2", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_consorcio_dia`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.152466Z", "completed_at": "2025-02-20T18:17:02.157235Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.158572Z", "completed_at": "2025-02-20T18:17:02.158581Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008533000946044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.balanco_servico_ano", "compiled": true, "compiled_code": "\n\nselect\n  extract(year from data) as ano,\n  consorcio,\n  servico,\n  sum(km_subsidiada) as km_subsidiada,\n  sum(receita_total_esperada) as receita_total_esperada,\n  sum(receita_tarifaria_esperada) as receita_tarifaria_esperada,\n  sum(subsidio_esperado) as subsidio_esperado,\n  sum(subsidio_glosado) as subsidio_glosado,\n  sum(receita_total_aferida) as receita_total_aferida,\n  sum(receita_tarifaria_aferida) as receita_tarifaria_aferida,\n  sum(subsidio_pago) as subsidio_pago,\n  sum(saldo) as saldo\nfrom `rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_dia`\ngroup by 1,2,3\norder by 1,2,3", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_ano`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.162441Z", "completed_at": "2025-02-20T18:17:02.167101Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.168395Z", "completed_at": "2025-02-20T18:17:02.168402Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008355140686035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.balanco_servico_quinzena", "compiled": true, "compiled_code": "\n\nWITH\n  q1 AS (\n  SELECT\n    FORMAT_DATE('%Y-%m-Q1', date) AS quinzena,\n    date AS data_inicial_quinzena,\n    DATE_ADD(date, INTERVAL 14 DAY) AS data_final_quinzena\n  FROM\n    UNNEST(GENERATE_DATE_ARRAY('2022-06-01', '2023-12-31', INTERVAL 1 MONTH)) AS date ),\n  q2 AS (\n  SELECT\n    FORMAT_DATE('%Y-%m-Q2', date) AS quinzena,\n    DATE_ADD(date, INTERVAL 15 DAY) AS data_inicial_quinzena,\n    LAST_DAY(date) AS data_final_quinzena\n  FROM\n    UNNEST(GENERATE_DATE_ARRAY('2022-06-01', '2023-12-31', INTERVAL 1 MONTH)) AS date ),\n  quinzenas AS (\n  SELECT\n    *\n  FROM\n    q1\n  UNION ALL\n  SELECT\n    *\n  FROM\n    q2\n  ORDER BY\n    data_inicial_quinzena )\nSELECT\n  quinzena,\n  data_inicial_quinzena,\n  data_final_quinzena,\n  consorcio,\n  servico,\n  COUNT(DATA) AS quantidade_dias_subsidiado,\n  SUM(km_subsidiada) AS km_subsidiada,\n  SUM(receita_total_esperada) AS receita_total_esperada,\n  SUM(receita_tarifaria_esperada) AS receita_tarifaria_esperada,\n  SUM(subsidio_esperado) AS subsidio_esperado,\n  SUM(subsidio_glosado) AS subsidio_glosado,\n  SUM(receita_total_aferida) AS receita_total_aferida,\n  SUM(receita_tarifaria_aferida) AS receita_tarifaria_aferida,\n  SUM(subsidio_pago) AS subsidio_pago,\n  SUM(saldo) AS saldo\nFROM\n  quinzenas qz\nLEFT JOIN\n  `rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_dia` bs\nON\n  bs.data BETWEEN qz.data_inicial_quinzena\n  AND qz.data_final_quinzena\nGROUP BY\n  quinzena,\n  data_inicial_quinzena,\n  data_final_quinzena,\n  consorcio,\n  servico\nORDER BY\n  data_inicial_quinzena,\n  consorcio,\n  servico", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_quinzena`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.172367Z", "completed_at": "2025-02-20T18:17:02.178688Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.179976Z", "completed_at": "2025-02-20T18:17:02.179984Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010154247283935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.monitoramento_sumario_servico_dia_historico", "compiled": true, "compiled_code": "\nwith __dbt__cte__monitoramento_servico_dia as (\n\n\nselect\n    data,\n    tipo_dia,\n    consorcio,\n    servico,\n    vista,\n    viagens,\n    km_apurada,\n    km_planejada,\n    perc_km_planejada,\n    valor_subsidio_pago,\n    valor_penalidade\nfrom `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico`\n-- `rj-smtr.dashboard_subsidio_sppo.sumario_servico_dia_historico`\nwhere\n    data < DATE(\"2024-08-16\") --noqa\n    \n),  __dbt__cte__monitoramento_servico_dia_v2 as (\n\n\n\n\nwith\n    subsidio_faixa_agg as (\n        select\n            data,\n            faixa_horaria_inicio,\n            faixa_horaria_fim,\n            tipo_dia,\n            consorcio,\n            servico,\n            sum(\n                case\n                    when\n                        data >= date(\"2024-09-01\")\n                        and tipo_viagem not in (\"N\u00e3o licenciado\", \"N\u00e3o vistoriado\")\n                    then km_apurada_faixa\n                    when data < date(\"2024-09-01\")\n                    then km_apurada_faixa\n                    else 0\n                end\n            ) as km_apurada_faixa\n        from `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n        where\n            data\n            between date(\"2022-01-01T01:00:00\") and date(\"2022-01-01T01:00:00\")\n        group by\n            data, tipo_dia, consorcio, servico, faixa_horaria_inicio, faixa_horaria_fim\n    ),\n    sumario_faixa_servico_dia as (\n        select\n            sdp.data,\n            sdp.tipo_dia,\n            sdp.consorcio,\n            sdp.servico,\n            sum(sdp.viagens_faixa) as viagens_dia,\n            sum(sfa.km_apurada_faixa) as km_apurada,\n            sum(sdp.km_planejada_faixa) as km_planejada_dia,\n            sum(sdp.valor_a_pagar) as valor_a_pagar,\n            sum(sdp.valor_penalidade) as valor_penalidade\n        from `rj-smtr`.`dashboard_subsidio_sppo_v2`.`sumario_faixa_servico_dia_pagamento` as sdp\n        -- `rj-smtr.dashboard_subsidio_sppo_v2.sumario_faixa_servico_dia_pagamento`\n        left join\n            subsidio_faixa_agg as sfa using (\n                data,\n                servico,\n                faixa_horaria_inicio,\n                faixa_horaria_fim,\n                tipo_dia,\n                consorcio\n            )\n        where\n            data\n            between date(\"2022-01-01T01:00:00\") and date(\"2022-01-01T01:00:00\")\n            and data >= date(\"2025-01-05\")\n        group by data, tipo_dia, consorcio, servico\n    ),\n    \n        sumario_servico_dia as (\n            select\n                data,\n                sdp.tipo_dia,\n                sdp.consorcio,\n                servico,\n                sdp.viagens_dia,\n                sum(km_apurada_faixa) as km_apurada,\n                km_planejada_dia,\n                valor_a_pagar,\n                valor_penalidade\n            from `rj-smtr`.`financeiro`.`subsidio_sumario_servico_dia_pagamento` as sdp\n            left join subsidio_faixa_agg using (data, servico)\n            where\n                data between date(\"2022-01-01T01:00:00\") and date(\n                    \"2022-01-01T01:00:00\"\n                )\n                and data < date(\"2025-01-05\")\n            group by\n                data,\n                tipo_dia,\n                consorcio,\n                servico,\n                viagens_dia,\n                km_planejada_dia,\n                valor_a_pagar,\n                valor_penalidade\n        ),\n    \n    valores_subsidio as (\n        \n            select *\n            from sumario_servico_dia\n            union all\n        \n        select *\n        from sumario_faixa_servico_dia\n    ),\n    planejada as (\n        select distinct data, consorcio, servico, vista\n        from `rj-smtr`.`projeto_subsidio_sppo`.`viagem_planejada`\n        -- `rj-smtr.projeto_subsidio_sppo.viagem_planejada`\n        where\n            data >= date(\"2024-08-16\")\n            and (id_tipo_trajeto = 0 or id_tipo_trajeto is null)\n            and format_time(\"%T\", time(faixa_horaria_inicio)) != \"00:00:00\"\n    ),\n    pagamento as (\n        select\n            data,\n            tipo_dia,\n            consorcio,\n            servico,\n            vista,\n            viagens_dia as viagens,\n            km_apurada,\n            km_planejada_dia as km_planejada,\n            valor_a_pagar as valor_subsidio_pago,\n            valor_penalidade\n        from valores_subsidio as sdp\n        left join planejada as p using (data, servico, consorcio)\n        where\n            data >= date(\"2024-08-16\")\n            \n    )\nselect\n    data,\n    tipo_dia,\n    consorcio,\n    servico,\n    vista,\n    viagens,\n    km_apurada,\n    km_planejada,\n    round(100 * km_apurada / km_planejada, 2) as perc_km_planejada,\n    valor_subsidio_pago,\n    valor_penalidade\nfrom pagamento\n) select *\nfrom __dbt__cte__monitoramento_servico_dia\nwhere\n    data < date(\"2024-08-16\")\nunion all\nselect *\nfrom __dbt__cte__monitoramento_servico_dia_v2\nwhere\n    data >= date(\"2024-08-16\")", "relation_name": "`rj-smtr`.`monitoramento`.`sumario_servico_dia_historico`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.194002Z", "completed_at": "2025-02-20T18:17:02.209405Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.210827Z", "completed_at": "2025-02-20T18:17:02.210836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01924729347229004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.receita_tarifaria_servico_nao_identificado_quinzena", "compiled": true, "compiled_code": "\n\nWITH\n   __dbt__cte__aux_balanco_rdo_servico_dia as (\n\n\n-- 0. Lista servicos e dias at\u00edpicos (pagos por recurso)\nWITH\n  recursos AS (\n  SELECT\n    data,\n    id_recurso,\n    tipo_recurso,\n    servico,\n    SUM(valor_pago) AS valor_pago\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_servico_dia_pago`\n    -- `rj-smtr`.`br_rj_riodejaneiro_recursos`.`recursos_sppo_servico_dia_pago`\n  GROUP BY\n    1,\n    2,\n    3,\n    4),\nservico_dia_atipico as (\nSELECT\n  DISTINCT data, servico\nFROM\n  recursos\nWHERE\n  -- Quando o valor do recurso pago for R$ 0, desconsidera-se o recurso, pois:\n    -- Recurso pode ter sido cancelado (pago e depois revertido)\n    -- Problema reporto n\u00e3o gerou impacto na opera\u00e7\u00e3o (quando aparece apenas 1 vez)\n  valor_pago != 0\n  -- Desconsideram-se recursos do tipo \"Algoritmo\" (igual a apura\u00e7\u00e3o em produ\u00e7\u00e3o, levantado pela TR/SUBTT/CMO)\n  -- Desconsideram-se recursos do tipo \"Viagem Individual\" (n\u00e3o afeta servi\u00e7o-dia)\n  AND tipo_recurso NOT IN (\"Algoritmo\", \"Viagem Individual\")\n  -- Desconsideram-se recursos de reprocessamento que j\u00e1 constam em produ\u00e7\u00e3o\n  AND NOT (data BETWEEN \"2022-06-01\" AND \"2022-06-30\"\n            AND tipo_recurso = \"Reprocessamento\")\n),\n\n-- 3. Calcula a receita tarifaria por servico e dia\nrdo AS (\n  SELECT\n    data,\n    consorcio,\n    CASE\n      WHEN LENGTH(linha) < 3 THEN LPAD(linha, 3, \"0\")\n    ELSE\n    CONCAT( IFNULL(REGEXP_EXTRACT(linha, r\"[B-Z]+\"), \"\"), IFNULL(REGEXP_EXTRACT(linha, r\"[0-9]+\"), \"\") )\n  END\n    AS servico,\n    linha,\n    tipo_servico,\n    ordem_servico,\n    round(SUM(receita_buc) + SUM(receita_buc_supervia) + SUM(receita_cartoes_perna_unica_e_demais) + SUM(receita_especie), 0) AS receita_tarifaria_aferida\n  FROM\n    `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_registros`\n    -- `rj-smtr`.`br_rj_riodejaneiro_rdo`.`rdo40_registros`\n  WHERE\n    DATA BETWEEN \"2022-06-01\" AND \"2023-12-31\"\n    AND DATA NOT IN (\"2022-10-02\", \"2022-10-30\", '2023-02-07', '2023-02-08', '2023-02-10', '2023-02-13', '2023-02-17', '2023-02-18', '2023-02-19', '2023-02-20', '2023-02-21', '2023-02-22')\n    and consorcio in (\"Internorte\", \"Intersul\", \"Santa Cruz\", \"Transcarioca\")\n    and (length(linha) != 4 and linha not like \"2%\") --  Remove rodoviarios\n  group by 1,2,3,4,5,6\n),\n-- Remove servicos nao subsidiados\nsumario_dia AS (\n  SELECT\n    DATA,\n    consorcio,\n    servico,\n    SUM(km_apurada) AS km_subsidiada,\n    sum(valor_subsidio_pago) as subsidio_pago\n  FROM\n    `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_dia_historico`\n    -- `rj-smtr.dashboard_subsidio_sppo.sumario_servico_dia_historico`\n  WHERE\n    DATA BETWEEN \"2022-06-01\"\n    AND \"2023-12-31\"\n    and valor_subsidio_pago = 0\n  GROUP BY\n    1,\n    2,\n    3),\nrdo_filtrada as (\n    select rdo.* from\n    (\n      select * from rdo\n      left join servico_dia_atipico sda\n      using (data, servico)\n      where sda.data is null\n    ) rdo\n    left join sumario_dia sd\n    using (data, servico)\n    where sd.servico is null\n)\nSELECT\n  bsd.data,\n  bsd.consorcio,\n  bsd.servico,\n  bsd.km_subsidiada,\n  bsd.receita_tarifaria_aferida,\n  rdo.data as data_rdo,\n  rdo.consorcio as consorcio_rdo,\n  rdo.servico as servico_tratado_rdo,\n  rdo.linha as linha_rdo,\n  rdo.tipo_servico as tipo_servico_rdo,\n  rdo.ordem_servico as ordem_servico_rdo,\n  rdo.receita_tarifaria_aferida as receita_tarifaria_aferida_rdo\nFROM\n  `rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`balanco_servico_dia` bsd\nFULL JOIN\n  rdo_filtrada rdo\nUSING\n  (data, servico)\n), q1 AS (\n  SELECT\n    FORMAT_DATE('%Y-%m-Q1', date) AS quinzena,\n    date AS data_inicial_quinzena,\n    DATE_ADD(date, INTERVAL 14 DAY) AS data_final_quinzena\n  FROM\n    UNNEST(GENERATE_DATE_ARRAY('2022-06-01', '2023-12-31', INTERVAL 1 MONTH)) AS date ),\n  q2 AS (\n  SELECT\n    FORMAT_DATE('%Y-%m-Q2', date) AS quinzena,\n    DATE_ADD(date, INTERVAL 15 DAY) AS data_inicial_quinzena,\n    LAST_DAY(date) AS data_final_quinzena\n  FROM\n    UNNEST(GENERATE_DATE_ARRAY('2022-06-01', '2023-12-31', INTERVAL 1 MONTH)) AS date ),\n  quinzenas AS (\n  SELECT\n    *\n  FROM\n    q1\n  UNION ALL\n  SELECT\n    *\n  FROM\n    q2\n  ORDER BY\n    data_inicial_quinzena )\nSELECT\n  quinzena,\n  data_inicial_quinzena,\n  data_final_quinzena,\n  consorcio_rdo,\n  servico_tratado_rdo,\n  linha_rdo,\n  tipo_servico_rdo,\n  ordem_servico_rdo,\n  COUNT(data_rdo) AS quantidade_dias_rdo,\n  SUM(receita_tarifaria_aferida_rdo) AS receita_tarifaria_aferida_rdo\nFROM\n  quinzenas qz\nLEFT JOIN (\n  SELECT * from __dbt__cte__aux_balanco_rdo_servico_dia WHERE servico is null\n) bs\nON\n  bs.data_rdo BETWEEN qz.data_inicial_quinzena\n  AND qz.data_final_quinzena\nGROUP BY\n  1,2,3,4,5,6,7,8\nORDER BY\n  2,4,5,6,7,8\n", "relation_name": "`rj-smtr`.`projeto_subsidio_sppo_encontro_contas`.`receita_tarifaria_servico_nao_identificado_quinzena`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-20T18:17:02.214836Z", "completed_at": "2025-02-20T18:17:02.221424Z"}, {"name": "execute", "started_at": "2025-02-20T18:17:02.222718Z", "completed_at": "2025-02-20T18:17:02.222726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010420560836791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.rj_smtr.monitoramento_sumario_servico_dia_tipo_viagem_historico", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__monitoramento_servico_dia_tipo_viagem as (\n\n\nselect\n    data,\n    tipo_dia,\n    consorcio,\n    servico,\n    tipo_viagem,\n    indicador_ar_condicionado,\n    viagens,\n    km_apurada\nfrom `rj-smtr`.`dashboard_subsidio_sppo`.`sumario_servico_tipo_viagem_dia`\n-- `rj-smtr.dashboard_subsidio_sppo.sumario_servico_tipo_viagem_dia`\nwhere\n    data < date(\"2024-08-16\")\n    \n),  __dbt__cte__monitoramento_servico_dia_tipo_viagem_v2 as (\n\n\nselect\n    data,\n    tipo_dia,\n    consorcio,\n    servico,\n    tipo_viagem,\n    indicador_ar_condicionado,\n    sum(viagens_faixa) as viagens,\n    sum(km_apurada_faixa) as km_apurada\nfrom `rj-smtr`.`financeiro`.`subsidio_faixa_servico_dia_tipo_viagem`\n-- `rj-smtr.financeiro.subsidio_faixa_servico_dia_tipo_viagem`\nwhere\n    data >= date(\"2024-08-16\")\n    and tipo_viagem != \"Sem viagem apurada\"\n    \ngroup by data, tipo_dia, consorcio, servico, tipo_viagem, indicador_ar_condicionado\n) select *\nfrom __dbt__cte__monitoramento_servico_dia_tipo_viagem\nwhere\n    data < date(\"2024-08-16\")\nunion all\nselect *\nfrom __dbt__cte__monitoramento_servico_dia_tipo_viagem_v2\nwhere\n    data >= date(\"2024-08-16\")\n    and tipo_viagem != \"Sem viagem apurada\"", "relation_name": "`rj-smtr`.`monitoramento`.`sumario_servico_dia_tipo_viagem_historico`"}], "elapsed_time": 235.58813524246216, "args": {"select": [], "use_colors": true, "empty_catalog": false, "use_colors_file": true, "vars": {}, "printer_width": 80, "log_format": "default", "static_parser": true, "compile": true, "show_resource_report": false, "log_format_file": "debug", "send_anonymous_usage_stats": true, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "quiet": false, "exclude": [], "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "introspect": true, "project_dir": "/home/caio/projects/pipelines_rj_smtr/queries", "favor_state": false, "defer": false, "log_level": "info", "populate_cache": true, "which": "generate", "write_json": true, "invocation_command": "dbt docs generate --profiles-dir ./profiles", "cache_selected_only": false, "profiles_dir": "./profiles", "static": false, "strict_mode": false, "macro_debugging": false, "partial_parse_file_diff": true, "log_level_file": "debug", "partial_parse": true, "print": true, "enable_legacy_logger": false, "log_path": "/home/caio/projects/pipelines_rj_smtr/queries/logs"}}